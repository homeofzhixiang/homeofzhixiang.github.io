<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/03/31/2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/31/2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0df71341869b9ba1f54772678ff9d621146d14671d57ea8c9895304c7aa73ce8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">🐶嘿嘿, 你没有权限进入呢！🐕.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯专题备赛—二分</title>
      <link href="/2023/03/07/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B8%93%E9%A2%98%E5%A4%87%E8%B5%9B%E2%80%94%E4%BA%8C%E5%88%86/"/>
      <url>/2023/03/07/%E8%93%9D%E6%A1%A5%E6%9D%AF%E4%B8%93%E9%A2%98%E5%A4%87%E8%B5%9B%E2%80%94%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯专题备赛—二分">蓝桥杯专题备赛—二分</h1><p>二分问题常用于求具有二段性的某一性质的边界值问题。</p><p>只要性质具有二段性或单调性，就可以尝试用二分。二分的复杂度为$O(logn)$，作为一种搜索方法常结合循环等使用。事实上，二分是一种优化暴力方法的常用方法，和暴力思路结合的很紧密。</p><p>一些最值问题其实就是性质的边界值问题，此时可以用二分求解。</p><p>二分的本质是，根据某一性质将区间左右一分为二，使一部分满足该性质，另一部分不满足该性质。</p><p>如果可以找到一个性质使区间左右一分为二（一部分满足，一部分不满足），二分就可以找到性质的边界。</p><p>二分问题要满足的条件：</p><ol><li class="lvl-3"><p>确定一个区间，使得目标值一定在区间中</p></li><li class="lvl-3"><p>找一个性质，满足：</p><ul class="lvl-2"><li class="lvl-6">性质具有二段性</li><li class="lvl-6">答案是二段性的分界点</li></ul></li></ol><h2 id="整数二分">整数二分</h2><h3 id="整数二分步骤">整数二分步骤</h3><ol><li class="lvl-3"><p>找一个区间[L, R]，使得答案一定在该区间中</p></li><li class="lvl-3"><p>找一个判断条件，使得该判断条件具有二段性，并且答案一定是该二段性的分界点</p></li><li class="lvl-3"><p>分析终点M在该判断条件下是否成立，如果成立，考虑答案在哪个区间；如果不成立，考虑答案再哪个区间</p><ul class="lvl-2"><li class="lvl-5">如果条件成立（性质满足）的区间在左部，则为&lt;= x型，采用L=mid模板</li><li class="lvl-5">如果条件成立（性质满足）的区间在右部，则为&lt;= x型，采用R=mid模板</li></ul></li><li class="lvl-3"><p>如果更新方式写的是R = mid，则不用做任何处理；如果更新方式写的是L = mid，则需要在计算mid时加上1</p></li></ol><h3 id="整数二分的常见类型">整数二分的常见类型</h3><h4 id="问题形式角度">问题形式角度</h4><ol><li class="lvl-3"><p>数据序列的二段性：问题中的数据序列具有单调性、二段性、适用于排序，在处理数据时进行二分</p></li><li class="lvl-3"><p>解（最值）的二段性：一般适用于最值问题，即求解给定条件下的最值。如果发现，针对题目的约束条件，以最值为边界点具有二段性（一段一定满足约束，一段不满足），即可使用二分对解进行搜索。数据的二段性只是将二段性直接变现出来了，其本质也是解（最值）的二段性。</p></li></ol><p>常见特征词：求”最大值“、”最小值“、”平均值“的最大/最小值</p><p>二分重要性质：<strong>将假设的解作为已知条件，将问题转化为判定问题</strong></p><ul class="lvl-0"><li class="lvl-2"><p>二分搜索解时，假设的解实际上可以作为已知条件进行使用。二分本质上可以让我们多一个条件（假设出解），将问题转化为判断问题（判断当前的解是否成立）。善用这一性质往往能极大化简问题！</p></li></ul><h4 id="二分性质角度">二分性质角度</h4><p>确定为二分问题后就要找到二段性，尽管问题的场景多种多样，但一般二段性只有两类：</p><p><img src="https://mdpic.dreamgo.fun/img/%E4%B8%A4%E7%B1%BB%E4%BA%8C%E5%88%86.png" alt="两类二分"></p><ul class="lvl-0"><li class="lvl-2"><p><code>&lt;= x</code>类：check函数&lt;= x时返回真，左半部分都是真，边界点属于左半部分</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左半部分满足性质，如&lt;=x的数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_left</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">        <span class="comment">// 分界点在左半部分，如小于等于某个数的最大值</span></span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//int mid = l + (r - l + 1) / 2; // 避免溢出问题</span></span><br><span class="line">        <span class="comment">// 当分界点在左半部分时，之所以$mid = \frac&#123;l+r+1&#125;&#123;2&#125;$多加一个1是为了避免mid = l导致更新时l = mid会不发生变化，陷入死循环（这种情况出现在l = r - 1时）。</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="comment">// 成立时，对左端点更新且包含mid(分界点在成立区间得右端)</span></span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 不成立时，对右端点更新，且不包含mid</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">    <span class="comment">// 最终l==r，l和r都是答案，但mid不一定是答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>&gt;= x</code>类：check函数&gt;=x时返回真，右半部分都是真，边界点属于右半部分</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右半部分满足性质，如&gt;=x的数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_right</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)&#123; <span class="comment">// 区间长度大于等于1</span></span><br><span class="line">        <span class="comment">// 分界点在右半部分，如大于等于某个数的最小值</span></span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//int mid = l + (r - l) / 2; // 避免溢出问题</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="comment">// 成立时，对右端点更新且包含mid(分界点在成立区间得左端)</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">    <span class="comment">// 最终l==r，l和r都是答案，但mid不一定是答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将二分问题都转化为这两类中的一种</p><h3 id="判断函数的确定">判断函数的确定</h3><p>二分最难的地方就在于 $ check $ 函数的写法，一般而言首先可以结合时间复杂度进行 $ check $ 函数的形式进行估计。由于二分的时间复杂度是<code>O(logn)</code> ，</p><ul class="lvl-0"><li class="lvl-2"><p>当$ n≤10^2 $，总时间复杂度要小于$ O( n^3 logn) $ ，$ check $ 函数中一般只能三重循环</p></li><li class="lvl-2"><p>当$ n≤10^3 $，总时间复杂度要小于$ O( n^2 logn) $ ，$ check $ 函数中一般只能两重循环</p></li><li class="lvl-2"><p>当$ n≤10^5 $，总时间复杂度要小于$ O( n logn) $，$ check $ 函数中一般只能一重循环</p></li></ul><h2 id="AcWing-730-机器人跳跃问题"><a href="https://www.acwing.com/activity/content/problem/content/1572/">AcWing 730. 机器人跳跃问题</a></h2><p>来源：今日头条2019，笔试题题型：二分、递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二分 + 递推——AcWing 730. 机器人跳跃问题</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分的主体代码往往相同，不同点在于check()函数</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> e)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line">        e = e * <span class="number">2</span> - h[i];</span><br><span class="line">        <span class="keyword">if</span> (e &gt;= <span class="number">1e5</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 没有这一步会爆int</span></span><br><span class="line">        <span class="comment">// check()函数中能尽早判断出是否满足性质就要尽早</span></span><br><span class="line">        <span class="comment">// 因而要充分研究问题性质，用数学方法放缩出一些显然成立的情况，简化问题</span></span><br><span class="line">        <span class="keyword">if</span> (e &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">1e5</span>;</span><br><span class="line">    <span class="comment">// 二分的一大关键点在于恰当地确定最初地区间端点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我最初用的暴力硬解的方法，十分不好</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20</span> &amp;&amp; i &lt;= n; ++ i)&#123;</span><br><span class="line">        sum = <span class="number">2</span> * sum + h[i];</span><br><span class="line">        res = max(res, (<span class="type">int</span>)<span class="built_in">ceil</span>(sum / (<span class="number">1</span> &lt;&lt; i)));</span><br><span class="line">        <span class="comment">// printf(&quot;%f %f\n&quot;,sum, sum / (1 &lt;&lt; i) + 0.5);</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AcWing-1227-分巧克力"><a href="https://www.acwing.com/problem/content/1229/">AcWing 1227. 分巧克力</a></h2><p>来源：2017年第八届蓝桥杯省赛C++A/B组题型：二分</p><p>本题的一个首先的关键也在于充分理解和挖掘题目性质</p><p>首先要明确如果确定对于给定大小的切除巧克力，原巧克力能切除多少块。不难发现满足以下公式：<br>$$<br>块数 = \lfloor\frac{H_i}{x} \rfloor*\lfloor \frac{W_i}{x}\rfloor<br>$$</p><p>同时进行数学建模，问题可表述为：<br>$$<br>max\ (巧克力大小) \\<br>s.t.\ \  数量 &gt;= k<br>$$</p><p>其次研究问题要求解的最值量是否具有二段性或单调性的性质，显然可以发现：能切出的巧克力数量随切除的巧克力大小具有单调递减的变化规律。总量不变时，巧克力越大，数量一定越少。存在一个临界值，满足数量 &gt;= k，且巧克力最大。（注意这里不一定刚好切除数量为k，故约束条件是数量 &gt;= k）。</p><p>不难发现，二分研究的性质往往就是约束量随目标量的变化关系，其具有二段性或单调性时，可用二分求解边界值（最值）。</p><p>check()的过程往往是一个循环或递推、具体求解问题的过程。</p><h4 id="C">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 1227. 分巧克力  </span></span><br><span class="line"><span class="comment">// 二分</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> h[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= n; ++ i)&#123;</span><br><span class="line">        res += (h[i] / mid) * (w[i] / mid);</span><br><span class="line">        <span class="keyword">if</span> (res &gt;= k) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;h[i], &amp;w[i]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1e5</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python">Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AcWing 1227. 分巧克力  </span></span><br><span class="line"><span class="comment"># 二分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, k = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    h, w = [<span class="number">0</span>] * n, [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        h[i], w[i] = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">mid</span>):</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            cnt += (h[i] // mid) * (w[i] // mid)</span><br><span class="line">        <span class="keyword">return</span> cnt &gt;= k</span><br><span class="line">    </span><br><span class="line">    l, r = <span class="number">0</span>, <span class="built_in">max</span>(h)</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> check(mid): l = mid</span><br><span class="line">        <span class="keyword">else</span>: r = mid - <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="AcWing-1221-四平方和"><a href="https://www.acwing.com/problem/content/1223/">AcWing 1221. 四平方和 </a></h2><p>打表法化三重循环为两个二重循环，再利用搜索求解。</p><p>搜索方法可以采用二分法或数组模拟哈希</p><p>本题的一个关键问题时排序问题。指定固定排序的问题等价于组合问题。只需按照排序方式求解即可避免排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 打表法 + 二分——AcWing 1221. 四平方和 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2500010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sum</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> s, c, d;</span><br><span class="line">    <span class="comment">// 有多个关键字的排序，按主关键字序排序</span></span><br><span class="line">    <span class="type">bool</span> operator&lt; (<span class="type">const</span> Sum &amp;t)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s != t.s) <span class="keyword">return</span> s &lt; t.s; <span class="comment">// 一定注意 if 语句里要用!=不等号而不能用小于号</span></span><br><span class="line">        <span class="keyword">if</span> (c != t.c) <span class="keyword">return</span> c &lt; t.c;</span><br><span class="line">        <span class="keyword">return</span> d &lt; t.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sum[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c * c &lt;= n; ++ c)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> d = c;  c + d * d &lt;= n; ++ d)</span><br><span class="line">            sum[m ++ ] = &#123;c * c + d *d , c , d&#125;;</span><br><span class="line">            <span class="comment">// 打表</span></span><br><span class="line"></span><br><span class="line">    sort(sum, sum + m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a * a &lt;= n; ++ a)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>; a * a + b * b &lt;= n; ++ b)&#123;</span><br><span class="line">            <span class="type">int</span> t = n - a * a - b * b;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = m - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">                <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (sum[mid].s &gt;= t) r = mid;</span><br><span class="line">                <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum[l].s == t)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, a, b , sum[l].c, sum[l].d);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AcWing-3176-扫地机器人"><a href="https://www.acwing.com/problem/content/description/3179/">AcWing 3176. 扫地机器人</a></h2><p>难度：简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 3176. 扫地机器人</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] - t &lt;= l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &lt;= l)  l = s[i] + t - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l += t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= n)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n , &amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++ i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(s, s + k);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">2</span> * (l - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-3153-矩阵翻硬币"><a href="https://www.acwing.com/problem/content/description/3156/">AcWing 3153. 矩阵翻硬币</a></h2><p>蓝桥云课链接：<a href="https://www.lanqiao.cn/problems/219/learning/?page=1&amp;first_category_id=1&amp;sort=students_count&amp;second_category_id=3&amp;tags=%E4%BA%8C%E5%88%86">矩阵翻硬币 - 蓝桥云课</a></p><p>出处：2014年第五届蓝桥杯省赛JAVAB/C组难度：中等类型：数论（约数）二分</p><h3 id="问题思路">问题思路</h3><p>本题难点在分析出主要问题。</p><p>最后，所有的硬币都是向上的，但是 “聪明” 的小 M 说了，如果再按照 Q 操作玩一次，就可以恢复原状，现在问原来有多少硬币是向下的。明确几点：<br><strong>1.</strong> 从最后开始，先不管 P 操作究竟是怎么样的，只要某个硬币，被翻得次数是奇数次的，那么肯定要变成向下的。<br><strong>2.</strong> 接下来请仔细看 P 操作，对 i × x 和 j × y，注意是 “<strong>所有的</strong>”，也就是说只要你这个 i*x 不超过最大的 n，那么所有可能的<code>i</code>都得取到。比如说现在最大的 n 是 20，x 现在是 2，那么 i 必须要取 2,3,4,5,6,7,8,9,10, 意思是<strong>所有在 n 范围内 x 的倍数都得取到</strong>。那么同理，<strong>所有在 m 范围内 y 的倍数也必须取到</strong>。<br><strong>3.</strong> 明确了第二点，那么分析，对于某个点，假设坐标为（a，b），那么这个点被翻过的次数就是 <strong>a 的约数个数 × b 的约数个数</strong>。<br><strong>4.</strong> 明确了第三点，那么想找到被翻过次数是奇数个的点，那么 a 和 b 的约数个数的乘积必须是是个奇数，如果 a 和 b 约数个数乘积必须是奇数，那么 a 和 b 他俩任何一个约数的个数都不能有 2，也就意味着，a 和 b 的约数个数都必须也是奇数乘出来才可能是奇数。<br><strong>5.</strong> 明确了第四点，现在要寻找，什么样的数，才有奇数个约数呢？答案是——<strong>完全平方数</strong>！比如 0,4,9,16,25, 等等这些数字是完全平方数，也就是某个自然数的平方。那么也就是要求 a 和 b 都得是完全平方数。那么一个自然数，究竟包括了多少个完全平方数（不含 0，因为本题要求坐标从 1 开始），需要对这个数开方取整即可。比如 10，开方之后为 3. 几，意思是他包含了 3 个完全平方数，就是 1 4 9。<br><strong>6.</strong> 最后，问题就转化成求 n 和 m 包括的完全平方数的个数再相乘，也就是根号 n 乘 根号 m 的结果，注意先取整再计算。</p><p><strong>7.</strong> 可以采用给高精度开方，或者采用二分法寻找根。python 和 java 可直接使用高精度数！C++ 需继续搜寻为高精度开方的方法</p><h4 id="python">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">n,m = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="comment"># 二分法开根</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">x</span>):</span><br><span class="line">  L = <span class="number">1</span></span><br><span class="line">  R = x</span><br><span class="line">  <span class="keyword">while</span> L &lt; R:</span><br><span class="line">    mid = L + R + <span class="number">1</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> mid ** <span class="number">2</span> &lt;= x:</span><br><span class="line">      L = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      R = mid - <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sqrt(n)*sqrt(m))</span><br></pre></td></tr></table></figure><h2 id="AcWing-2556-第八大奇迹"><a href="https://www.acwing.com/problem/content/description/2558/">AcWing 2556. 第八大奇迹</a></h2><p>出处：2019第十届蓝桥杯国赛C++B组难度：困难类型：树状数组 二分</p><h3 id="题意">题意</h3><p>给定一个长度为 N 的序列 A，序列的初始值全为 0。现有 M 次操作，操作分为以下两种：</p><ul class="lvl-0"><li class="lvl-4"><p><code>C x y</code> 表示将 Ax 的值改为 y，即 $A[x]=y$</p></li><li class="lvl-4"><p><code>Q l r</code> 询问区间 $Al,Al+1,…,Ar $的第八大的数值是多少（若不存在则输出 0）</p></li></ul><h3 id="分析">分析</h3><p>这显然是道<strong>动态区间第 k 大的问题</strong>，本题的 k=8，动态为单点修改。</p><p>处理<strong>动态区间第 k 大的问题</strong>，有两种常用方法：</p><ol><li class="lvl-4"><p>树套树（树状数组套主席树 or 树状数组套平衡树）</p></li><li class="lvl-4"><p>整体二分</p></li></ol><ul class="lvl-0"><li class="lvl-4"><p><strong>树状数组套主席树：</strong> 前置知识：<strong>前缀和</strong>，<strong>树状数组</strong>（2014 年 B 组第 10 题，小朋友排队），<strong>主席树</strong>（可持久化权值线段树，2015 年 A 组 t10 灾后重建和 2017 年 A 组 t10 油漆面积都用到了线段树）。</p></li></ul><ol><li class="lvl-4"><p>Q：如果是静态（即没有对序列的数进行修改）求整个序列的第 k 大怎么做呢？</p><p>A：直接对序列 sort（从小到大） 一遍，那么 A[k] 即为所求时间复杂度 O(nlogn)，空间复杂度 O(n)。</p></li><li class="lvl-4"><p>Q： 如果是动态（会对序列的数单点修改）求整个序列的第 k 大怎么做呢？</p><p>A：开一棵权值线段树，树上每个位置的值表示这个位置对应的那个数在序列中有多少个，并向上维护和。</p><p>查询时从树的根节点出发，先查询左子树和（记为sum），比较 k 和 sum 的大小关系：若 k≤sum 则说明第 k 小数在左子树中，递归查询左子树；否则，这个数对应的就是右子树中第 k−sum 小的数，令 k−=sum，然后递归查询右子树。</p><p>时间复杂度 O(nlogn)，空间复杂度 O(n)。</p></li><li class="lvl-4"><p>Q：如果是静态（即没有对序列的数进行修改）求<strong>某个区间</strong>的第 k 大怎么做呢？</p><p>A：建立 n 棵前缀权值线段树，那么任意一段区间均可以用两棵权值线段树作差来表示，即区间 [L,R] 的信息可以由第 R 棵权值线段树 - 第 L 棵权值线段树得到。不过每个前缀开一棵权值线段树空间复杂度 O(n2)，无法开出这么大空间，而考虑到后一个位置相比于前一个位置的更改只有 logn 个节点，所以使用<strong>主席树来优化空间</strong>。</p><p>时间复杂度 O(nlogn) 空间复杂度 O(nlogn)</p></li><li class="lvl-4"><p>Q：<strong>如果是动态（有对序列的数进行修改）求某个区间的第 k 大怎么做呢（本题）？</strong></p><p>A：还是要想办法维护前缀和。</p><p><input type="checkbox" id="checkbox3" checked="true"><label for="checkbox3">的值修改为 y (进行一次操作)。即令 $a[x]=y$ ，则受到影响的会有 $tree[x],tree[x+1],…,tree[n]$。</label></p><p>我们需要去更新 $tree[x],tree[x+1],…,tree[n] $的信息。更新一个 tree 需要的时间复杂度 O(log)，而 x∼n 最坏有 n 个 tree 需要更新，那么更新的总时间复杂度为 O(nlog)，而这只是一次操作。而本题一共有 m 次操作，如果每次操作都是最坏的情况，那么时间复杂度为$ O(NMlogN)$ ，显然会超时。那有什么办法可以快速维护前缀信息呢？不难想到树状数组。</p><p>通常树状数组是用来维护一个序列的，本题也类似，只不过原来的序列的每个元素都是一个数值，而本题的序列是由 n 棵主席树构成的序列，序列的每个元素都是一棵树。于是要修改 $tree[x],tree[x+1],…,tree[n] $只要 $log×log$ 的复杂度即可(第一个 log 是主席树的，第二个 log 是树状数组的)。</p><p>总时间复杂度为 O(mlog2n)</p></li></ol><ul class="lvl-0"><li class="lvl-4"><p><strong>整体二分：</strong></p><p>前置知识：<strong>分治</strong></p><p>按操作的时间顺序排列各个操作，对于修改操作拆为删除和加入操作：</p><ol><li class="lvl-8"><p>删除之前插入的数字</p></li><li class="lvl-8"><p>加入新的数字</p></li></ol><p>整体二分的做法是，对于每一个单独的询问，我们可以很容易设计一个 nlogn 的二分答案的算法，但是我们发现如果我们对每一个询问都这样处理的话会有很多重复的操作，于是我们考虑把所有询问一起二分。</p><p>用 $solve(l,r,x,y)$ 表示 l 到 r 的询问所在的答案的区间为 [x,y]，然后我们每次根据 mid=2(x+y) 把所有的操作分成两份，左边是插入（删除）值小于 mid 的修改和询问，右边是大于 mid 的修改和询问，然后继续分治下去。其中修改我们需要用个数据结构来快速修改（比如树状数组 or 线段树），总时间复杂度为 O(nlog2n)。</p></li></ul><h3 id="解法一（树状数组套主席树）">解法一（树状数组套主席树）</h3><p><a href="https://oi-wiki.org/ds/persistent-in-bit/">树状数组套主席树 - OI Wiki</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">`<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n , m ;</span><br><span class="line"><span class="type">int</span> a[N] ;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x) ; &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> up , cnt ;</span><br><span class="line">    <span class="type">int</span> lson[N * <span class="number">100</span>] , rson[N * <span class="number">100</span>] , sum[N * <span class="number">100</span>] ;</span><br><span class="line">    <span class="type">int</span> rt[N * <span class="number">100</span>] ;</span><br><span class="line">     </span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vx , vy ;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        up = <span class="number">1e9</span> , cnt = <span class="number">0</span> ;</span><br><span class="line">        <span class="built_in">memset</span>(lson , <span class="number">0</span> , <span class="keyword">sizeof</span> lson);</span><br><span class="line">        <span class="built_in">memset</span>(rson , <span class="number">0</span> , <span class="keyword">sizeof</span> rson);</span><br><span class="line">        <span class="built_in">memset</span>(sum  , <span class="number">0</span> , <span class="keyword">sizeof</span> sum);</span><br><span class="line">        <span class="built_in">memset</span>(rt   , <span class="number">0</span> , <span class="keyword">sizeof</span> rt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> &amp;now , <span class="type">int</span> l , <span class="type">int</span> r , <span class="type">int</span> x , <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(now == <span class="number">0</span>)  now = ++ cnt ;</span><br><span class="line">        sum[now] += y ;</span><br><span class="line">        <span class="keyword">if</span>(l == r)  <span class="keyword">return</span> ;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= mid)  <span class="built_in">update</span>(lson[now] , l , mid , x , y) ;</span><br><span class="line">        <span class="keyword">else</span>  <span class="built_in">update</span>(rson[now] , mid + <span class="number">1</span> , r , x , y) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i , <span class="type">int</span> x , <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i ; j &lt;= n ; j += <span class="built_in">lowbit</span>(j))</span><br><span class="line">        <span class="built_in">update</span>(rt[j] , <span class="number">0</span> , up , x , y) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l , <span class="type">int</span> r , <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r)  <span class="keyword">return</span> l ;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span> , mid = (l + r) &gt;&gt; <span class="number">1</span> ;</span><br><span class="line">        <span class="type">int</span> sizx = vx.<span class="built_in">size</span>() , sizy = vy.<span class="built_in">size</span>() ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : vx)  num -= sum[lson[x]] ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> y : vy)  num += sum[lson[y]] ;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= num)</span><br><span class="line">        &#123;        </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; sizx ; i ++) vx[i] = lson[vx[i]] ;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; sizy ; i ++) vy[i] = lson[vy[i]] ;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(l , mid , k) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; sizx ; i ++)  vx[i] = rson[vx[i]] ;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; sizy ; i ++)  vy[i] = rson[vy[i]] ;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(mid + <span class="number">1</span> , r , k - num) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l , <span class="type">int</span> r , <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vx.<span class="built_in">clear</span>() , vy.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = l - <span class="number">1</span> ; j &gt;= <span class="number">1</span> ; j -= <span class="built_in">lowbit</span>(j))  vx.<span class="built_in">push_back</span>(rt[j]) ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = r ; j &gt;= <span class="number">1</span> ; j -= <span class="built_in">lowbit</span>(j))  vy.<span class="built_in">push_back</span>(rt[j]) ;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">0</span> , up , k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tree ;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>) , cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    tree.<span class="built_in">init</span>() ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)  tree.<span class="built_in">add</span>(i , a[i] , <span class="number">1</span>) ;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l , r;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="type">int</span> k = r - l + <span class="number">1</span> - <span class="number">8</span> + <span class="number">1</span>; </span><br><span class="line">            <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">continue</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> res = tree.<span class="built_in">ask</span>(l , r , k);</span><br><span class="line">            cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x , y;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            tree.<span class="built_in">add</span>(x , a[x] , <span class="number">-1</span>) ;</span><br><span class="line">            a[x] = y ;</span><br><span class="line">            tree.<span class="built_in">add</span>(x , a[x] , <span class="number">1</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解法二（整体二分）">解法二（整体二分）</h3><p><a href="https://oi-wiki.org/misc/parallel-binsearch/">整体二分 - OI Wiki</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">`<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x) ; &#125;</span><br><span class="line"><span class="type">int</span> n , m , tot = <span class="number">1</span> , qid = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x , y , k , id , ch;</span><br><span class="line">&#125; q[N] , q1[N] , q2[N];</span><br><span class="line"><span class="type">int</span> a[N] , ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tree[N];</span><br><span class="line">    <span class="type">int</span> maxn;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(tree , <span class="number">0</span> , <span class="keyword">sizeof</span> tree);</span><br><span class="line">        maxn = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos , <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = pos ; i &lt;= maxn ; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            tree[i] += val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = pos ; i ; i -= <span class="built_in">lowbit</span>(i)) ans += tree[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> ql,<span class="type">int</span> qr,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &gt; qr) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = ql ; i &lt;= qr ; i ++) <span class="keyword">if</span>(q[i].ch == <span class="number">2</span>) ans[q[i].id] = l;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> L = <span class="number">0</span> , R = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = ql ; i &lt;= qr ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].ch == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i].x &lt;= mid)</span><br><span class="line">            &#123;</span><br><span class="line">                bit.<span class="built_in">add</span>(q[i].id , q[i].y);</span><br><span class="line">                q1[L ++] = q[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> q2[R ++] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> res = bit.<span class="built_in">ask</span>(q[i].y) - bit.<span class="built_in">ask</span>(q[i].x - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(res &gt;= q[i].k) q1[L ++] = q[i];</span><br><span class="line">            <span class="keyword">else</span> q[i].k -= res , q2[R ++] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; L ; i ++) <span class="keyword">if</span>(q1[i].ch == <span class="number">1</span>) bit.<span class="built_in">add</span>(q1[i].id, -q1[i].y);</span><br><span class="line">    <span class="type">int</span> now = ql;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; L ; i ++) q[now ++] = q1[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; R ; i ++) q[now ++] = q2[i];</span><br><span class="line">    <span class="built_in">solve</span>(ql , ql + L - <span class="number">1</span> , l , mid);</span><br><span class="line">    <span class="built_in">solve</span>(ql + L , ql + L + R - <span class="number">1</span> , mid + <span class="number">1</span> , r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    bit.<span class="built_in">init</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++) q[tot ++] = Query&#123;<span class="number">0</span> , <span class="number">1</span> , <span class="number">0</span> , i , <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= m ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l , r;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="type">int</span> k = r - l + <span class="number">1</span> - <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">            q[tot++]=Query &#123;l,r,k,qid++,<span class="number">2</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x , y;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            q[tot ++] = Query&#123;a[x] , <span class="number">-1</span> , <span class="number">0</span> , x , <span class="number">1</span>&#125;;</span><br><span class="line">            a[x] = y;</span><br><span class="line">            q[tot ++] = Query&#123;a[x] , <span class="number">1</span> , <span class="number">0</span> , x , <span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">1</span> , tot - <span class="number">1</span> , <span class="number">0</span> , <span class="number">1e9</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt; qid ; i ++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-519-跳石头"><a href="https://www.acwing.com/problem/content/solution/521/1/">AcWing 519. 跳石头</a></h2><p>蓝桥云课链接：<a href="https://www.lanqiao.cn/problems/364/learning/?page=1&amp;first_category_id=1&amp;sort=students_count&amp;name=%E8%B7%B3%E7%9F%B3%E5%A4%B4">跳石头 - 蓝桥云课 (lanqiao.cn)</a><br>出处：NOIP2015提高组难度：中等类型：二分+贪心， $O(NlogL)$</p><h3 id="问题分析">问题分析</h3><p>本题属于二分的标准套路题：最大值最小化，最小值最大化，属于解（最值）的二分。</p><p>二段性：如果长度 $Len$ 可以满足，那么当长度小于 $Len$ 时也可以满足，所以我们可以二分出最大的 $Len$。</p><h3 id="判定函数确定——贪心策略">判定函数确定——贪心策略</h3><p>本题$ check $ 函数还是稍微要思考一下的。主要还是要把思路从判定问题转变为判定问题来处理。</p><p>$check$函数返回真的限制条件是：</p><ul class="lvl-0"><li class="lvl-2"><p>至多移走$M$个石头</p></li><li class="lvl-2"><p>剩下石头间距离大于等于$Len$</p></li></ul><p>需注意，这里不要被至多移走m个石头所困惑，把问题想的过于复杂。实际上，由于现在是判定问题而不是求解问题，我们不需要从所有约束条件出发去推可行解，完全可以一个一个约束地处理，或从先满足一个约束来推出解，再看其是否满足其他约束。总之，判定问题的思路要灵活！</p><p>本题中剩下的问题是如何判断给定 $Len$ 的情况下，能否最多拿走 $M$ 块石头，使得所有相邻两块石头之间的距离不小于 $Len$。</p><p>这一步可以贪心来做。从前往后扫描，并记一下上一块石头的位置。</p><ul class="lvl-0"><li class="lvl-2"><p>如果当前石头和上一块石头的距离小于 $Len$，则将当前石头拿走。</p><p>这里给出证明：如果某个最优解中是拿走了上一块石头，那么我们可以改成留下上一块石头，拿走当前这块石头，这样总共拿走的石头数量不变，所以当前选法也是一组最优解。</p></li><li class="lvl-2"><p>如果当前石头和上一块石头的距离大于等于 $Len$，则将上一块石头更新成当前这块。</p></li></ul><p>扫描结束后判断拿走的石头数量是否小于等于 $M$。</p><h3 id="时间复杂度分析">时间复杂度分析</h3><p>总共二分 $O(logL)$ 次，每次贪心的计算是 $O(N)$，因此总时间复杂度是 $O(NlogL)$</p><h4 id="C-2">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 519. 跳石头</span></span><br><span class="line"><span class="comment">// 二分 + 贪心</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> L, n, m;</span><br><span class="line"><span class="type">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> last = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (d[i] - last &lt; mid) cnt ++ ;</span><br><span class="line">        <span class="keyword">else</span> last = d[i];</span><br><span class="line">    <span class="keyword">return</span> cnt &lt;= m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;L, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d[i]);</span><br><span class="line">    d[ ++ n] = L;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1e9</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-2">Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AcWing 519. 跳石头</span></span><br><span class="line"><span class="comment"># 二分 + 贪心</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    l, n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    d = [<span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="comment"># 易错点：别忘了中间最后一个岩石和终点岩石的距离也要大于等于len</span></span><br><span class="line">    <span class="comment"># 所以要把最后一个岩石也加入距离序列</span></span><br><span class="line">    d.append(l)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">mid</span>):</span><br><span class="line">        cnt = <span class="number">0</span> <span class="comment"># 移动岩石数</span></span><br><span class="line">        last= <span class="number">0</span> <span class="comment"># 当前位置到起点距离</span></span><br><span class="line">        <span class="comment"># 易错点：初始位置是在起点，距离为0而不是d[0]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 如果当前位置岩石与下个岩石距离小于mid，就取走下一个岩石</span></span><br><span class="line">            <span class="keyword">if</span> d[i] - last &lt; mid:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 否则更新当前位置，跳到下个岩石上</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                last = d[i]</span><br><span class="line">        <span class="comment"># 是否满足数量限制</span></span><br><span class="line">        <span class="keyword">return</span> cnt &lt;= m</span><br><span class="line">    </span><br><span class="line">    l, r = <span class="number">0</span>, <span class="built_in">max</span>(d)</span><br><span class="line">    <span class="comment"># &gt;= x型，左模板</span></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> check(mid):</span><br><span class="line">            l = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid - <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="AcWing-1460-我在哪？（每日一题）"><a href="https://www.acwing.com/problem/content/1462/">AcWing 1460. 我在哪？（每日一题）</a></h2><p>本题的本质时确定一个最小长度k，使任意长度为k的子串都互不相同。</p><p>直接暴搜的话是四重循环，复杂度为$ O(n^4) $，其实可以过。</p><p><img src="https://mdpic.dreamgo.fun/img/%E6%88%91%E5%9C%A8%E5%93%AA.png" alt="我在哪"></p><p>优化</p><ul class="lvl-0"><li class="lvl-2"><p>二分优化：对于最外层循环，可以使用二分进行优化。本题显然具有二段性，只要长度大于等于ans，子串就一定互不相同。</p></li><li class="lvl-2"><p>哈希：对于分别枚举任意两个子串进行比较的循环，可以通过哈希打表记录出现次数，用空间换时间。</p></li><li class="lvl-2"><p>字符串哈希</p></li></ul><h4 id="C-3">C++</h4><p><code>string.substr(start&lt;,length&gt;)</code><br>start:从string 的start位置开始提取字符串<br>length:待提取的字符串的长度，若length为一下情况时，返回整个字符串的所有字符。</p><p><code>iterator **find** (const key_type&amp; k);</code><br>在容器中搜索键值等于 k 的元素，如果找到，则返回一个指向该元素的迭代器，否则返回一个指向unordered_map :: end的迭代器。</p><p>二分 + 哈希，时间复杂度为$O(n^2 logn)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 1460. 我在哪？（每日一题）</span></span><br><span class="line"><span class="comment">// 二分 + 哈希</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">// unordered_map&lt;string, bool&gt; hash;</span></span><br><span class="line">    unordered_set&lt;string&gt; hash;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + k - <span class="number">1</span> &lt; n; ++ i)&#123;</span><br><span class="line">        string t = s.<span class="built_in">substr</span>(i, k);</span><br><span class="line">        <span class="comment">// if (hash.find(t) == hash.end()) m[t] = true;</span></span><br><span class="line">        <span class="comment">// else return false;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (hash.<span class="built_in">count</span>(t)) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">else</span> hash.<span class="built_in">insert</span>(t); <span class="comment">// 复杂度为O(n)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二分 + 字符串哈希，时间复杂度为$O(nlogn)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 1460. 我在哪？（每日一题）</span></span><br><span class="line"><span class="comment">// 二分 + 字符串哈希</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">103</span>, P = <span class="number">131</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line">ULL hs[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hs[r] - hs[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; hash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + k - <span class="number">1</span> &lt; n; ++ i)&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">get</span>(i + <span class="number">1</span>, i + k); <span class="comment">// 注意字符串哈希下表下标从1开始，所以这里要加1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (hash.<span class="built_in">count</span>(t)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> hash.<span class="built_in">insert</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    </span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)&#123;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">        hs[i] = hs[i - <span class="number">1</span>] * P + s[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python-3">Python</h4><p>集合/哈希</p><p>判断字符串是否在集合中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AcWing 1460. 我在哪？（每日一题）</span></span><br><span class="line"><span class="comment"># 暴力 + 集合/哈希</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    k, hs = <span class="number">1</span>, <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>): <span class="comment"># 枚举长度</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - l + <span class="number">1</span>):</span><br><span class="line">            tmp = s[i:i+l] <span class="comment"># 注意切片:后要是末端下标+1</span></span><br><span class="line">            <span class="keyword">if</span> tmp <span class="keyword">in</span> hs: <span class="comment"># 判断字符串是否在集合中</span></span><br><span class="line">                k = l + <span class="number">1</span></span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hs.add(tmp)</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">print</span>(k)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>二分 + 集合/哈希</p><p>这里使用了一种非常巧妙的方法：不用注意判断子串是否在集合中，直接将所有子串放到集合中，如果没有相同的，则集合中元素数量等于<code>n-k+1</code>，<code>k</code>为子串长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AcWing 1460. 我在哪？（每日一题）</span></span><br><span class="line"><span class="comment"># 二分 + 集合/哈希</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    l, r, hs = <span class="number">1</span>, n, <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = l + r &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 集合中元素数量等于n-mid+1，说明所有元素互不相同，没有重复子串</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>([s[i:i+mid] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - mid + <span class="number">1</span>)])) == n - mid + <span class="number">1</span>:</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>二分 + 字符串哈希</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AcWing 1460. 我在哪？（每日一题）</span></span><br><span class="line"><span class="comment"># 二分 + 字符串哈希</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    P, MOD = <span class="number">131</span>, <span class="number">2</span> &lt;&lt; <span class="number">64</span> - <span class="number">1</span></span><br><span class="line">    hs, bs = [<span class="number">0</span>] * (n + <span class="number">1</span>), [<span class="number">1</span>] * (n + <span class="number">1</span>) <span class="comment"># 注意下标从1开始，需要多开一位</span></span><br><span class="line">    l, r, <span class="built_in">hash</span> = <span class="number">1</span>, n, <span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>): <span class="comment"># 注意下标从1开始，需要多开一位</span></span><br><span class="line">        bs[i] = (bs[i - <span class="number">1</span>] * P) % MOD</span><br><span class="line">        hs[i] = (hs[i - <span class="number">1</span>] * P + <span class="built_in">ord</span>(s[i - <span class="number">1</span>])) % MOD</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">mid</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - mid + <span class="number">1</span>):</span><br><span class="line">            l, r = i + <span class="number">1</span>, i + mid</span><br><span class="line">            <span class="comment"># 求字符串哈希值</span></span><br><span class="line">            v = (hs[r] - hs[l - <span class="number">1</span>] * bs[r - l + <span class="number">1</span>]) % MOD</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">in</span> <span class="built_in">hash</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">hash</span>.add(v)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">        mid = l + r &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> check(mid):</span><br><span class="line">            r = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="123-蓝桥云课"><a href="https://www.lanqiao.cn/problems/1591/learning/?page=1&amp;first_category_id=1&amp;sort=students_count&amp;second_category_id=3&amp;tags=%E4%BA%8C%E5%88%86">123 - 蓝桥云课</a></h2><p>出处：蓝桥杯2021国赛难度：中等类型：二分</p><p>善于观察形式特点和性质</p><p>双重求和，第一层求和为等差数列公式求和，第二层求和为前缀和求和</p><p>确定第i个数所在的区间使用了二分法由<br>$$<br>\sum n^2 = 1^2 + 2^2 + 3^2+ \ldots + n^2 = \frac{ n *(n+1) * (2n+1) }{6}<br>$$<br>得，</p><p>$$<br>\begin{align}<br>\sum n * (n+1) &amp; = \sum ( n^2 + n ) \\<br>&amp; = \frac{ n * (n+1) * (2n+1) }{6} + \frac{ n* (n+1) }{2} \\<br>&amp; = \frac{ n * (n+1) * (2n+4) }{6} \\<br>&amp; = \frac{ n * (n+1) * (n+2) }{3} \\<br>\end{align}<br>$$</p><p>数列中的每一个连续的部分可以看作一个小区间。</p><p>每一个小区间都是一个 $ a_1 = 1$， $d=1 $ 的等差数列，且区间的长度也能构成等差数列。</p><p>由于$ l, r \leq 1012 $ ，即<br>$$<br>2(1+n) \times n \geq 10^{12}<br>$$<br>所以最多有 <code>1414214</code> 个小区间构成该数列，满足任意 <code>l</code>，<code>r</code> 都能落在里面。</p><p>这意味着虽然我们不能直接查询某一位置的前缀和，但可以通过这些小区间来定位和计算某一位置的前缀和。</p><ul class="lvl-0"><li class="lvl-4"><p>第 <code>i </code>个区间的元素个数为<code> i</code>。</p></li><li class="lvl-4"><p>定义<code> a[i]</code> 表示前<code> i</code> 个小区间的元素个数（<code>1 ~ n</code> 的和）。则有：$ a[i] = a[i−1] + i $</p></li><li class="lvl-4"><p>定义<code> s[i]</code> 表示前 <code>i</code> 个小区间的和。则有：$ s[i] = s[i−1] + a[i]$</p></li><li class="lvl-4"><p>对于数列中任意位置<code> i</code> ，一定存在一个最大的<code>j</code>满足 $ a[j] \leq i $，这表示第<code>i</code>个数落在第 <code>j+1</code> 区间内。</p></li><li class="lvl-4"><p>对于数列中任意位置<code> i</code>，当它落在第 <code>j+1 </code>个区间，它是该区间第<code>k</code>个数，则它在数列中的前缀和为：$ s[j] + a[k] $，其中 $ k = i − a[j] $。</p></li></ul><p>时间复杂度：$O(C+T×logC)$，C=1414215 是常数。<br>空间复杂度：$O ( C ) $</p><h3 id="C-4">C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前缀和 + 二分 + 等差求和公式</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ll sum[N];</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">get</span><span class="params">(<span class="type">int</span> n)</span></span>&#123; <span class="comment">// 等差数列前n的和</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * n * (n+<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 公式法求解复杂度最小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span>&#123; <span class="comment">// 求解区间[1, x]的元素和</span></span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>,r = N<span class="number">-10</span>; <span class="comment">// 二分法搜索</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">get</span>(mid) &lt;= x) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res += sum[l];</span><br><span class="line">    <span class="type">int</span> n = x-<span class="built_in">get</span>(l);</span><br><span class="line">    res += <span class="built_in">get</span>(n);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        sum[i]=<span class="built_in">get</span>(i);</span><br><span class="line">        sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">        <span class="comment">// 求解区间[1, x]的元素和</span></span><br><span class="line">        <span class="comment">// 前缀和的思想</span></span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ll l,r;<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">        ll res=<span class="built_in">solve</span>(r)-<span class="built_in">solve</span>(l<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 前缀和</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-4">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 123 - 蓝桥云课</span></span><br><span class="line"><span class="comment"># 二分 + 求和公式</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">getp</span>(<span class="params">x</span>): <span class="keyword">return</span> x*(x+<span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">gets</span>(<span class="params">x</span>): <span class="keyword">return</span> x*(x+<span class="number">1</span>)*(x+<span class="number">2</span>) // <span class="number">6</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">x</span>):</span><br><span class="line">    l, r = <span class="number">1</span>, <span class="built_in">int</span>(<span class="number">2e6</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> l &lt; r:</span><br><span class="line">      mid = r + l &gt;&gt; <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> getp(mid) &gt;= x: r = mid</span><br><span class="line">      <span class="keyword">else</span>: l = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l, x - getp(l-<span class="number">1</span>)</span><br><span class="line">  </span><br><span class="line">  T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    L, R = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    pl, nl = search(L-<span class="number">1</span>)</span><br><span class="line">    pr, nr = search(R)</span><br><span class="line">    <span class="built_in">print</span>(gets(pr - <span class="number">1</span>) + getp(nr) - gets(pl - <span class="number">1</span>) - getp(nl))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><h2 id="区间移位-蓝桥云课"><a href="https://www.lanqiao.cn/problems/111/learning/?page=1&amp;first_category_id=1&amp;sort=students_count&amp;second_category_id=3&amp;tags=%E4%BA%8C%E5%88%86">区间移位 - 蓝桥云课</a></h2><p>出处：蓝桥杯2017国赛难度：困难类型：二分 枚举</p><h3 id="问题分析-2">问题分析</h3><p>本题是典型的二分套路题：最大值最小化</p><p><img src="https://mdpic.dreamgo.fun/img/%E5%8C%BA%E9%97%B4%E7%A7%BB%E4%BD%8D.png" alt="区间移位"></p><p><img src="https://mdpic.dreamgo.fun/img/%E5%8C%BA%E9%97%B4%E7%A7%BB%E4%BD%8D1.png" alt="uid1787145-20220327-1648372878604"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">20000</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt; reg;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.b &lt; y.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;node&gt; <span class="title">tmp</span><span class="params">(reg)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="type">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">node now = tmp[i];</span><br><span class="line"><span class="type">int</span> ta = now.a;</span><br><span class="line"><span class="type">int</span> tb = now.b;</span><br><span class="line"><span class="keyword">if</span> (ta - x &lt;= k &amp;&amp; tb + x &gt;= k)&#123;</span><br><span class="line">found = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> len = tb-ta;</span><br><span class="line"><span class="comment">// if(ta+x&gt;=k) k += len;</span></span><br><span class="line"><span class="comment">// else k = tb+x;</span></span><br><span class="line">        k += <span class="built_in">min</span>(len, tb + x - k);</span><br><span class="line">tmp.<span class="built_in">erase</span>(tmp.<span class="built_in">begin</span>()+i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!found || k&gt;=maxn) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> k &gt;= maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">a *= <span class="number">2</span>;</span><br><span class="line">b *= <span class="number">2</span>;</span><br><span class="line">reg.<span class="built_in">push_back</span>(&#123;a, b&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(reg.<span class="built_in">begin</span>(),reg.<span class="built_in">end</span>(),cmp);</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = maxn;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line"><span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid)) </span><br><span class="line">         r = mid;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">double</span> ans = r / <span class="number">2.0</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-5">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">  n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">  </span><br><span class="line">  q = <span class="built_in">sorted</span>([[<span class="built_in">int</span>(x) * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)], </span><br><span class="line">  key = <span class="keyword">lambda</span> x: (x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">mid</span>):</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    cq = q.copy()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      flag = <span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> x <span class="keyword">in</span> cq:</span><br><span class="line">        l, r = x[<span class="number">0</span>], x[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> l - mid &lt;= s &lt;= r + mid:</span><br><span class="line">          s += <span class="built_in">min</span>(r -  l, r + mid - s)</span><br><span class="line">          <span class="comment"># if  q[i][0] + mid &gt;= s:</span></span><br><span class="line">          <span class="comment">#   s += q[i][1] -  q[i][0] </span></span><br><span class="line">          <span class="comment"># else:</span></span><br><span class="line">          <span class="comment">#   s = q[i][1] + mid</span></span><br><span class="line">          flag = <span class="literal">True</span></span><br><span class="line">          cq.remove(x)</span><br><span class="line">          <span class="keyword">break</span> </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> flag <span class="keyword">or</span> s &gt;= <span class="number">2e4</span>: <span class="keyword">return</span> s &gt;= <span class="number">2e4</span></span><br><span class="line"></span><br><span class="line">  l, r = <span class="number">0</span>, <span class="built_in">int</span>(<span class="number">2e4</span>)</span><br><span class="line">  <span class="keyword">while</span> l &lt; r:</span><br><span class="line">    mid = l + r &gt;&gt; <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> check(mid): </span><br><span class="line">      r = mid</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">      l = mid + <span class="number">1</span></span><br><span class="line">  <span class="built_in">print</span>(l / <span class="number">2</span> <span class="keyword">if</span> l % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">else</span> l // <span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">  n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">  </span><br><span class="line">  q = <span class="built_in">sorted</span>([<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)], </span><br><span class="line">  key = <span class="keyword">lambda</span> x: (x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">mid</span>):</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    cq = q.copy()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      flag = <span class="literal">False</span></span><br><span class="line">      <span class="keyword">for</span> x <span class="keyword">in</span> cq:</span><br><span class="line">        l, r = x[<span class="number">0</span>], x[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> l - mid &lt;= s &lt;= r + mid:</span><br><span class="line">          s += <span class="built_in">min</span>(r - l, r + mid - s)</span><br><span class="line">          <span class="comment"># if  q[i][0] + mid &gt;= s:</span></span><br><span class="line">          <span class="comment">#   s += q[i][1] -  q[i][0] </span></span><br><span class="line">          <span class="comment"># else:</span></span><br><span class="line">          <span class="comment">#   s = q[i][1] + mid</span></span><br><span class="line">          flag = <span class="literal">True</span></span><br><span class="line">          cq.remove(x)</span><br><span class="line">          <span class="keyword">break</span> </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> flag <span class="keyword">or</span> s &gt;= <span class="number">1e4</span>: <span class="keyword">return</span> s &gt;= <span class="number">1e4</span></span><br><span class="line"></span><br><span class="line">  l, r = <span class="number">0</span>, <span class="number">1e4</span></span><br><span class="line">  eps = <span class="number">1e-3</span></span><br><span class="line">  <span class="keyword">while</span> r - l &gt; eps:</span><br><span class="line">    mid = (l + r)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> check(mid): </span><br><span class="line">      r = mid</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">      l = mid</span><br><span class="line">  x = (l + r) / <span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="built_in">round</span>(x)-x)&lt;<span class="number">0.05</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">round</span>(x))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(<span class="built_in">round</span>(x*<span class="number">10</span>))/<span class="number">10</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯备赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯备赛 </tag>
            
            <tag> 算法笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认清现实，迎接挑战</title>
      <link href="/2023/03/04/%E8%AE%A4%E6%B8%85%E7%8E%B0%E5%AE%9E%EF%BC%8C%E8%BF%8E%E6%8E%A5%E6%8C%91%E6%88%98/"/>
      <url>/2023/03/04/%E8%AE%A4%E6%B8%85%E7%8E%B0%E5%AE%9E%EF%BC%8C%E8%BF%8E%E6%8E%A5%E6%8C%91%E6%88%98/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c9cb16a5ce503f62c8ad044176fc0b5af427d34f64530360108023876696df2">2bf269d8e65cef7bb83dba10b47abf7e3403f4aae4de198880c753669e403d683c9faa0475cd04255d66fc59545be006292a0f03b5b505d31bca9b5a6fa2bbd8019d4f8769b70c70cef2f49fe167fa24e399bac320ca2c7b22862f62b225a54374f7855558fcf2d8f65c5ed38f3a9fd84ce81c4276beab4cc66d9c7c3a030dc885e1b68b91b9925e5d08b6197ce0a52c3fb2548a222b8e4773cd17944f0a434ff7690375fd3b68a88cb215c612a8a082920823cedcabefd9e855239433852cb789ca63858f3ff36040accf3671c50173997711043da1c77b7a81d4bcc83026bfa89df65d42e8b7a6f42418931b0cc59467cda73ef965b5502cca932d7e366cdd229c356aba733f4807ead7ccc2dd13d375b1433237d49221437bf905c47717e6c0ceb4d884cbe5abfb6e0a420ff25b34383f1b48732de1dc98cc722901759ff098cab7bb54112971c426734daae0ab7911b8ce97b602ad65f9107f71f729a56be1e3b100d306ace0fd841678fc0ec7ce42739a6fe6a5990efece2ff67bc61a2f84c7349cee9106fd35b1b4d3fcae44520f7268f9eaa9880abb7d2256aee1e54d21d1be82b9f507f3281c344eae15b4235d1bafef8e5aa32c78752c12b9b0724a3b051bcbd5beb32c054bfb0a0257283b5aa55f8f7a475ce7f0c04fe9d26b5e0ae82be5dffc928ce4e809cc428cd576260a28990faa70c5663c528fe12c264e82b8f38c71ac5be137d04f5c8486548f21822be908c2cc0b012ed8a7fc33f4be9496cb0417eb90f9d6955a71e970664b67e0f1fc0b042af84cdd969792dbce80ee96f9ddfc34a42d805a86cfdf827fb74bbd61ae19cb4be27f39dec1704703b891c431a2a7a3cd74c9ec0f79d0ba020bbdf5158a83fb9749047a655a4752daeeebf33722fe3ea76eb15b427c5d76e03b36f85190c7d7f4986828291a61901c3537319345eb67d5312f89bdcad9eee0adb26cfeba70330ede70e3781102c0aa0b2cf87ecf75318893e072fb969e5ed64c4e591579b1f7ecdc6350c51ada66809ed95029f22ca724c99c885e1bdea647913263a41b6bd826975208e9e222d997fa82cb3833d244ab31a8563956d7d0d2391aee7969de1c70985628aa1882ea7279028ea2e5c83cd080b3299dc3dd17123d0464f7b5e46bb0ec0f8797b9d458ef41cc214179d1b18dee47f3fccaffdf5ecaf16e952d5611d2380db4fc5f0e2a28af489fe414d86306a6499ec566a25c608e9df303210568de3472d87d032d5cd912cffd75dbe7ddaaf7934d70d7435a1aacaefcada64bb3d8a7f1ba9f8e7f01efa7c1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">🐶嘿嘿, 你没有权限进入呢！🐕.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视觉信息的捕获——感受野</title>
      <link href="/2023/02/28/%E8%A7%86%E8%A7%89%E7%9A%84%E7%94%9F%E7%89%A9%E6%9C%BA%E5%88%B6-20230228-%E8%A7%86%E8%A7%89%E4%BF%A1%E6%81%AF%E7%9A%84%E6%8D%95%E8%8E%B7%E2%80%94%E2%80%94%E6%84%9F%E5%8F%97%E9%87%8E/"/>
      <url>/2023/02/28/%E8%A7%86%E8%A7%89%E7%9A%84%E7%94%9F%E7%89%A9%E6%9C%BA%E5%88%B6-20230228-%E8%A7%86%E8%A7%89%E4%BF%A1%E6%81%AF%E7%9A%84%E6%8D%95%E8%8E%B7%E2%80%94%E2%80%94%E6%84%9F%E5%8F%97%E9%87%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="视觉信息的捕获——感受野">视觉信息的捕获——感受野</h1><blockquote><p>本文主要整理自危辉教授《类脑计算》，期望通过学习视觉的生物机制，能够为后面计算机视觉的科研提供借鉴与启发</p></blockquote><p>生物视觉系统可以看成一个黑箱处理器，它的输入时图像，输出是心理物理学的响应 。如同计算机视觉系统那样，<strong>人类视觉系统首先要对信号采样、量化和编码，然后作进一步的处理</strong>。<strong>信号数字化从本质上看是把信息从连续的模拟域映射到被采样和量化的数字阵列</strong>。人类视觉系统的”数字化器“就是<strong>视网膜阵列</strong>。它起的作用就是<strong>对输入的图像在时间域和空间域进行采样</strong>。</p><p>（这里真得强调《信号和系统》这门课好重要，作为计算机的学生，后面真的要好好补一下！😭)</p><p>物体在眼球中成像以后，在细胞层次上对信号做处理的是神经节细胞。它所完成的处理与视网膜上的感光细胞在空间上是如何以所谓”感受野“形式组织起来有关。信息的处理首先依托于信息的捕获机制。</p><p>感受野是指当视网膜上某一特定区域受到光刺激时，引起视觉通路较高层次上单一神经纤维或单一神经细胞的电反应，这个区域便是该神经纤维或细胞的感受野。在视觉通路不同层次上的单个细胞都有一定的感受野。</p><h2 id="同心圆拮抗式的经典感受野">同心圆拮抗式的经典感受野</h2><p>空间整合特性：处理图像区域亮度对比信息、提取图像的边缘信息。相当于高频滤波器</p><h2 id="非经典感受野">非经典感受野</h2><p>非经典感受野是在经典感受野之外的一个大范围区域，单独刺激该区域并不能直接引起细胞的反应，但对经典感受野内刺激所引起的反应有调制作用。相当于低频滤波器。</p><p>视网膜神经节细胞的非经典感受野主要是去抑制性的，因此可以在一定程度上弥补由经典感受野所造成的低空间频率信息的损失，在保持边界增强功能的同时，传递图像的区域亮度梯度信息，显示大面积表面上亮度的缓慢变化。</p>]]></content>
      
      
      <categories>
          
          <category> 视觉的生物机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感受野机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络与生物机制的对比思考</title>
      <link href="/2023/02/28/%E8%A7%86%E8%A7%89%E7%9A%84%E7%94%9F%E7%89%A9%E6%9C%BA%E5%88%B6-20230228-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%94%9F%E7%89%A9%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AF%B9%E6%AF%94%E6%80%9D%E8%80%83/"/>
      <url>/2023/02/28/%E8%A7%86%E8%A7%89%E7%9A%84%E7%94%9F%E7%89%A9%E6%9C%BA%E5%88%B6-20230228-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%94%9F%E7%89%A9%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AF%B9%E6%AF%94%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8bf11e708df44c388b5561e823ed75b6f1c9ef7910e58d2c727df15f93b88dee">2bf269d8e65cef7bb83dba10b47abf7e04413051378c20d22dd45f1bde48a8fe017607db4a4bab4e430257916d2e7a7438e1bbcc09c28dc802a4bdcd5a95d1dd2b0694c50e93b11c1d3f689a0850f5e5a025dab73d818cc6316d8a0d940fe25b5aca8337642043aa18f8b8a1e053d09e3c41fa872c381408210b781c2a1b5efd5c3b41c2cee3f22043ca8b2d1becbc540fcd30ed118b0860c4423bec3701175010f829b993358af6020c0931c1c838586e91357e7ed87c0505c18c0b67506328e6b45e72c190fb7d96cc8e1f3a046060dafd9e265a6f878c8f6fbebdafa9e37c2d31a0246b1373d3e98f58a19c297e72cff691c06f857189c4547367c78217dfce6b579bc27e36cd92461ed7fef8e2a054ad81c004fef6872c1abf4be350b3e8b0e508bcc8669a803fc2d8743c0b588e51988978aa7fdaa623a644a3991908845855429ae07da657175175010dd4fd421bf17385d74bc4228960f1cbbfc2650dbf5571a0ce8e49b154b43d1cd6911cccf3dda7c41ae5ece0642e3053a9b15a6e5fff82316c5a82a14e00a5b6e5d4e3a62b772e998bee831371f936ffeb69b10cf7ec7870f1b180006187b9d7ddd4df50850685401d80d32854d50223eb0e62adbe6a6baea033cc240dcc6591d1f01e31522b6ce313bd07b3292d6350ef8770e239a6967029d882eefe5250bfb287cc11ad4ebc4bce507b6b4f568374801f5e9bbab971365d13e37753c6ef63317f2319a5d8c3b9476595b4205b2b409924d09bb79a47ec6e41b988e32e91dbb63809d51cf8ac25d9930e78a832f8063251b72e7add82c7f6dd26b32f2392354a3826b0ffd91c53bdaabedfff4b46adcb09461d7c0ec6ccfe799ee001e61803cb852670b538bc235926de4e632eabeb347688af63eb95c5d55b10748f0b91aabfdc2017d68f0ceca67f004184bba4dbbbe567c243159d53ea6579cbf30fc00f867d536b476bedb1f5340d37aba3ad964f99742173aac16f509bd964cf38089aaf3fb9dace5fb1abab03d550eafcdc26ce9090bf365d73364ff304b764cd3cf0d44312a1a9db5702765825fd99c44d97f3746485677a99bbc32f363bd49300dcfecefd15490e725ff7dee9ab16166c85fe6a057d6a364d9ffb89e68e0907c320b44c7988b8d6340877e23493dc279e666314b1ae0e66094dfe43e84b328652d3939fbd5569f912b43a7f3b2bed129fb9dfd6e804e112688268546f5c69686c99c5d57b57d0a41f37049ee3840f9b0a93e00cd8b5d390703051525c092e0f14484d7edb1084726461edfbc8408bfa938a3a1724b5ad2a58265c1a99f64bb4a28340f2cb3c07ea4d526ec019097f275afac103e96184fb590c53c4f02bf7ace82e4b58713faf63568b1180bed8cd4f684a3d3b2ebf821f79a06426603c82385bf528378b20d31c8bc86bbd043b3c9e732573883e969101bbea994573def31f5c21d90cd07ab53d794c7addf4ad2eeca1d4c697a65782706d056ed01c7337162c1f4926ca298556114591c64041dd676386586f3a4002edf394b254d99e23926d14f80708010c081c5bd2746bb35d2ead09fb0ae076d86ad29ca8b4939eaae0e121890553367c3eacbc2c9db434bffad53c22538f19196b3b092ecaae4f0623b8ad3bc1bdca79821129c23677d6ac6012f775b981aeb69e90d77da605afd5bc5979ebb8d3e5aa9b63f28279211075306f3d0f185f57eb73a9b8b18fac3aaf5023add0fc4376471197182e1a0c9c34e9059f60c9f367bbab20adb44b7689b92c9b8ec8a539495e1ceace328049083b1adeb9ac03eda9242a7e9dc3c00dba6ffd88726f8a74378a8f03c8848533213fad05666c9eba5e94f8bfc4edf64416b5f83ef13455b6234984fe6c6f8d4ebf1f7514f72e145785b06cd507a327551b36ad6a69fa1d9952b58acf32155fcd363a013c7ee47ed0007ebc14084f273352ee365f61ebae9b3fd61b4b7102e4253130cf8691dce04a8e219eed58467970a45a87913241ea0ed20ffb5c0528b07f0f29dde2ebefde33ace450ec4a89172c232e41488c53170c049bdaa525463864b251658b524b241922b3159dc53d8389a6a9f5cc6395ec0a8a1c7781f98efb4f73469314e0307692150ca550553a4c1653e6c4c6ceb28aedd741ae707e257f86ade8bc83ea112b6b812ae5bea20fba6f28877a99f46614effecba927069d5751562f10dd8b45231024e8cd95bd25e733e9487a507fc567110680dcbd9ba914b291341a8f3c64d723bc8c8ac8e694f1b3c2e5630acc58ce55df3bff2bdf4e2b218f5ede96b89d7cb79be7dca0c0e402b3d508a2d54065bb7dec504f6c8f83e564b4b95b46a220ad0c81d39f7ce747d1d6693632816d40942e4239da266c67726f85bfa570c6fc19dfd45668ea972dc1cae70e8b6023b44bf4f9fdf98a66f4446262d6702a334a9fea014c09325af75c87b915850bed92a375c4bda7377ec085969cbe66e353b1942e972745455bfd242609cc9fe7abe8d98712948a0fe234a97168412185cbf8689655af25e9b73e832b7559a7721f752647826e32e9875c75ce0697726961fed108c9472ac43a2056ee3f35cc9e2f23e8cda7f37f6c48a21c41a1ba904b15d8a991c1df5238e65548833d5833b29a31fc2d6e087291eaf04f5d5f34a2938019fd4cdb25e1adb8477e42f988932df61a69b9799aa63d7792618cff5f084ab2a14515afb469bb5f7bdc88e84fa1394144dc11eebbe76bcb9497468d9b2e0c53ba0583c30b946da4c667430361dbf29ce6149dfd1f5b95b00c1cf2966cc39b6f56aaa6668f6a4566b6d2c337c3c4b243b8ac7c2f42620c9e4a3b64a3c68a7cf808f00a1fd9849c89e2750f39ffb9719a4a6c6bb8b2588d83c1d70b5eb04a886e984205a4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">🐶嘿嘿, 你没有权限进入呢！🐕.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 视觉的生物机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 加密 </tag>
            
            <tag> 视觉认知思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2.3 DFS之迭代加深、双向DFS、IDA*</title>
      <link href="/2023/02/28/2-2-3-DFS%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1%E3%80%81%E5%8F%8C%E5%90%91DFS%E3%80%81IDA/"/>
      <url>/2023/02/28/2-2-3-DFS%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%8A%A0%E6%B7%B1%E3%80%81%E5%8F%8C%E5%90%91DFS%E3%80%81IDA/</url>
      
        <content type="html"><![CDATA[<h1 id="2-2-3-DFS之迭代加深、双向DFS、IDA">2.2.3 DFS之迭代加深、双向DFS、IDA*</h1><h2 id="一-DFS之迭代加深-IDDFS">一. DFS之迭代加深(IDDFS)</h2><p>针对某些分支非常深，但答案却在比较浅的分支的层中，为防止进入深分支的”无底洞“而浪费过多时间，需要设置每次搜索的深度，使用迭代加深的DFS搜索。尤其是某些题目会限制搜索步长，如”10以内搜索不到结果就算无解”。</p><p>迭代加深设置一个层数上限max_depth，搜索时如果当前层数大于max_depth后则直接返回。相当于每次把层数大于max_depth的层先全部剪掉，也可以把max_depth看成划定了搜索区域，每次一片区域一片区域的搜，可以有效地减小搜索空间。</p><p><img src="https://mdpic.dreamgo.fun/img/2675_69ed07da7c-1.png" alt="2675_69ed07da7c-1"></p><p>迭代加深和宽搜的区别：</p><ul class="lvl-0"><li class="lvl-3"><p>宽搜搜索空间的复杂度每次是指数级别的，每次把该层的节点全部记录到队列中。</p></li><li class="lvl-2"><p>迭代加深本质仍是深度优先搜索，每次只会记录当前分支（路径）的信息，空间复杂度是O(n)的，与高度成正比</p></li></ul><p><img src="https://mdpic.dreamgo.fun/img/image-20230226233001792.png" alt="image-20230226233001792"></p><p>迭代加深水从存在重复搜索的问题，每次更新max_depth进行搜索时都是从头开始搜索，会对浅层进行重复搜索。如当深度限制为d是，会重复搜索1~d-1层的节点，但是当搜索树节点分支数目较多时，随着层数的深入，每层节点数会呈指数级增长，因此重复的搜索和深层子树的规模相比可以忽略不计。如以满二叉树为例，前n-1层总节点数为$2^1 + 2^2 + \ldots + 2^{n-1} = 2^{n} - 1$，而第n层的节点数为$2^n$，当分支数更多时这种差距更大，所以对于浅层的重复搜索可以忽略不计。</p><p>迭代加深后的DFS具有类似BFS性质，当从0开始一层层加深时depth能够记录最小步长。</p><h3 id="1-AcWing-170-加成序列">1. <a href="https://www.acwing.com/problem/content/172/">AcWing 170. 加成序列 </a></h3><h3 id="搜索顺序：">搜索顺序：</h3><p>​枚举前面的所有数<code>i</code>，<code>j</code>（<code>i</code>可以等于<code>j</code>），填写当前位置的数</p><h3 id="剪枝">剪枝</h3><ol><li class="lvl-3"><p>优化搜索顺序：从大到小枚举<code>i</code>和<code>j</code></p></li><li class="lvl-3"><p>排除等效冗余：不同<code>i</code>和<code>j</code>，<code>X[i]+X[j]</code>可能相等，枚举的组合出现实质冗余，需要判重</p></li><li class="lvl-3"><p>可行性剪枝：由于序列一定是严格单调递增的，所以当前节点值 $V_u$ 大于目标值<code>n</code>，或小于等于前一节点值 $V_{u-1}$ 时，直接剪枝</p><p>注意由于每个位置的填写都是枚举前面任意两节点值的和，所以是可能出现枚举得到的值$V_{u}$小于等于 $V_{u-1}$ 的，必须要判断并剪枝，不要忽略！</p></li></ol><p>可以注意到分支最短时是第<code>k</code>位取<code>k-1</code>位的两倍，即 $2^u$ ，分支指数增长。而分支最短的是每次加1，第k层大小为<code>u</code>。由此可以发现不同分支为了达到某一数量级的，深度差距很大。同时由于可以是任意两个数的组合，所以分支非常多，且分支数随深度成平方级增长 $(C_u^2)$ 。由此，可以使用迭代加深。</p><p><img src="https://mdpic.dreamgo.fun/img/2675_b66a50cb7c-4.png" alt="2675_b66a50cb7c-4"></p><h4 id="进一步优化剪枝">进一步优化剪枝</h4><p>在优化搜索顺序时，除了先枚举较大的数，其实可以发现只需枚举前一层第<code>u-1</code>层与前<code>u-1</code>层所有数字能否组合出合法序列，而不用任意枚举两个数的组合！</p><p>且这样枚举一定能保证$V_{u}$大于$V_{u-1}$的，满足单调递增要求。</p><h4 id="C">C++</h4><p>恢复现场版，慢</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 170. 加成序列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == depth) <span class="keyword">return</span> path[u - <span class="number">1</span>] == n;</span><br><span class="line">    <span class="comment">// if (u &gt; depth) return false;</span></span><br><span class="line">    <span class="comment">// if (path[u - 1] == n) return true;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = u - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i)    </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">0</span>; -- j)&#123;</span><br><span class="line">            <span class="type">int</span> v = path[i] + path[j];</span><br><span class="line">            <span class="comment">// 可行性剪枝：由于序列一定是严格单调递增的，所以当前节点值V_u大于目标值n，或小于等于前一节点值V_&#123;u-1&#125;时，直接剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; n || v &lt;= path[u - <span class="number">1</span>] || st[v]) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 剪枝之排除等效冗余：不同i和j，X[i]+X[j]可能相等，枚举的组合出现实质冗余，需要判重</span></span><br><span class="line">            st[v] = <span class="literal">true</span>;</span><br><span class="line">            path[u] = v;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, depth)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 恢复现场</span></span><br><span class="line">            st[v] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n)&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        path[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 起始节点一定是1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置迭代加深的最大深度depth</span></span><br><span class="line">        <span class="type">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 每次搜索失败则加大搜索深度</span></span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">dfs</span>(<span class="number">1</span>, depth)) depth ++; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; depth; ++ i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, path[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不恢复现场版，速度比恢复现场版快一半多</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 170. 加成序列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == depth) <span class="keyword">return</span> path[u - <span class="number">1</span>] == n;</span><br><span class="line">    <span class="comment">// if (u &gt; depth) return false;</span></span><br><span class="line">    <span class="comment">// if (path[u - 1] == n) return true;</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> st[N] = &#123;<span class="number">0</span>&#125;; <span class="comment">// st数组每轮递归都会被重开，避免恢复现场，速度更快</span></span><br><span class="line">    <span class="comment">// 剪枝之优化搜索顺序：从大到小枚举i和j</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = u - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i)    </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">0</span>; -- j)&#123;</span><br><span class="line">            <span class="type">int</span> v = path[i] + path[j];</span><br><span class="line">            <span class="comment">// 可行性剪枝：由于序列一定是严格单调递增的，所以当前节点值V_u大于目标值n，或小于等于前一节点值V_&#123;u-1&#125;时，直接剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; n || v &lt;= path[u - <span class="number">1</span>] || st[v]) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 剪枝之排除等效冗余：不同i和j，X[i]+X[j]可能相等，枚举的组合出现实质冗余，需要判重</span></span><br><span class="line">            st[v] = <span class="literal">true</span>;</span><br><span class="line">            path[u] = v;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, depth)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 这里不需要恢复现场，因为path[u]会被直接覆盖，而st数组每轮递归都会被重开</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n)&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        path[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 起始节点一定是1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置迭代加深的最大深度depth</span></span><br><span class="line">        <span class="type">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 每次搜索失败则加大搜索深度</span></span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">dfs</span>(<span class="number">1</span>, depth)) depth ++; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; depth; ++ i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, path[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步优化剪枝，速度再次降一半</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 170. 加成序列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == depth) <span class="keyword">return</span> path[u - <span class="number">1</span>] == n;</span><br><span class="line">    <span class="comment">// if (u &gt; depth) return false;</span></span><br><span class="line">    <span class="comment">// if (path[u - 1] == n) return true;</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> st[N] = &#123;<span class="number">0</span>&#125;; <span class="comment">// st数组每轮递归都会被重开，避免恢复现场，速度更快</span></span><br><span class="line">    <span class="comment">// 剪枝之优化搜索顺序：从大到小枚举i和j</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = u - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i)&#123;    </span><br><span class="line">        <span class="type">int</span> v = path[i] + path[u - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 可行性剪枝：由于序列一定是严格单调递增的，所以当前节点值V_k大于目标值n，或小于等于前一节点值V_&#123;k-1&#125;时，直接剪枝</span></span><br><span class="line">        <span class="keyword">if</span> (v &gt; n || v &lt;= path[u - <span class="number">1</span>] || st[v]) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 剪枝之排除等效冗余：不同i和j，X[i]+X[j]可能相等，枚举的组合出现实质冗余，需要判重</span></span><br><span class="line">        st[v] = <span class="literal">true</span>;</span><br><span class="line">        path[u] = v;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, depth)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 这里不需要恢复现场，因为path[u]会被直接覆盖，而st数组每轮递归都会被重开</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n)&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        path[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 起始节点一定是1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置迭代加深的最大深度depth</span></span><br><span class="line">        <span class="type">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 每次搜索失败则加大搜索深度</span></span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">dfs</span>(<span class="number">1</span>, depth)) depth ++; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; depth; ++ i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, path[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Python">Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AcWing 170. 加成序列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># u 为当前层数 / path 下标，depth为最大搜索层数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, depth</span>):</span><br><span class="line">        <span class="comment"># 限制搜索层数</span></span><br><span class="line">        <span class="keyword">if</span> u == depth:</span><br><span class="line">            <span class="keyword">return</span> path[u - <span class="number">1</span>] == n</span><br><span class="line">        vis = [<span class="literal">False</span>] * MAX_D</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 优化搜索顺序，先枚举较大的数</span></span><br><span class="line">        <span class="comment"># 且只需枚举第u-1个数字与前u-1个数字能否组合出合法序列</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">reversed</span>(path[:u]):</span><br><span class="line">            v = x + path[u - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> v &gt; n <span class="keyword">or</span> vis[v]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 剪枝之排除等效冗余</span></span><br><span class="line">            vis[v] = <span class="literal">True</span></span><br><span class="line">            path[u] = v</span><br><span class="line">            <span class="keyword">if</span> dfs(u + <span class="number">1</span>, depth):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    MAX_D = <span class="number">110</span></span><br><span class="line">    path = [<span class="number">1</span>] * MAX_D </span><br><span class="line">    <span class="comment"># 这里对起始节点path[0]进行了初始化，其一定为1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 迭代加深像是 「限制层数的广搜」 版本的深搜</span></span><br><span class="line">    <span class="comment"># 优势在于空间复杂度低，代码量低</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        depth = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> dfs(<span class="number">1</span>, depth):</span><br><span class="line">            depth += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, path[:depth])))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="二-双向DFS">二. 双向DFS</h2><p>双向DFS原理与双向BFS相同，通过双向搜索来减少搜索空间。使用双向搜索要求题目具有明确的初态和终态，从而从两端开始搜索。</p><p><img src="https://mdpic.dreamgo.fun/img/image-20230227142845608.png" alt="image-20230227142845608"></p><p><img src="https://mdpic.dreamgo.fun/img/2675_357470bf81-1.png" alt="2675_357470bf81-1"></p><h3 id="1-AcWing-171-送礼物">1. <a href="https://www.acwing.com/problem/content/173/">AcWing 171. 送礼物</a></h3><h4 id="问题分析">问题分析</h4><p>本题数据范围为：$1 \le N \le 46$，$1 \le W, G[i] \le 2^{31}-1$ ，其中N表示礼物个数，<code>G[i]</code>表示第<code>i</code>个礼物重量，<code>W</code>表示容量上限</p><p>这题可以看作背包问题，但DP方法的时间复杂度是O(N*V)，$2^{31}$ 在 $2 \times 10^9$ 级别， $ N * 2^{31} $会超时，因此不能用求解。</p><p>但我们发现N相对较小，可以尝试使用暴搜。而直接暴搜的话需要枚举每个物品选或不选，时间复杂度是$2^{46}$，更会超时。由此我们想到使用双向DFS，尝试把时间复杂度降到$C * 2^{23} $ 级别，$ 2^{23} = 8,388,608$ 。</p><p>为此我们可以将物品划分成两部分，先将前K件物品能够凑出的所有重量枚举出来并打表。同时为了优化，存储时可以进行排序并判重。然后先将剩余N-K件物品能够凑出的所有重量枚举，并通过直接查表与前一部分的重量进行组合，得到合法方案。同时在两部分组合时可以使用贪心策略，利用二分直接找到与当前后部分重量能够组合的前部分最优重量（满足条件下的最大重量），减少枚举。</p><p><img src="https://mdpic.dreamgo.fun/img/image-20230227152016595.png" alt="image-20230227152016595"></p><p>需要使用以下方法</p><ul class="lvl-0"><li class="lvl-2"><p>双向DFS暴搜</p></li><li class="lvl-2"><p>空间换时间的思想，先对前部分的所有情况打表，后面可直接使用而不用再搜索</p></li><li class="lvl-2"><p>二分法快速找到集合中满足条件（小于等于某数）的最大的数</p><p>注意二分不能用哈希代替，设当前后部分枚举重量为S，我们要做的是在前部分找到小于等于W-S的最大数，而不是确定W-S是否存在</p></li></ul><h4 id="基本思路">基本思路</h4><ol><li class="lvl-3"><p>将所有物品按重量从大到小排序</p></li><li class="lvl-3"><p>先将前K件物品能够凑出的所有重量打表，然后排序判重</p></li><li class="lvl-3"><p>搜索剩下的N-K件物品的选择方式，然后在表中二分出不超过W的最大值</p></li></ol><h4 id="进一步剪枝优化">进一步剪枝优化</h4><ol><li class="lvl-3"><p>优化搜索顺序</p><p>把礼物按照重量降序排序后再分半，搜索。（先搜较大的数，使分支更少）</p></li><li class="lvl-3"><p>选取适当的“折半划分点”</p><p>当直接对半划分时复杂度为$2^{ \frac{N}{2} } + 2^{ \frac{N}{2} } * \frac{N}{2} $，前后两部分不均衡</p><p>由于复杂度分为两部分——前半部分的枚举 $2^k$ ，后半部分的枚举与匹配 $ 2^{N-k} * k $，为了实现两部分的均衡，进一步减少复杂度，需要选取适当的“折半划分点”。<br>$$<br>\frac{2^k}{ (2^{N-k} * k) } =  \frac{ 2^{2k - N} }{k}<br>$$<br>当k取25时，两者之比最接近1</p><p>然而实际情况下这种均衡并不好实现，一般还是对半分。例如，本题中$\frac{N}{2} + 2$ 就不一定更均衡。</p><p>首先需要处理特殊情况n = 1 造成的内存溢出问题。</p><p>其次，由于加大k是为了平衡后半部分DFS时二分的系数， 但是这个系数只会在叶子结点出现，由于剪枝的存在，这些点的二分并不一定能使整个DFS时间明显变得更大，这种情况下k加大2反而影响了前半和后半的平衡。</p></li><li class="lvl-3"><p>可行性剪枝，不超过上限</p></li></ol><p><img src="https://mdpic.dreamgo.fun/img/2675_3b100ab781-3.png" alt="2675_3b100ab781-3"></p><h5 id="C-2">C++</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 171. 送礼物</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意爆int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL; </span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">25</span>; </span><br><span class="line"><span class="comment">// 前半部分物品个数k最大是25， 因此最多可能有2^25种方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// n表示物品总个数，m表示重量上限，k表示前半部分物品个数</span></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> g[<span class="number">50</span>]; <span class="comment">// 存储所有物品的重量</span></span><br><span class="line"><span class="type">int</span> w[N]; <span class="comment">// w存储能凑出来的所有组合重量</span></span><br><span class="line"><span class="type">int</span> cnt; <span class="comment">// cnt记录前部分所有组合重量的个数（需去重）</span></span><br><span class="line"><span class="type">int</span> ans; <span class="comment">// 用ans来记录一个全局最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// u表示当前枚举到哪个数了，s表示当前重量的和</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_s</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 打表</span></span><br><span class="line">    <span class="comment">// 如果我们当前已经枚举完第k个数（下标从0开始的）了， </span></span><br><span class="line">    <span class="comment">// 就把当前的s加到w数组中去，进行打表</span></span><br><span class="line">    <span class="keyword">if</span> (u == k)&#123;</span><br><span class="line">        w[cnt ++] = s; <span class="comment">// 记录重量</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 枚举当前不选这个物品</span></span><br><span class="line">    <span class="built_in">dfs_s</span>(u + <span class="number">1</span>, s);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 枚举选这个物品, 做一个可行性剪枝</span></span><br><span class="line">    <span class="comment">//计算和的时候转成long long防止溢出</span></span><br><span class="line">    <span class="keyword">if</span> ((LL)s + g[u] &lt;= m) &#123; </span><br><span class="line">        <span class="built_in">dfs_s</span>(u + <span class="number">1</span>, s + g[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// u表示当前枚举到哪个数了，s表示当前重量的和</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_e</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 二分匹配</span></span><br><span class="line">    <span class="comment">// 如果已经找完了n个节点，就得到了后半部分当前的重量组合</span></span><br><span class="line">    <span class="comment">// 那么需要通过二分进行前后部分的匹配</span></span><br><span class="line">    <span class="keyword">if</span> (u == n)&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = cnt - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// if (w[mid] + (LL)s &lt;= m) </span></span><br><span class="line">            <span class="keyword">if</span> (w[mid] &lt;= m - s)</span><br><span class="line">                l = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里需主要由于l从0开始，而w[0] = 0，所以可以解决s恰等于n的情况（只从后半部分选），因而不同单独判断</span></span><br><span class="line">     <span class="comment">// 且由于前面递归时始终保证了s &lt;= m（否则不会选择物品进行下一层的递归)，所以二分时是一定能找到可行的数的（最极端就是取w[0]=0)，因而循环结束后w[l] + (LL)s &lt;= m一定成立</span></span><br><span class="line">        ans = <span class="built_in">max</span>(ans, w[l] + s);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不选择当前这个物品</span></span><br><span class="line">    <span class="built_in">dfs_e</span>(u + <span class="number">1</span>, s);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 选择当前这个物品</span></span><br><span class="line">    <span class="comment">// 虽然m，s，g[u]在int范围内，但s + g[u]可能会爆int，要转成LL</span></span><br><span class="line">    <span class="keyword">if</span> ((LL)s + g[u] &lt;= m)</span><br><span class="line">        <span class="built_in">dfs_e</span>(u + <span class="number">1</span>, s + g[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 剪枝之优化搜索顺序，重量从大到小排序后再分组、枚举</span></span><br><span class="line">    <span class="built_in">sort</span>(g, g + n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="comment">// reverse(g, g + n);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 枚举前k个物品的重量组合并打一个表</span></span><br><span class="line">    k = n &gt;&gt; <span class="number">1</span>; <span class="comment">// 或者k = n / 2; 需注意防止 n = 1时，出现死循环</span></span><br><span class="line">    <span class="comment">// min((n &gt;&gt; 1) + 2, n - 1)这种策略实际发现并不可行</span></span><br><span class="line">    <span class="built_in">dfs_s</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 做完之后，把w数组从小到大排序，从而方便二分</span></span><br><span class="line">    <span class="built_in">sort</span>(w, w + cnt);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判重，只取不重复的</span></span><br><span class="line">    <span class="comment">// int t = 1;</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt; cnt; ++ i)</span></span><br><span class="line">    <span class="comment">//     if (w[i] != w[i - 1])</span></span><br><span class="line">    <span class="comment">//         w[t ++] = w[i];</span></span><br><span class="line">    <span class="comment">// cnt = t;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去重后尾地址减首地址得到个数</span></span><br><span class="line">    <span class="comment">// unique函数可以删除有序数组中的重复元素。</span></span><br><span class="line">    <span class="comment">// 注意：</span></span><br><span class="line">    <span class="comment">// a. 这里的删除不是真的delete，而是将重复的元素放到容器末尾</span></span><br><span class="line">    <span class="comment">// b. unique函数的返回值是去重之后的尾地址（去重后最后一个不重复元素后的元素的地址）</span></span><br><span class="line">    <span class="comment">// c. 一定要先对数组进行排序才可以使用unique函数</span></span><br><span class="line">    cnt = <span class="built_in">unique</span>(w, w + cnt) - w;</span><br><span class="line">    <span class="comment">// 这里有一点需要格外注意，由于w的空间是大于需要值的，所以数组中实际上含有0</span></span><br><span class="line">    <span class="comment">// 而因此在从小到大排序并去重后，w[0] = 0并不表示物品的重量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从k开始后半部分的枚举， 当前的和是0</span></span><br><span class="line">    <span class="built_in">dfs_e</span>(k, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Python-2">Python</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># 剪枝之优化搜索顺序，重量从大到小排序后再分组、枚举</span></span><br><span class="line">    g = <span class="built_in">sorted</span>([<span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 将数组分割成两部分，让两部分计算的时间复杂度尽可能接近</span></span><br><span class="line">    <span class="comment"># k 做特殊处理，当 n = 1 时，k 不能大于 n</span></span><br><span class="line">    res, k = <span class="number">0</span>, n &gt;&gt; <span class="number">1</span></span><br><span class="line">    w = <span class="built_in">set</span>()</span><br><span class="line">    <span class="comment"># 先使用集合避免重复问题，再排序转成list</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将两个 DFS 进行合并，使用 lim 值的不同来标记当前是第几次搜索</span></span><br><span class="line">    <span class="comment"># u表示当前枚举到哪个数了，s表示当前重量的和</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">u, s</span>):</span><br><span class="line">        <span class="keyword">if</span> u &gt;= lim:</span><br><span class="line">             <span class="comment"># lim == k 表示是第一个 DFS</span></span><br><span class="line">            <span class="keyword">if</span> lim == k:</span><br><span class="line">                 <span class="comment"># 打表，使用 set 记录第一个 DFS 搜索到的组合答案</span></span><br><span class="line">                w.add(s)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 二分法进行前后匹配，找到一个小于等于m - s的最大值</span></span><br><span class="line">                <span class="keyword">nonlocal</span> res</span><br><span class="line">                <span class="comment"># bisect.bisect和bisect.bisect_right返回大于x的第一个下标(相当于C++中的upper_bound)</span></span><br><span class="line">                <span class="comment"># bisect.bisect_left返回大于等于x的最左侧第一个下标</span></span><br><span class="line">                <span class="comment"># 当x存在多个时，bisect_left返回最左边的x的索引bisect_right返回最右边的x的索引加1</span></span><br><span class="line">                <span class="comment"># 如果元素不存在，则将其插入到何处</span></span><br><span class="line">                <span class="comment"># eg:l = [1, 4, 5]，bisect_left(l, 4)返回1，bisect_left(l, 2)返回1</span></span><br><span class="line">                <span class="comment"># bisect_left(l, 6)返回3</span></span><br><span class="line">                pos = bisect(w, m - s) - <span class="number">1</span> <span class="comment"># 这里要使用bisect而不是bisect_left</span></span><br><span class="line">                <span class="comment"># 因为bisect返回大于x的最左的第一个下标，所以其减一即得到小于等于x的最右侧的数</span></span><br><span class="line">                res = <span class="built_in">max</span>(res, s + w[pos])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 不选择当前这个物品</span></span><br><span class="line">        dfs(u + <span class="number">1</span>, s)</span><br><span class="line">        <span class="comment"># 选择当前这个物品</span></span><br><span class="line">        <span class="keyword">if</span> s + g[u] &lt;= m:</span><br><span class="line">            dfs(u + <span class="number">1</span>, s + g[u])</span><br><span class="line">        </span><br><span class="line">    lim = k</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    w.add(<span class="number">0</span>) <span class="comment"># 这里额外插入0，否则二分后需进行特判找不到元素的情况（即s==n</span></span><br><span class="line">    <span class="comment"># 做完之后，把w数组从小到大排序，从而方便二分</span></span><br><span class="line">    <span class="comment"># 注意虽然set是无序的，但sorted会先进行排序并返回一个列表，此时w变成一个列表</span></span><br><span class="line">    w = <span class="built_in">sorted</span>(w)</span><br><span class="line">    </span><br><span class="line">    lim = n</span><br><span class="line">    <span class="comment"># 从k开始后半部分的枚举， 当前的和是0</span></span><br><span class="line">    dfs(k, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="三-IDA">三. IDA*</h2><p>IDA*将估价函数与DFS相结合，一般配合迭代加深一起食用，在每个节点我们都会预估一下当前节点最少需要多少步才能得到答案，如果最小步数多于迭代加深设置的最大层数max_depth，则直接剪枝，提前退出。</p><p>其实质是通过启发估计给迭代加深增加一个额外的剪枝：若当前深度+未来估计步数&gt;深度限制，则立即从当前分支回溯</p><p>IDA*的核心也在于设计一个估价函数，估算从每个状态到目标状态需要的步数。估价函数需要<strong>遵守“估计值不大于未来实际步数”的准则</strong>。设计时一般可以采用贪心策略，考虑最理想的情况。</p><h3 id="1-AcWing-180-排书">1. <a href="https://www.acwing.com/problem/content/description/182/">AcWing 180. 排书</a></h3><h4 id="思路分析">思路分析</h4><p>先考虑每一步的决策数量：当抽取长度为 <code>i</code> 的一段时，有 <code>n - i + 1</code> 种抽。对于每种抽法，还剩下<code>n-i</code>本书，一共有<code>n - i + 1</code>个位置可以插入这些书，除去原来的位置，有 <code>n - i</code> 种放法。另外，将某一段向前移动，等价于将跳过的那段向后移动，因此每种移动方式被算了两遍，所以每个状态总共的分支数量是：<br>$$<br>\sum _{i=1}^n(n-i) * (n - i + 1) / 2 = (15 * 14 + 14 * 13 + … + 2 * 1) / 2 = 560<br>$$<br>这里利用了：<br>$$<br>n\times(n-1)+(n-1)\times(n-2)+…+2\times1=\frac{(n-1)\times n\times(n+1)}{3}<br>$$</p><p>考虑在四步以内解决，最多有 $560^4$ 个状态，直接暴搜会超时。可以使用双向 BFS 或者 IDA * 来优化。</p><p>我们用 IDA * 来解决此题。</p><p>IDA* 与 A*算法的选择：</p><ul class="lvl-0"><li class="lvl-2"><p>需要最小字典序时，状态表示很大，指数增长加快，使用IDA*</p></li><li class="lvl-2"><p>若状态容易表示，指数增长较慢时，使用A* （注意需要最小字典序时不能使用A* ，因为它不是按照顺序搜索的）。</p></li></ul><h4 id="估价函数设计详解">估价函数设计详解</h4><ul class="lvl-0"><li class="lvl-2"><p>估价函数需要满足：<strong>不大于实际步数</strong>。且本题中，在最终状态下，每本书后面的书的编号应该比当前书多 1。</p></li><li class="lvl-2"><p>为了确定最小步数，<strong>就需要理解每步操作的实质</strong>。</p><p>首先我们需要理解何为排好序或不排好序，其实<strong>只用考察相邻两个数的后继关系</strong>是否正确。排好序后n 的后继应该是 n+1。</p><p><strong>每部操作的实质就是改变一些数的后继关系，并且每次操作最多会断开三个相连的位置，再重新加入三个相连的位置，因此我们会更改 3 个元素的后继关系</strong>，如下图：</p></li></ul><p><img src="https://mdpic.dreamgo.fun/img/image-20230227230909939.png" alt="image-20230227230909939"></p><p>也因此，最多会将 3 个错误的连接修正。每次迭代前，我们可以计算出当前有多少个后继关系是不正确的，假设一共有$tot$个后继关系不正确，则修复这些后继需要的最少步数为：<br>$$<br>\lceil \frac{tot}{3} \rceil = \lfloor \frac{tot+2}{3} \rfloor<br>$$<br>因此当前状态 $s$ 的估价函数可以设计成<br>$$<br>f(s) = \lceil \frac {tot }{3} \rceil = \lfloor \frac{tot+2}{3} \rfloor<br>$$<br>如果当前层数加上 $f(s)$ 大于迭代加深的层数上限，则直接从当前分支回溯。</p><h4 id="搜索顺序">搜索顺序</h4><ul class="lvl-0"><li class="lvl-2"><p>首先枚举移动长度<code>i</code></p></li><li class="lvl-2"><p>只考虑后移操作，对于每段书<code>i</code>枚举被移动的起始位置<code>l</code>和后移后的起始位置<code>k</code></p><p>如下图：</p></li></ul><p><img src="https://mdpic.dreamgo.fun/img/image-20230227225944040.png" alt="image-20230227225944040"></p><h3 id="优化">优化</h3><p>上述操作实际进行了优化，进行了排除等效冗余。可以发现，由于对称性，将前面一段后移就等价于将对应后面一段前移。因此我们排除冗余，只考虑搜索后移的情况即可。</p><h4 id="时间复杂度">时间复杂度</h4><p>理论上最多搜索 $560^4$ 个状态，使用 IDA * 后实际搜索的状态数量很少。</p><h5 id="C-3">C++</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 180. 排书</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N]; <span class="comment">// 书的编号</span></span><br><span class="line"><span class="type">int</span> w[<span class="number">5</span>][N]; <span class="comment">// 用于存储操作前当前的序列，恢复现场使用</span></span><br><span class="line"><span class="comment">// 这里需要理解为什么需要开5个，因为每层递归都需要恢复现场，且浅层要在深层后恢复</span></span><br><span class="line"><span class="comment">// 而最多五层，所以开5个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 估价函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>; <span class="comment">// 统计错误后继个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (q[i + <span class="number">1</span>] != q[i] + <span class="number">1</span>)</span><br><span class="line">            tot ++;</span><br><span class="line">    <span class="keyword">return</span> (tot + <span class="number">2</span>) / <span class="number">3</span>; <span class="comment">// 最小步数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查序列是否已经有序，即检查所有后继关系是否正确</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (q[i + <span class="number">1</span>] != q[i] + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// u: 当前迭代深度; depth: 迭代加深最大深度</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> depth)</span></span>&#123;</span><br><span class="line">    <span class="comment">// IDA*剪枝</span></span><br><span class="line">    <span class="comment">// 若当前深度+未来估计步数&gt;深度限制，则立即从当前分支回溯</span></span><br><span class="line">    <span class="keyword">if</span> (u + <span class="built_in">f</span>() &gt; depth) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (u == depth &amp;&amp; <span class="built_in">check</span>()) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 这里不要判断</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先枚举长度len</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>; len &lt;= n; ++ len)</span><br><span class="line">        <span class="comment">// 然后枚举移动前左端点l</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l + len - <span class="number">1</span> &lt; n; ++ l)&#123;</span><br><span class="line">            <span class="type">int</span> r = l + len - <span class="number">1</span>; <span class="comment">// 减1别忘了</span></span><br><span class="line">            <span class="comment">// 再枚举后移后插入的右端点k，</span></span><br><span class="line">            <span class="comment">// 剪枝之排除等效冗余，只考虑后移操作</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = r + <span class="number">1</span>; k &lt; n; ++ k)&#123;</span><br><span class="line">                <span class="built_in">memcpy</span>(w[u], q, <span class="keyword">sizeof</span> q); <span class="comment">// 拷贝当前序列，用于恢复现场</span></span><br><span class="line">                <span class="comment">// 后移操作需要两步，首先将移动段落右端点后到后移插入的起始端点中间的部分前移</span></span><br><span class="line">                <span class="comment">// 然后再将移动段落插入</span></span><br><span class="line">                <span class="type">int</span> x, y; <span class="comment">// x使用记录移入数的位置，y始终记录要修改位置</span></span><br><span class="line">                <span class="comment">// 将当前移动段落后面的序列前移，即将上图中绿色部分移动到红色部分</span></span><br><span class="line">                <span class="comment">// 注意k是插入的右端点</span></span><br><span class="line">                <span class="keyword">for</span> (x = r + <span class="number">1</span>, y = l; x &lt;= k; x ++, y ++) q[y] = w[u][x];</span><br><span class="line">                <span class="comment">// 移动段落插入</span></span><br><span class="line">                <span class="keyword">for</span> (x = l; x &lt;= r; x ++, y ++) q[y] = w[u][x];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, depth)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 恢复现场</span></span><br><span class="line">                <span class="built_in">memcpy</span>(q, w[u], <span class="keyword">sizeof</span> q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 另一种枚举防止，直接枚举左端点，右端点，插入点（插入的右端点），更简单</span></span><br><span class="line">    <span class="comment">// for (int l = 0; l &lt; n; l ++ )</span></span><br><span class="line">    <span class="comment">//     for (int r = l; r &lt; n; r ++ )</span></span><br><span class="line">    <span class="comment">//         for (int k = r + 1; k &lt; n; k ++ )&#123;</span></span><br><span class="line">    <span class="comment">//             memcpy(w[u], q, sizeof q);</span></span><br><span class="line">    <span class="comment">//             int x, y;</span></span><br><span class="line">    <span class="comment">//             for (x = r + 1, y = l; x &lt;= k; x ++, y ++ ) q[y] = w[u][x];</span></span><br><span class="line">    <span class="comment">//             for (x = l; x &lt;= r; x ++, y ++ ) q[y] = w[u][x];</span></span><br><span class="line">    <span class="comment">//             if (dfs(u + 1, depth)) return true;</span></span><br><span class="line">    <span class="comment">//             memcpy(q, w[u], sizeof q);</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>; <span class="comment">// 注意depth要从0开始，以处理原本就有序的特殊情况</span></span><br><span class="line">        <span class="keyword">while</span> (depth &lt; <span class="number">5</span> &amp;&amp; !<span class="built_in">dfs</span>(<span class="number">0</span>, depth)) depth ++;</span><br><span class="line">        <span class="keyword">if</span> (depth &gt;= <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;5 or more&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 由于我们使用了迭代加深，所以depth恰好等于最少需要操作次数</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, depth);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Python-3">Python</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AcWing 180. 排书</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 估价函数：不连续的数对数量除三，向上取整</span></span><br><span class="line">    f = <span class="keyword">lambda</span>: (<span class="built_in">sum</span>(<span class="built_in">int</span>(q[i + <span class="number">1</span>] != q[i] + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>)) + <span class="number">2</span>) // <span class="number">3</span></span><br><span class="line">    <span class="comment"># 检查是否排好</span></span><br><span class="line">    check = <span class="keyword">lambda</span>: <span class="built_in">all</span>(q[i + <span class="number">1</span>] == q[i] + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>))</span><br><span class="line">    <span class="comment"># check = lambda: all(arr[i] == i + 1 for i in range(n))</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">IDAstar</span>(<span class="params">level</span>):</span><br><span class="line">        <span class="comment"># IDA*剪枝</span></span><br><span class="line">        <span class="comment"># 若当前深度+未来估计步数&gt;深度限制，则立即从当前分支回溯</span></span><br><span class="line">        <span class="keyword">if</span> level + f() &gt; depth:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> level == depth <span class="keyword">and</span> check():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 枚举左端点，右端点，插入点（插入的右端点）</span></span><br><span class="line">        <span class="keyword">for</span> L <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> R <span class="keyword">in</span> <span class="built_in">range</span>(L, n):</span><br><span class="line">                <span class="keyword">for</span> K <span class="keyword">in</span> <span class="built_in">range</span>(R + <span class="number">1</span>, n):</span><br><span class="line">                    <span class="comment"># 后移操作</span></span><br><span class="line">                    <span class="comment"># 这里使用 Python 的切片来进行数组中 [L, R] 和 [R + 1, K] 两段的交换</span></span><br><span class="line">                    length, fst, sec = K - R, q[L:R+<span class="number">1</span>], q[R+<span class="number">1</span>:K+<span class="number">1</span>]</span><br><span class="line">                    <span class="comment"># 注意这里切片范围</span></span><br><span class="line">                    q[L:L+length], q[L+length:K+<span class="number">1</span>] = sec, fst</span><br><span class="line">                    <span class="keyword">if</span> IDAstar(level + <span class="number">1</span>):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="comment"># 恢复现场</span></span><br><span class="line">                    q[L:R+<span class="number">1</span>], q[R+<span class="number">1</span>:K+<span class="number">1</span>] = fst, sec</span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">        n, depth = <span class="built_in">int</span>(<span class="built_in">input</span>()), <span class="number">0</span></span><br><span class="line">        q = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">        <span class="comment"># 迭代加深 + IDA* 优化</span></span><br><span class="line">        <span class="keyword">while</span> depth &lt; <span class="number">5</span> <span class="keyword">and</span> <span class="keyword">not</span> IDAstar(<span class="number">0</span>): depth += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5 or more&quot;</span> <span class="keyword">if</span> depth &gt;= <span class="number">5</span> <span class="keyword">else</span> depth)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">     main()</span><br></pre></td></tr></table></figure><h3 id="2-AcWing-181-回转游戏">2. <a href="https://www.acwing.com/problem/content/183/">AcWing 181. 回转游戏 </a></h3><h4 id="问题分析-2">问题分析</h4><p>本题采用 IDA* 算法，即迭代加深的 A* 算法。</p><p>在这题中，每次操作循环移动一格，不断的移动可能导致某些子树的深度很深，但是根据直觉，最优解的操作步数不会处于太深的位置，所以可以用迭代加深来做，再通过题目本身可以构造一个估价函数，即可以使用 IDA* 算法求解。</p><p>显然本题属于外部搜索（最小步数模型），需要搜索状态图，因此本题真的核心难点时状态存储和操作表示。</p><p>如何保证答案的字典序最小？</p><ul class="lvl-0"><li class="lvl-2"><p>由于最短操作步数是一定的，因此每一步枚举时先枚举字典序小的操作即可。</p></li></ul><h4 id="状态存储与操作表示——打表法">状态存储与操作表示——打表法</h4><p>可以使用编码的技巧实现存储与表示。</p><ul class="lvl-0"><li class="lvl-2"><p>位置编码：由于图为 # 形，为了将其存入数组中，我们可以对每个位置设定一个编号，进行手动打表。寻找元素值时只需查表即可。</p></li><li class="lvl-2"><p>操作编码：八种操作虽然操作对象不同，但是本质上都是进行循环移动——将头元素放到末尾，同时其他元素前移。同样，我们也可以给每个操作设定一个编号，并把其对应的位置操作用位置编号表示处理，并进行存储打表。使用操作时也只用查表即可。</p></li></ul><p>具体编号见下图：</p><p><img src="https://mdpic.dreamgo.fun/img/20230228122722.png" alt="61813_fe1427dc8a-image-20210321172207678"></p><h4 id="估价函数">估价函数</h4><p>为了得到估价函数，我们同样需要理解操作的实质影响，并利用贪心思想等得到理想情况下的最优解。</p><p>可以发现，我们的目标是中心区域，而<strong>每次拉动操作，只会改变中心区域内的一个值</strong>，其他都保持不变。为了最快使最中间的 8个格子里的数字相同，可以使用以下贪心策略：先找出这个区域内个数最多的数字，记个数为k，那么理想情况下（接下来每步操作都是有效的），至少还需要8-k步操作来去除其他数字。由此当前状态 $s$ 的估价函数可以设计成<br>$$<br>f(s) = 8 - k<br>$$</p><p>总结一下：</p><ul class="lvl-0"><li class="lvl-2"><p>统计中间 8 个方格中出现次数最多的数出现了多少次，记为 $k$ 次。</p></li><li class="lvl-2"><p>每次操作会从中间 8 个方格中移出一个数，再移入一个数，所以最多会减少一个不同的数。</p></li><li class="lvl-2"><p>因此估价函数可以设为 $8 - k$。</p></li></ul><h4 id="搜索框架">搜索框架</h4><p>整个框架是IDA*，从0开始枚举层数，然后在每一层搜索时计算估价函数</p><ul class="lvl-0"><li class="lvl-2"><p>如果当前层加上估价函数大于目前最优解则return</p></li><li class="lvl-2"><p>否则遍历8个操作进行状态转换，并递归搜索</p></li></ul><h4 id="剪枝-2">剪枝</h4><ul class="lvl-0"><li class="lvl-2"><p>排除等效冗余：记录上一次的操作，本次操作避免枚举上一次的逆操作。</p><p>可以发现相对的两个操作互为逆操作，两者作用相反。如果两者接连使用，效果会抵消，导致无效操作甚至死循环。为此，需要进行打表，记录每个操作对应的逆操作。当使用某操作后，下一个操作一定不能是其逆操作。</p><p>为了记录上一层的操作，使用传入形参last</p></li></ul><h4 id="时间复杂度-2">时间复杂度</h4><p>假设答案最少需要 $k$ 步，每次需要枚举 $7$ 种不同操作（除了上一步的逆操作），因此最坏情况下需要枚举 $7^k$ 种方案。但加入启发函数后，实际枚举到的状态数很少。</p><h4 id="C-4">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AcWing 181. 回转游戏</span></span><br><span class="line"><span class="comment">/* 打表——进行位置编码和操作编码</span></span><br><span class="line"><span class="comment">           A(0)  B(1)</span></span><br><span class="line"><span class="comment">           0     1</span></span><br><span class="line"><span class="comment">           2     3</span></span><br><span class="line"><span class="comment">H(7) 4  5  6  7  8  9  10 C(2)</span></span><br><span class="line"><span class="comment">           11    12</span></span><br><span class="line"><span class="comment">G(6) 13 14 15 16 17 18 19 D(3)</span></span><br><span class="line"><span class="comment">           20    21</span></span><br><span class="line"><span class="comment">           22    23</span></span><br><span class="line"><span class="comment">           F(5)  E(4)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> q[N]; <span class="comment">// 存储当前状态图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8个方向操作对应的数据编号</span></span><br><span class="line"><span class="type">int</span> op[<span class="number">8</span>][<span class="number">7</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">22</span>&#125;, </span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">23</span>&#125;,</span><br><span class="line">    &#123;<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">19</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>&#125;,</span><br><span class="line">    &#123;<span class="number">23</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">22</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 存储每个操作的逆操作，用于排除等效冗余</span></span><br><span class="line"><span class="type">int</span> opposite[<span class="number">8</span>] = &#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">// 中心八个数据的位置编号</span></span><br><span class="line"><span class="type">int</span> center[<span class="number">8</span>] = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> path[<span class="number">100</span>]; <span class="comment">// path用于存储方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 估价函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 由于只有三种数字1，2，3，所以可以统计每个数字的次数，然后取最大值</span></span><br><span class="line">    <span class="type">int</span> s[<span class="number">4</span>] =&#123;<span class="number">0</span>&#125;; <span class="comment">// 注意初始化为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static int sum[4]; // 静态数组，不用每次重开浪费空间时间</span></span><br><span class="line">    <span class="comment">// memset(sum, 0, sizeof sum); // 需要每次memset重新赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) s[q[center[i]]] ++; <span class="comment">// 计算1 2 3出现次数</span></span><br><span class="line">    <span class="type">int</span> maxv = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; ++ i) maxv = <span class="built_in">max</span>(maxv, s[i]); <span class="comment">// 统计出现最多的次数，不用管具体是哪个数字</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> - maxv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行对应的操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 操作都有共性，最后都是将首部添加到尾部</span></span><br><span class="line">    <span class="type">int</span> t = q[op[x][<span class="number">0</span>]]; <span class="comment">// 取出头元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++ i) q[op[x][i]] = q[op[x][i + <span class="number">1</span>]]; <span class="comment">// 其他元素前移</span></span><br><span class="line">    <span class="comment">// 首部添加到尾部</span></span><br><span class="line">    q[op[x][<span class="number">6</span>]] = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// u: 当前迭代深度, depth: 迭代加深最大深度, last: 上一次操作</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> depth, <span class="type">int</span> last)</span></span>&#123;</span><br><span class="line">    <span class="comment">// IDA*剪枝</span></span><br><span class="line">    <span class="comment">// 若当前深度+未来估计步数&gt;深度限制，则立即从当前分支回溯</span></span><br><span class="line">    <span class="keyword">if</span> (u + <span class="built_in">f</span>() &gt; depth) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 估价函数为0，表明格子内数全部相同</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">f</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 枚举八个操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i)</span><br><span class="line">        <span class="comment">// 剪枝之排除等效冗余，避免逆操作相互抵消</span></span><br><span class="line">        <span class="keyword">if</span> (opposite[i] != last)&#123; <span class="comment">// 由于初始时last=-1，所以不使用oppsite[last] != i的写法</span></span><br><span class="line">            <span class="built_in">operate</span>(i);</span><br><span class="line">            path[u] = i; <span class="comment">// 深度恰好对应操作数</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(u + <span class="number">1</span>, depth, i)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 回溯恢复现场</span></span><br><span class="line">            <span class="built_in">operate</span>(opposite[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[<span class="number">0</span>]), q[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> depth = <span class="number">0</span>; <span class="comment">// 注意depth要从0开始，以处理原本就满足要求的特殊情况</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">dfs</span>(<span class="number">0</span>, depth, <span class="number">-1</span>)) depth ++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!depth) <span class="built_in">printf</span>(<span class="string">&quot;No moves needed&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 迭代加深的depth能够记录最小步长</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; depth; ++ i) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="string">&#x27;A&#x27;</span> + path[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%d\n&quot;</span>, q[<span class="number">6</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Python-4">Python</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AcWing 181. 回转游戏</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打表——进行位置编码和操作编码</span></span><br><span class="line"><span class="comment">#           A(0)  B(1)</span></span><br><span class="line"><span class="comment">#           0     1</span></span><br><span class="line"><span class="comment">#           2     3</span></span><br><span class="line"><span class="comment"># H(7) 4  5  6  7  8  9  10 C(2)</span></span><br><span class="line"><span class="comment">#           11    12</span></span><br><span class="line"><span class="comment"># G(6) 13 14 15 16 17 18 19 D(3)</span></span><br><span class="line"><span class="comment">#           20    21</span></span><br><span class="line"><span class="comment">#           22    23</span></span><br><span class="line"><span class="comment">#           F(5)  E(4)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdin</span><br><span class="line"><span class="keyword">import</span> copy </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    op = ((<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">22</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">23</span>),</span><br><span class="line">          (<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>), (<span class="number">19</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>),</span><br><span class="line">          (<span class="number">23</span>, <span class="number">21</span>, <span class="number">17</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>), (<span class="number">22</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>),</span><br><span class="line">          (<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>))</span><br><span class="line">    </span><br><span class="line">    oppo, center = (<span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>), (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>)</span><br><span class="line">    </span><br><span class="line">    log = &#123;i: ch <span class="keyword">for</span> i, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="string">&quot;ABCDEFGH&quot;</span>)&#125; <span class="comment"># 用于输出</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 估价函数：中心元素数 - 中心区域频次最高的元素数量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        cnt = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> center:</span><br><span class="line">            cnt[q[x]] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span> - <span class="built_in">max</span>(cnt)</span><br><span class="line">    <span class="comment"># 需注意这里不能压行使用lambda函数，会超时</span></span><br><span class="line">    <span class="comment"># f = lambda: 8 - Counter(arr[x] for x in mid).most_common(1)[0][1]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 额外递归函数速度会慢很多，直接在IDAstar中实现</span></span><br><span class="line">    <span class="comment"># 进行对应的操作</span></span><br><span class="line">    <span class="comment"># def helper(idx):</span></span><br><span class="line">    <span class="comment">#     temp = q[op[idx][0]]</span></span><br><span class="line">    <span class="comment">#     for i in range(6):</span></span><br><span class="line">    <span class="comment">#         q[op[idx][i]] = q[op[idx][i + 1]]</span></span><br><span class="line">    <span class="comment">#     q[op[idx][6]] = temp</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">IDAstar</span>(<span class="params">level, pre</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> q</span><br><span class="line">        assume = f()</span><br><span class="line">        <span class="comment"># 当前深度+未来估计步数&gt;深度限制，则立即从当前分支回溯</span></span><br><span class="line">        <span class="comment"># 找到答案返回 True</span></span><br><span class="line">        <span class="keyword">if</span> level + assume &gt; depth <span class="keyword">or</span> <span class="keyword">not</span> assume:</span><br><span class="line">            <span class="keyword">return</span> assume == <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 枚举8个操作</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> pre != oppo[i]:</span><br><span class="line">                tmp = copy.copy(q) <span class="comment"># 用于恢复现场，比使用逆操作速度更快</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 进行对应的操作</span></span><br><span class="line">                <span class="comment"># helper(i)</span></span><br><span class="line">                temp = q[op[i][<span class="number">0</span>]]</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">                    q[op[i][j]] = q[op[i][j + <span class="number">1</span>]]</span><br><span class="line">                q[op[i][<span class="number">6</span>]] = temp</span><br><span class="line">                </span><br><span class="line">                path[level] = i <span class="comment"># 记录当前的操作</span></span><br><span class="line">                <span class="keyword">if</span> IDAstar(level + <span class="number">1</span>, i):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    </span><br><span class="line">                <span class="comment"># helper(oppo[i])</span></span><br><span class="line">                q = copy.copy(tmp) <span class="comment"># 恢复现场</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    path = [<span class="number">0</span>] * <span class="number">100</span></span><br><span class="line">    <span class="comment"># 输入和输出优化</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> stdin:</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>: <span class="keyword">break</span></span><br><span class="line">        q, depth = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, line.split())), <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> IDAstar(<span class="number">0</span>, -<span class="number">1</span>): depth += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(log[x] <span class="keyword">for</span> x <span class="keyword">in</span> path[:depth])&#125;</span>&quot;</span> <span class="keyword">if</span> depth </span><br><span class="line">        <span class="keyword">else</span> <span class="string">&quot;No moves needed&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(q[<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2.2 DFS之剪枝</title>
      <link href="/2023/02/26/2-2-2-DFS%E4%B9%8B%E5%89%AA%E6%9E%9D/"/>
      <url>/2023/02/26/2-2-2-DFS%E4%B9%8B%E5%89%AA%E6%9E%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="2-2-2-DFS之剪枝">2.2.2 DFS之剪枝</h1><p>深搜和宽搜都可以对应一颗搜索树，一般在叶子节点存的都是方案，提前判断不合法就是剪枝。</p><h2 id="剪枝优化的常用策略">剪枝优化的常用策略</h2><ol><li class="lvl-3"><p>优化搜索顺序大部分情况下，我们应该优先搜索分支较少的结点(子节点比较少)，即选择策略较少的结点。可通过从大到小排序等手段。这样结合剪枝就能搜索更少的点如背包问题，先选大物体，再选小物体。</p></li><li class="lvl-3"><p>排除等效冗余不要搜索重复状态。如组合型问题，不考虑顺序。可以规定一个特定顺序。又如分组问题，规定新开一组时，直接将待放的第一个放入，因为组和组之间没有差别。分析时着重思考有没有两种搜索方案会是本质相同的，产生冗余。</p></li><li class="lvl-3"><p>可行性剪枝不合法(不满足题目条件)则提前退出</p></li><li class="lvl-3"><p>最优性剪枝已经差于当前最优解则退出</p></li><li class="lvl-3"><p>记忆化搜索(DP)</p></li></ol><h2 id="1-AcWing-165-小猫爬山">1. <a href="https://www.acwing.com/problem/content/167/">AcWing 165. 小猫爬山</a></h2><h3 id="搜索问题的思考顺序">搜索问题的思考顺序</h3><p>先思考搜索顺序和决策操作，再尝试剪枝</p><p>本题和<a href="https://www.acwing.com/problem/content/1120/">AcWing 1118. 分成互质组</a>很相似，但本题由于对每组的总重量有限制，因而就不能采用贪心策略了——不具有最优子结构。需要额外进行总重量的判断。</p><p>因而本题只能够以枚举每只猫作为搜索顺序。从前往后枚举每只小猫应该放入哪个车上。</p><h3 id="决策操作">决策操作</h3><ol><li class="lvl-3"><p>依次尝试放入已开的车</p></li><li class="lvl-3"><p>放入一个新开的车注意这里新开一辆车是一种必备的方案，一定会被讨论。而<a href="https://www.acwing.com/problem/content/1120/">AcWing 1118. 分成互质组</a>中由于贪心策略，只有上一组全放满了，才会新开组。</p></li></ol><p>本题和<a href="https://www.acwing.com/problem/content/1120/">AcWing 1118. 分成互质组</a>区别在于，本题使用的是动态数组的思路，为每个数字找组。分成互质组这题使用的是静态数组的思路，为每个组找数字</p><p>注意为了整体代码的一致性，刚开始以开0辆车为起点，依次尝试已开的车时即为0，然后再在dfs中开一辆新车。而不是直接以一辆车为起点。</p><p>分析时可以画搜索树辅助思考。</p><h3 id="分析剪枝策略">分析剪枝策略</h3><ol><li class="lvl-3"><p>优化搜索顺序从重量大的猫开始搜索；将所有猫按重量从大到小排序。重量大的占用更多空间，后续需要讨论的分支情况更少。</p></li><li class="lvl-3"><p>可行性剪枝如果当前车中的重量加上新猫的重量大于最大载重，就剪枝</p></li><li class="lvl-3"><p>最优性剪枝如果车的数量已经大于等于当前最优解就剪枝</p></li></ol><h4 id="C">C++</h4><p>分组问题——动态数组的思路，为每个数字找组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之剪枝——AcWing 165. 小猫爬山</span></span><br><span class="line"><span class="comment">// 分组问题——动态数组的思路，为每个数字找组</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> sum[N]; <span class="comment">// 每辆车当前载重量，最多n辆车</span></span><br><span class="line"><span class="type">int</span> ans = N; <span class="comment">// 注意初始赋值，求最小值，所以初始为最糟情况或无穷大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// u表示猫的下标，k表示将新开的车的下标，也是已开的车的数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 最优性剪枝</span></span><br><span class="line">    <span class="comment">// 如果车的数量已经大于等于当前最优解就剪枝</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 所有猫都放好了就返回</span></span><br><span class="line">    <span class="keyword">if</span> (u == n)&#123;</span><br><span class="line">        ans = k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (sum[i] + w[u] &lt;= m)&#123; <span class="comment">// 可行性剪枝</span></span><br><span class="line">        <span class="comment">// 如果当前车中的重量加上新猫的重量大于最大载重，就剪枝(不执行搜索也可以认为是剪枝)</span></span><br><span class="line">            sum[i] += w[u];</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>, k);</span><br><span class="line">            sum[i] -= w[u]; </span><br><span class="line">            <span class="comment">// 恢复现场</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新开一辆车</span></span><br><span class="line">    <span class="comment">// 注意每只猫都会将新开一辆车作为一种情况</span></span><br><span class="line">    <span class="comment">// 而不管前面的车是否放满（不能使用贪心策略）</span></span><br><span class="line">    sum[k] = w[u];</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">    sum[k] = <span class="number">0</span>; <span class="comment">// 恢复现场</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 剪枝优化——优化搜索顺序</span></span><br><span class="line">    <span class="comment">// 从重量大的猫开始搜索；将所有猫按重量排序</span></span><br><span class="line">    <span class="built_in">sort</span>(w, w + n , <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="comment">// sort(w, w + n);</span></span><br><span class="line">    <span class="comment">// reverse(w, w + n);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 注意这里车数从0开始而不是1</span></span><br><span class="line">    <span class="comment">// 注意为了整体代码的一致性，刚开始以开0辆车为起点，依次尝试已开的车时即为0，然后再在dfs中开一辆新车。而不是直接以一辆车为起点。</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之剪枝——AcWing 165. 小猫爬山</span></span><br><span class="line"><span class="comment"># 分组问题——动态数组的思路，为每个数字找组</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> setrecursionlimit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    setrecursionlimit(<span class="number">5000</span>)</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># 优化搜索顺序，先安排肥猫，后续的选择更少</span></span><br><span class="line">    w = <span class="built_in">sorted</span>([<span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># sorted() 函数对所有可迭代的对象进行排序操作</span></span><br><span class="line">    <span class="comment"># w = w.sort(reverse=True) </span></span><br><span class="line">    s = [<span class="number">0</span>] * n</span><br><span class="line">    res = n</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回溯法，为每只猫猫找到合适的组</span></span><br><span class="line">    <span class="comment"># idx为当前的猫， s 为预设的空缆车，size 为当前开了几辆缆车</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">idx, size</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> res</span><br><span class="line">        <span class="comment"># 剪枝 and 刷新答案</span></span><br><span class="line">        <span class="keyword">if</span> size &gt;= res <span class="keyword">or</span> idx == n:</span><br><span class="line">            res = <span class="built_in">min</span>(res, size)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 尝试将当前猫猫放入前 size 个缆车中</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">            <span class="comment"># 当前猫可以放到第 i 个缆车中</span></span><br><span class="line">            <span class="keyword">if</span> s[i] + w[idx] &lt;= m:</span><br><span class="line">                s[i] += w[idx]</span><br><span class="line">                backtrace(idx + <span class="number">1</span>, size)</span><br><span class="line">                s[i] -= w[idx]</span><br><span class="line">        <span class="comment"># 新开缆车，放入猫猫</span></span><br><span class="line">        s[size] += w[idx]</span><br><span class="line">        backtrace(idx + <span class="number">1</span>, size + <span class="number">1</span>)</span><br><span class="line">        s[size] -= w[idx]</span><br><span class="line">        </span><br><span class="line">    backtrace(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="2-AcWing-166-数独">2. <a href="https://www.acwing.com/problem/content/168/">AcWing 166. 数独</a></h2><p>数独问题的要求（限制）：</p><ul class="lvl-0"><li class="lvl-2"><p>每行都要有1~9</p></li><li class="lvl-2"><p>每列都要有1~9</p></li><li class="lvl-2"><p>每个九宫格都要有1~9</p></li></ul><h3 id="一-搜索顺序">一. 搜索顺序</h3><ol><li class="lvl-3"><p>每次随机选取一个空格子进行填写，直到填满。或按照输入的前后顺序开始逐一填写。</p></li><li class="lvl-3"><p>每个格子填写时要枚举选哪个数</p></li><li class="lvl-3"><p>dfs回溯搜索</p></li></ol><h3 id="决策方式">决策方式</h3><ol><li class="lvl-3"><p>尝试填写所有能填的数</p></li></ol><h3 id="剪枝优化">剪枝优化</h3><ol><li class="lvl-3"><p>优化搜索顺序选择备选方案最少的格子开始枚举，如果方案数相同则选择排在前面的格子</p></li></ol><p>提前打表求出每个二进制数对应的1的个数，即备选方案数<br>2. 排除等效冗余本题可能会存在先填A为n再填B为m和先填B为m再填A为n的等效冗余。但当我们按1中特定顺序枚举时则不存在。<br>3. 可行性剪枝不能与行、列、九宫格有重复</p><h3 id="细节部分处理——使用状态压缩-位运算优化">细节部分处理——使用状态压缩+位运算优化</h3><ol><li class="lvl-3"><p>如何表示当某一行、列、九宫格前的填写状态由于不能重复的填写相当于组合问题，所以可用01向量表示状态故可采用九位二进制数表示当前行、列、九宫格已使用了哪些数。使用0表示不能再使用(已被用过)，1表示可以使用。之所以这样是为了后面方便使用lowbit()运算</p></li><li class="lvl-3"><p>如何判断是否与行、列、九宫格有重复可以对行、列、九宫格使用与运算&amp;&amp;来确定可选择的数字。</p></li></ol><p>需注意，为了满足要求，每行、每列、每个九宫格的数字选取情况都用二进制表示了。但为了确定三个条件都满足的，就用&amp;&amp;取出同时为1的数。<br>3. 同时可以使用lowbit()运算依次取出所有1对应的要填的数。</p><h3 id="位运算">位运算</h3><ol><li class="lvl-3"><p>求n的二进制表示中第k位是几：<code>n &gt;&gt; k &amp;&amp; 1</code><br>先把第k位移到个位(<code>n &gt;&gt; k</code>)，然后取出( <code>n &gt;&gt; k &amp;&amp; 1</code>)</p></li><li class="lvl-3"><p>lowbit(x)操作，返回x最右端一位的1所代表的大小<code>x &amp; -x</code><br>负数的补码是原码取反加1<code>x &amp; -x == x &amp; (~x + 1)</code>。已知其补码相对于原码，最右端的1和其右面的0是不变的，其余全部取反，因而<code>x &amp; -x</code>后只剩下最右端的1了，其余全变成0。这是树状数组的一个基本操作。用途之一是用来求一个数x二进制表示中1的个数</p></li></ol><p>打表预处理优化-&gt;两个数组</p><ul class="lvl-0"><li class="lvl-2"><p>求出所有二进制数中有多少1，用于优化搜索顺序——分枝少的格子先填写</p></li><li class="lvl-2"><p>lowbit返回时最右端的1所代表的大小，第k位的代表$2^k$，需要快速求出k，因此建立一个对应的映射函数直接查询</p></li></ul><h4 id="C-2">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之剪枝——AcWing 166. 数独</span></span><br><span class="line"><span class="comment">// 剪枝优化+位运算+打表</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">9</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ones[M], map[M];</span><br><span class="line"><span class="comment">// ones用于求出每个二进制数有多少个1，用于优化搜索顺序——选取备选方案最少的格子先填写</span></span><br><span class="line"><span class="comment">// map用于存储2^k取对数为多少(即k)，因为lowbit求出的是2^k，而我们想要的是k</span></span><br><span class="line"><span class="type">int</span> row[N], col[N], cell[<span class="number">3</span>][<span class="number">3</span>]; <span class="comment">// 存储行、列、九宫格的状态</span></span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>]; <span class="comment">// 使用字符串存储整个表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理表示行、列、九宫格状态的数组，都初始化为0~8位全1，即为(1 &lt;&lt; N) - 1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++ )</span><br><span class="line">        row[i] = col[i] = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// (1 &lt;&lt; N) - 1括号不可少，一定不要忘了位运算的运算级较低</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j ++ )</span><br><span class="line">            cell[i][j] = (<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新整个图、每行、每列、每个九宫格的当前填写状况，包括填写和恢复两方面</span></span><br><span class="line"><span class="comment">// 在(x,y)位置填写数字t，is_set表示两种选择——填写或恢复原状（删掉已填写的数）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> t, <span class="type">bool</span> is_set)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 注意变成字母</span></span><br><span class="line">    <span class="keyword">if</span> (is_set) str[x * N + y] = <span class="string">&#x27;1&#x27;</span> + t;</span><br><span class="line">    <span class="comment">// 注意这里必须这样写，因为maps中返回的t表示的位数，而在二进制中第0位表示的是1，第i位表示的是i+1，所以要填写的数字时t + &#x27;1&#x27;</span></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">else</span> str[x * N + y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// t的二进制位数所对应的值的大小(2^t)</span></span><br><span class="line">    <span class="type">int</span> v = <span class="number">1</span> &lt;&lt; t;</span><br><span class="line">    <span class="comment">// 如果删除操作就减去v，填写操作就加上v</span></span><br><span class="line">    <span class="keyword">if</span> (!is_set) v = -v;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意填写后就不能再用了，为0，所以是减去</span></span><br><span class="line">    row[x] -= v;</span><br><span class="line">    col[y] -= v;</span><br><span class="line">    cell[x / <span class="number">3</span>][y / <span class="number">3</span>] -= v; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lowbit位运算获取最右端一位的1所代表的大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用与运算求(x, y)位置能填哪些数，获取填写情况对应的二进制数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> row[x] &amp; col[y] &amp; cell[x / <span class="number">3</span>][y / <span class="number">3</span>];</span><br><span class="line">    <span class="comment">// 使用与运算找到行、列、九宫格来取可选择的数字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cnt) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> minv = <span class="number">10</span>; <span class="comment">// 存储分支最小的空格的分支数，初值大于最遭情况</span></span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="comment">// 求分支最小的空格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (str[i * N + j] == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">// 获取填写情况对应的二进制数</span></span><br><span class="line">                <span class="type">int</span> state = <span class="built_in">get</span>(i, j); </span><br><span class="line">                <span class="keyword">if</span> (ones[state] &lt; minv)&#123;</span><br><span class="line">                    minv = ones[state];</span><br><span class="line">                    x = i, y = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> state = <span class="built_in">get</span>(x, y);</span><br><span class="line">    <span class="comment">// 枚举取出所有1，尝试所有能填的数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = state; i; i -= <span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        <span class="type">int</span> t = map[<span class="built_in">lowbit</span>(i)]; <span class="comment">// 转换为对应的填写数字（取对数），注意查找使用的是lowbit(i)</span></span><br><span class="line">        <span class="built_in">draw</span>(x, y, t, <span class="literal">true</span>); <span class="comment">// 更新填写</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(cnt - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 本题只有唯一解， 为真直接返回，否则回溯时会删除获得的结果</span></span><br><span class="line">        <span class="built_in">draw</span>(x, y, t, <span class="literal">false</span>); <span class="comment">// 恢复原状</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 打表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++ i) map[<span class="number">1</span> &lt;&lt; i] = i;</span><br><span class="line">    <span class="comment">// 1 &lt;&lt; i为2^i的值</span></span><br><span class="line">    <span class="comment">// map用于存储2^k取对数为多少(即k)，因为lowbit求出的是2^k，而我们想要的是k</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打表法，预处理出每个数的二进制中有多少个1</span></span><br><span class="line">    <span class="comment">// 由于一共9个数，所以用0~8位表示即可，故枚举到(1 &lt;&lt; 9) - 1，即M</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++ j)</span><br><span class="line">            <span class="comment">// 位运算</span></span><br><span class="line">            <span class="comment">// 求n的二进制表示中第k位是0还是1，n &gt;&gt; k &amp;&amp; 1</span></span><br><span class="line">            ones[i] += i &gt;&gt; j &amp; <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; str, str[<span class="number">0</span>] != <span class="string">&#x27;e&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 预处理表示行、列、九宫格状态的数组，初始化为全1</span></span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// cnt表示还有多少个空位</span></span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填入输入的状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; N; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; ++ j, ++ k)</span><br><span class="line">                <span class="keyword">if</span> (str[k] != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="comment">// 数字的大小</span></span><br><span class="line">                    <span class="comment">// 这里写成-&#x27;1&#x27;而不是-&#x27;0&#x27;是为了便于后面求二进制时使用</span></span><br><span class="line">                    <span class="comment">// 因为二进制时t表示位数，而填写的数字为t + &#x27;1&#x27;，所以这里统一格式</span></span><br><span class="line">                    <span class="type">int</span> t = str[k] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                    <span class="comment">// 填入对应状态</span></span><br><span class="line">                    <span class="built_in">draw</span>(i, j, t, <span class="literal">true</span>);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> ++ cnt;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(cnt);</span><br><span class="line">        <span class="comment">// 形参为还剩多少空格待填</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">puts</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-2">python</h4><p>TLE超时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之剪枝——AcWing 166. 数独</span></span><br><span class="line"><span class="comment"># 剪枝优化+位运算+打表</span></span><br><span class="line"><span class="comment"># python会超时</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    N = <span class="number">9</span></span><br><span class="line">    M = <span class="number">1</span> &lt;&lt; N</span><br><span class="line">    ones = [<span class="number">0</span>] * M</span><br><span class="line">    maps = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            ones[i] += i &gt;&gt; j &amp; <span class="number">1</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        maps[<span class="number">1</span> &lt;&lt; i] = i </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">x, y, t, is_set</span>):</span><br><span class="line">        <span class="keyword">if</span> is_set:</span><br><span class="line">            s[x * N + y] = <span class="built_in">str</span>(t)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s[x * N + y] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">        </span><br><span class="line">        v = <span class="number">1</span> &lt;&lt; (t - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_set:</span><br><span class="line">            v = -v</span><br><span class="line">        row[x] -= v</span><br><span class="line">        col[y] -= v</span><br><span class="line">        cell[x // <span class="number">3</span>][y // <span class="number">3</span>] -= v</span><br><span class="line">        <span class="comment"># row[x] ^= v</span></span><br><span class="line">        <span class="comment"># col[y] ^= v</span></span><br><span class="line">        <span class="comment"># cell[x//3][y//3] ^= v</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lowbit</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> row[x] &amp; col[y] &amp; cell[x // <span class="number">3</span>][y // <span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">cnt</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cnt:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        minv = <span class="number">10</span></span><br><span class="line">        x, y = <span class="number">0</span>, <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">                <span class="keyword">if</span> s[i * N + j] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    state = get(i, j)</span><br><span class="line">                    <span class="keyword">if</span> ones[state] &lt; minv:</span><br><span class="line">                        minv = ones[state]</span><br><span class="line">                        x, y = i, j</span><br><span class="line">        state = get(x, y)</span><br><span class="line">        <span class="keyword">while</span> state:</span><br><span class="line">            t = maps[lowbit(state)] + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 这里的加1一定不要少</span></span><br><span class="line">            <span class="comment"># 因为maps中返回的t表示的位数，而在二进制中第0位表示的是1，第i位表示的是i+1，</span></span><br><span class="line">            <span class="comment"># 所以要填写的数字时t + 1</span></span><br><span class="line">            draw(x, y, t, <span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">if</span> backtrace(cnt - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            draw(x, y, t, <span class="literal">False</span>)</span><br><span class="line">            state -= lowbit(state)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> g == <span class="string">&quot;end&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        s = <span class="built_in">list</span>(g)</span><br><span class="line">        <span class="comment"># python中字符串是一个不可变类型，不能直接改变字符串中某个字符的值，</span></span><br><span class="line">        <span class="comment"># 需要另建一个存字符的列表处理字符</span></span><br><span class="line"></span><br><span class="line">        col = [(<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>] * N;</span><br><span class="line">        row = [(<span class="number">1</span> &lt;&lt; N) - <span class="number">1</span>] * N</span><br><span class="line">        cell = [[(<span class="number">1</span> &lt;&lt; N ) - <span class="number">1</span>] * <span class="number">3</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cnt统计棋盘中空位个数</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">                <span class="keyword">if</span> s[i * N + j] != <span class="string">&#x27;.&#x27;</span>: </span><br><span class="line">                    t = <span class="built_in">int</span>(s[i * N + j])</span><br><span class="line">                    draw(i, j, t, <span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">        backtrace(cnt)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(s))</span><br><span class="line">        <span class="comment"># 将列表中字符重新合并成字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="3-AcWing-167-木棒">3. <a href="https://www.acwing.com/problem/content/169/">AcWing 167. 木棒</a></h2><h3 id="问题转化：">问题转化：</h3><p>本题相当于将若干个数分成多组，使每组总和相等，求解最多能分成多少组</p><p>这里一个值得注意的点是，将“每组总和最小为多少”转化为”最多能分成多少组“</p><h3 id="搜索顺序：">搜索顺序：</h3><ol><li class="lvl-3"><p>枚举木棒长度：从最小长度开始，枚举所有可能构成的木棒长度，第一个可行解即最优解</p></li><li class="lvl-3"><p>枚举选择小木棍拼接木棒：对于固定长度，依次枚举每根木棒有哪些小木棍构成（相当于一个组一个组的划分好）。小木棍的遍历寻找为组合型枚举</p><p>组内小木棍和木棒的顺序都可取任意特定顺序</p></li></ol><h3 id="剪枝优化：">剪枝优化：</h3><ol><li class="lvl-3"><p>可行性剪枝：</p><ul class="lvl-2"><li class="lvl-5">组成的木棒长度要是总长度的约数</li><li class="lvl-5">放入的小木棍长度加上木棒当前长度要小于固定长度</li></ul></li><li class="lvl-3"><p>优化搜索顺序：为了更少的备选方案，对小木棍按长度从大到小枚举枚举</p></li><li class="lvl-3"><p>排除等效冗余：</p><p>这里的冗余要考虑两个方面，首先是每个木棒内部的小木棍不存在顺序；其次木棍间也不存在顺序。前者使用组合数方式枚举即可，后者相对更复杂，因为其还涉及到方案的可行性问题。一般而言，一个小木棍无法用于当前木棒的构成并不能说明方案不可行，还需要继续枚举其他小木棍。但可以考虑一些特殊的情况，用当前小木棍的失败直接排除剩余的一部分小木棍乃至所有小木棍，减少枚举的小木棍数和木棒数。</p><ul class="lvl-2"><li class="lvl-5"><p>按照组合数方式枚举：规定特定顺序，每次从上次枚举的下一个开始处理——设置形参start</p></li><li class="lvl-5"><p>如果当前小木棍加到当前木棒中不可行，则直接略过后面所有长度相等的小木棍（小木棍间的冗余）</p></li><li class="lvl-5"><p>如果当前木棒放第一根小木棍u导致这根木棒凑不成length，则不用继续枚举，整个方案一定失败（前提逻辑是我们放入第一根小木棍后会尝试搜寻所有以其为第一部分的所有可能的方案。虽然到了最后我们把第一根小木棍u替换掉了可能会构成当前木棒，但后面其同样还会导致构不成木棒，继续枚举是木棒间的冗余）</p></li><li class="lvl-5"><p>如果当前木棒的最后一根小木棍u放在这里能构成了当前木棒，但搜寻后续方案失败了，则这不是因为这根小木棍导致的，且整个方案一定失败。换掉当前小木棍用于后续木棒也一样无法构成，不要再去尝试构建当前木棒的其他方案。（换句话说，已用于构成木棒的小木棍的在木棒间的使用顺序变化不会影响方案的可行性，不用做无意义的替换尝试，构成了的就不要变动了。同时如果当前小木棍构成了当前木棒，但递归搜索后续方案时失败了，就一定失败了，不要再去重新尝试构建当前木棒的其他方案，该层递归直接返回false）</p></li></ul><p>注意放在中间的小木棍是不一样的，其所在木棒无法构成可能是该小木棍和前面组成该木棒的某个小木棍不合适，可以重新组合，不一定就无法构成。</p></li></ol><h4 id="C-3">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之剪枝——AcWing 167. 木棒</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> sum, length;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// u表示当前构建木棒序号（从0开始，已完全构成木棒数量=u），s表示当前木棒已构建的长度， start用于组合类枚举记录枚举位置</span></span><br><span class="line"><span class="comment">// 当u=sum/length时，实际已经构建好了所有木棒，直接返回</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> s, <span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u * length == sum) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 如果当前木棒已被构建好，则直接返回对下一根木棒的构建</span></span><br><span class="line">    <span class="comment">// 注意这里start也要置为0</span></span><br><span class="line">    <span class="keyword">if</span> (s == length) <span class="keyword">return</span> <span class="built_in">dfs</span>(u + <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 剪枝优化——排除等效冗余，按照组合数方式枚举</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; n; i ++ )&#123;</span><br><span class="line">        <span class="comment">// 可行性剪枝——放入的小木棍长度加上木棒当前长度要小于固定长度</span></span><br><span class="line">        <span class="keyword">if</span> (st[i] || s + w[i] &gt; length) <span class="keyword">continue</span>;</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 判断当前方案是否合法，进行递归</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(u, s + w[i], i + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        st[i] = <span class="literal">false</span>; <span class="comment">// 回溯</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 当前小木棍失败后的剪枝优化</span></span><br><span class="line">        <span class="comment">// 剪枝优化——排除等效冗余，第一根小木棍不可行则一定不可行</span></span><br><span class="line">        <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 剪枝优化——排除等效冗余，第一根小木棍不可行则一定不可行</span></span><br><span class="line">        <span class="keyword">if</span> (s + w[i] == length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 剪枝优化——排除等效冗余，略过后面长度相等的小木棍</span></span><br><span class="line">        <span class="comment">// 能这样写也是因为先进行了排序</span></span><br><span class="line">        <span class="type">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n &amp;&amp; w[j] == w[i]) j ++ ;</span><br><span class="line">        <span class="comment">// 注意因为for循环也会执行i++，所以这里随后要写i=j-1</span></span><br><span class="line">        i = j - <span class="number">1</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n)&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">            cin &gt;&gt; w[i];</span><br><span class="line">            sum += w[i]; <span class="comment">// 总长度</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 剪枝——优化搜索顺序，长度从大到小枚举小木棍</span></span><br><span class="line">        <span class="built_in">sort</span>(w, w + n);</span><br><span class="line">        <span class="built_in">reverse</span>(w, w + n);</span><br><span class="line">        <span class="comment">// sort(w, w + n, greater&lt;int&gt;())</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 枚举木棒长度</span></span><br><span class="line">        length = w[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 不会死循环——最遭情况是所有小木棍共同构成一根木棒</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 可行性剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (sum % length == <span class="number">0</span> &amp;&amp; <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))&#123;</span><br><span class="line">                cout &lt;&lt; length &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            length ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-3">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之剪枝——AcWing 167. 木棒</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># cnt 表示当前在组合第几根棍子，从0开始，已完全构成木棒数量=cnt</span></span><br><span class="line">    <span class="comment"># cur 表示当前棍子的长度</span></span><br><span class="line">    <span class="comment"># st  表示当前从第几根小棍子开始枚举</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">cnt, cur, start</span>):</span><br><span class="line">        <span class="keyword">if</span> cnt * length == tot:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 如果当前木棒已被构建好，则直接返回对下一根木棒的构建</span></span><br><span class="line">        <span class="keyword">if</span> cur == length:</span><br><span class="line">            <span class="keyword">return</span> backtrace(cnt + <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        fail = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, n):</span><br><span class="line">            <span class="comment"># 可行性剪枝，不能是用过的、组合后长度超过length的</span></span><br><span class="line">            <span class="comment"># 剪枝优化——排除等效冗余，失败后略过后面长度相等的小木棍</span></span><br><span class="line">            <span class="keyword">if</span> vis[i] <span class="keyword">or</span> w[i] == fail <span class="keyword">or</span> cur + w[i] &gt; length:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            vis[i] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> backtrace(cnt, cur + w[i], i + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            vis[i] = <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 到这里说明当前方案失败，记录失败的棍子长度</span></span><br><span class="line">            fail = w[i]</span><br><span class="line">            <span class="comment"># 注意这里和C++写法的不同--&gt;无法通过直接修改i的值跳过循环，所以采用标记法</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 剪枝优化——排除等效冗余</span></span><br><span class="line">            <span class="comment"># 失败了，且当前小棍子是第一根或者最后一根，说明后续也找不到合法方案来安放它</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> cur + w[i] == length:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="built_in">int</span>(<span class="built_in">input</span>(), )</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 优化搜索顺序，大的先搜</span></span><br><span class="line">        w = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())), reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># length恰从最长小木棒开始搜</span></span><br><span class="line">        tot, length = <span class="built_in">sum</span>(w), w[<span class="number">0</span>]</span><br><span class="line">        vis = [<span class="literal">False</span>] * n</span><br><span class="line">        <span class="keyword">while</span> length &lt;= tot:</span><br><span class="line">            <span class="comment"># 可行性剪枝</span></span><br><span class="line">            <span class="comment"># 枚举 [m, tot] 之间能被 tot 整除的单根原棍长度</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> tot % length <span class="keyword">and</span> backtrace(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">                <span class="built_in">print</span>(length)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="4-AcWing-168-生日蛋糕">4. <a href="https://www.acwing.com/problem/content/170/">AcWing 168. 生日蛋糕</a></h2><h3 id="整体思路">整体思路</h3><p>问题为给定总体积$N\pi$和总层数$M$，且从上到下内层半径$R$和高$H$严格单调递增，求扣除底面的最小表面积</p><p>题目限制条件较复杂，由$1\leq M\leq20$推断可以使用暴搜</p><p>记最底层为 m, 很容易观察得出，表面积的公式为<br>$$<br>\begin{align}<br>S_{总} &amp; = S_{侧面} + S_{上表面} \\<br>&amp; = S_{所有层侧面积之和} + S_{第m层上表面积} \\<br>&amp; = \sum_{i=1}^{m}2\pi R_iH_i +\pi R_m^2 \\<br>\end{align}<br>$$<br>而体积为<br>$$<br>V_总 = \sum_{i=1}^{m}\pi R_i^2H_i<br>$$</p><p>由题意，$\pi$可以被忽略掉。</p><p>此外可以发现，利用单调递增的性质，每层高度和半径的最小值恰是该层的编号u（从最高层开始且初始编号为1）。</p><p>有了两个公式，还有题目给出的每层最小高度和最小半径，就知道可以用剪枝 + 暴搜来做这个题</p><p><img src="https://mdpic.dreamgo.fun/img/20210127003014554-1677381630809-2.png" alt="20210127003014554"></p><h3 id="搜索顺序">搜索顺序</h3><p>一层一层搜索半径和高</p><h3 id="剪枝优化-2">剪枝优化</h3><p><img src="https://mdpic.dreamgo.fun/img/image-20230226111159177.png" alt="image-20230226111159177"></p><h4 id="1-优化搜索顺序">1. 优化搜索顺序</h4><ol><li class="lvl-3"><p>层间：从下到上搜索，先搜体积和表面积大的，减少分支（由于蛋糕从下往上半径、高度依次递减，故体积也随之递减，由于总体积是确定不变的，所以我们从下往上枚举，最底层的蛋糕对应的分支数量最少。）</p></li><li class="lvl-3"><p>层内：先枚举半径再枚举高（半径相对于高来说对体积和表面积的影响较大，半径$R$在公式中是平方级别$R^2$，而高是线性级别$H$），且两者都从大到小枚举</p></li></ol><p>为此，在枚举每一层蛋糕时，需要记录当前层数$u$，当前蛋糕体积$v$和表面积$s$</p><h4 id="2-可行性剪枝">2. 可行性剪枝</h4><blockquote><p>结合单调性放缩，利用高度$h$和半径$r$的范围及体积的约束进行剪枝</p></blockquote><p>记总体积为$N$，当前层编号为$u$，高度为 $H_u$，半径为 $R_u$， 体积为 $V_u$，第 $m$ 层到第$u+1$层体积的累计值为 $V$</p><ol><li class="lvl-3"><p>对于$R_u$，当前为第$u$层， 第$u$层的体积为 $V_u$。$R_u$的下界应该是当前的层号$u$，R 的上界应该由两部分决定</p><ul class="lvl-2"><li class="lvl-5">$u+1$层半径$R_{u+1}$的约束：由于半径随层数单调递增，所以 $R_u \leq R_{u+1}-1$</li><li class="lvl-5">第$u$层体积 $V_u$的约束：由于第$u$层体积一定小于$N-min\sum_{i=1}^{u-1}V_i-V$，即 $V_u = R_u^2H_u \leq N-min\sum_{i=1}^{u-1}V_i-V$，又由于$H_u$同样有下界$u$，所以$R_u \leq \sqrt{\frac{n-min\sum_{i=1}^{u-1}V_i - V}{u}}$</li></ul></li></ol><p>取这两者的最小值, 故有以下等式成立</p><p>$$<br>u \leq R_u \leq min \lbrace R_{u+1}-1, \sqrt{\frac{n-min\sum_{i=1}^{u-1}V_i - V}{u}} \rbrace<br>$$</p><ol start="2"><li class="lvl-3"><p>对于第$u$层高度$H_u$的推导同理，$H_u$的下界为层号$u$，$H_u$的上界由也两部分决定</p><ul class="lvl-2"><li class="lvl-5">$u+1$层高度$H_{u+1}$的约束：$H_u \leq H_{u+1}-1$</li><li class="lvl-5">第$u$层体积 $V_u$的约束：由于第$u$层体积一定小于$N - min \sum_{i=1}^{u-1} V_i - V$，即 $V_u = R_u^2 H_u \leq N - min \sum_{i=1}^{u-1} V_i - V$，又由于$R_u$此时已被枚举确定，所以$H_u \leq \frac{n - min \sum_{i=1}^{u-1} V_i - V}{R^2_u}$</li></ul></li></ol><p>故同理可得出下列等式<br>$$<br>u \leq H_u \leq \min \lbrace H_{u+1} - 1, \frac{n-min\sum_{i=1}^{u-1}V_i - V}{R_u^2} \rbrace<br>$$</p><ol start="3"><li class="lvl-3"><p>体积的可行性剪枝：</p><p>记第 1 到第 $u$ 层体积的累计值为$V_{1-u}$，利用不等式$V + V_{1-u} = N$进行剪枝</p><p>首先需预处理前 $u$ 层体积$V_{1-u}$的最小值 $min\sum_{i=1}^{u}V_i$，此时有$R_i=H_i=u(i=1,\cdots,u)$，则<br>$$<br>V + min\sum_{i=1}^{u}V_i \leq n<br>$$</p></li></ol><h4 id="3-最优性剪枝">3. 最优性剪枝</h4><blockquote><p>放缩挖掘不等式关系，研究表面积的最优性剪枝</p></blockquote><p>记第 $m$ 层到第 $u+1$ 层表面积的累计值为 $S$, 第 1 到第 $u$ 层表面积的累计值为$S_{1-u}$</p><p>利用不等式$S + S_{1-u} &lt; ans$则有以下两种剪枝</p><ol><li class="lvl-3"><p>预处理出$S_{1-u}$的最小值为 $min\sum_{i=1}^{u-1}S_i$，此时有$R_i=H_i=u(i=1,\cdots,u)$，则<br>$$<br>S + \min\sum_{i=1}^{u} S_i &lt; ans<br>$$</p></li><li class="lvl-3"><p>利用放缩法推表面积公式和体积公式的关系，进一步剪枝</p><ul class="lvl-2"><li class="lvl-5">第一层到第$u$层的表面积有（不考虑 $\pi$）</li></ul></li></ol><p>$$<br>S_{1-u} = 2 \sum_{i=1}^{u} R_i H_i = \frac{2}{ R_{u+1} } \sum_{i=1}^{u} R_{u+1} R_i H_i &gt; \frac{2}{ R_{u+1} } \sum_{i=1}^{u} R_i^2 H_i<br>$$</p><ul class="lvl-0"><li class="lvl-2"><p>第一层到第 u 层的体积有</p></li></ul><p>$$<br>n - V = \sum_{i=1}^{u} R_i^2 H_i<br>$$</p><p>所以惊奇地发现<br>$$<br>S_{1-u} &gt;\frac{2(n-V)}{R_{u+1}}<br>$$<br>因此 $S_总 = S + S_{1-u}&gt;=S_{ans}$，即</p><p>$$<br>S + \frac{2(n-V)}{R_{u+1}} \geq S_{ans}, \ \ \  u=0时取等<br>$$</p><p>时就可以剪枝掉（最优性剪枝)</p><h4 id="C-4">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之剪枝——AcWing 168. 生日蛋糕</span></span><br><span class="line"><span class="comment">// 数学推导放缩剪枝</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">23</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="comment">// R，H存每一层半径和高度</span></span><br><span class="line"><span class="type">int</span> R[N], H[N];</span><br><span class="line"><span class="comment">// 前u层总体积，总侧面积的最小值，相当于前缀和</span></span><br><span class="line"><span class="type">int</span> minv[N], mins[N];</span><br><span class="line"><span class="type">int</span> ans = INF; <span class="comment">// 表面积答案</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// u表示当前这一层编号，v表示从m到u+1层的总体积（不含本层），s表示从m到u+1层的总共的面积（不含本层）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 可行性剪枝——体积约束，已构建层的总体积+待构件层的最小总体积&lt;=总体积</span></span><br><span class="line">    <span class="keyword">if</span> (v + minv[u] &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 最优性剪枝——最优表面积，已构建层的表面积+待构件层的最小表面积&lt;当前最优表面积</span></span><br><span class="line">    <span class="keyword">if</span> (s + mins[u] &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 最优性剪枝——放缩不等式，已构建层的表面积+待构件层的最小表面积&lt;当前最优表面积</span></span><br><span class="line">    <span class="keyword">if</span> (s + <span class="number">2</span>*(n-v)/R[u+<span class="number">1</span>] &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// u = 0时表明已经枚举完毕，判断当前体积是否等于n，若是，更新表面积</span></span><br><span class="line">    <span class="keyword">if</span> (!u)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == v) ans = s;</span><br><span class="line">        <span class="comment">// 注意当前总体积不等于n是不要更新面积，但也要return</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 剪枝之优化搜索顺序——先从大到小枚举半径，再从大到小枚举高度</span></span><br><span class="line">    <span class="comment">// 可行性剪枝——只在已确定的可行范围内枚举，范围由单调性放缩得到</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> r = <span class="built_in">min</span>(R[u + <span class="number">1</span>] - <span class="number">1</span>, (<span class="type">int</span>)<span class="built_in">sqrt</span>((n - minv[u - <span class="number">1</span>] - v)/u)); r &gt;= u; -- r)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> h = <span class="built_in">min</span>(H[u + <span class="number">1</span>] - <span class="number">1</span>, (<span class="type">int</span>)(n - minv[u - <span class="number">1</span>] - v)/ (r * r)); h &gt;= u; -- h)&#123;</span><br><span class="line">            <span class="type">int</span> t = (u == m) ? r * r : <span class="number">0</span>; <span class="comment">// 若是最底层，则要把顶部面积加上</span></span><br><span class="line">            R[u] = r, H[u] = h;</span><br><span class="line">            <span class="built_in">dfs</span>(u - <span class="number">1</span>, v + r * r * h, s + <span class="number">2</span> * r * h + t);</span><br><span class="line">            <span class="comment">// 这里需注意，回溯时，R[u], H[u]可直接被覆盖，而并没有改变其他的属性，所以无需恢复现场</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 预处理求出前u层总体积，总侧面积的最小值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i)&#123;</span><br><span class="line">        <span class="comment">// 最小时，R和H都等于对应层的编号</span></span><br><span class="line">        minv[i] = minv[i - <span class="number">1</span>] + i * i * i;</span><br><span class="line">        mins[i] = mins[i - <span class="number">1</span>] + <span class="number">2</span> * i * i;</span><br><span class="line">        <span class="comment">// 这里是一个小trick，minv[]和mins[]是按蛋糕从上到下计算的每一层的极限体积和侧面积</span></span><br><span class="line">        <span class="comment">// 但是最后搜索是从下到上搜索，这样min[]前缀和存的就是还未使用的体积和表面积了</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 哨兵，由于第m层R和H小于等于第m+1层R和H的值减1，所以这里将m+1层初始化为INF避免影响</span></span><br><span class="line">    R[m + <span class="number">1</span>] = H[m + <span class="number">1</span>] = INF;</span><br><span class="line">    <span class="built_in">dfs</span>(m, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ans == INF) </span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-4">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之剪枝——AcWing 168. 生日蛋糕</span></span><br><span class="line"><span class="comment"># 数学推导放缩剪枝</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> inf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    MAX_M = <span class="number">24</span></span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># 记录前 u 层的最小体积和侧面积</span></span><br><span class="line">    minv, mins = [<span class="number">0</span>] * MAX_M, [<span class="number">0</span>] * MAX_M</span><br><span class="line">    <span class="comment"># 记录搜索时每一层的半径和高度</span></span><br><span class="line">    R, H = [<span class="number">0</span>] * MAX_M, [<span class="number">0</span>] * MAX_M</span><br><span class="line">    res = inf</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预处理边界以及剪枝用的数据</span></span><br><span class="line">    R[m + <span class="number">1</span>] = H[m + <span class="number">1</span>] = inf</span><br><span class="line">    <span class="comment"># 注意u从1到m</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        minv[i] = minv[i - <span class="number">1</span>] + i ** <span class="number">3</span></span><br><span class="line">        mins[i] = mins[i - <span class="number">1</span>] + <span class="number">2</span> * i ** <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 爆搜，剪了很多枝的爆搜</span></span><br><span class="line">    <span class="comment"># n 是体积，m 是层数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">u, v, s</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> res</span><br><span class="line">        <span class="keyword">if</span> v + minv[u] &gt; n: </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 推出的公式剪枝，筛掉一定不是答案的分支</span></span><br><span class="line">        <span class="keyword">if</span> s + <span class="built_in">max</span>(mins[u], <span class="number">2</span> * (n - v) // R[u + <span class="number">1</span>]) &gt;= res:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> u:</span><br><span class="line">            <span class="comment"># 蛋糕做好了且是当前最优解</span></span><br><span class="line">            <span class="keyword">if</span> v == n:</span><br><span class="line">                res = s</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        sr = <span class="built_in">min</span>(R[u + <span class="number">1</span>] - <span class="number">1</span>, <span class="built_in">int</span>(((n - minv[u - <span class="number">1</span>] - v) / u)**<span class="number">0.5</span>))</span><br><span class="line">        <span class="comment"># 优化搜索顺序，从最大的半径开始枚举</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(sr, u - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 当前是最底层时，不要忘了加上顶部的表面积</span></span><br><span class="line">            t = r * r <span class="keyword">if</span> u == m <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            sh = <span class="built_in">min</span>(H[u + <span class="number">1</span>] - <span class="number">1</span>, <span class="built_in">int</span>((n - minv[u - <span class="number">1</span>] - v) / (r * r)))</span><br><span class="line">            <span class="comment"># 优化搜索顺序，从最大的高度开始枚举</span></span><br><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(sh, u - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                R[u], H[u] = r, h</span><br><span class="line">                <span class="comment"># 递归上一层</span></span><br><span class="line">                backtrace(u - <span class="number">1</span>, v + r * r * h, s + <span class="number">2</span> * r * h + t)</span><br><span class="line">    <span class="comment"># 从最底层开始向上枚举</span></span><br><span class="line">    backtrace(m, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 无解输出 0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">if</span> res == inf <span class="keyword">else</span> res)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2.1 DFS中的连通性和搜索顺序</title>
      <link href="/2023/02/23/2-2-1-DFS%E4%B8%AD%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7%E5%92%8C%E6%90%9C%E7%B4%A2%E9%A1%BA%E5%BA%8F/"/>
      <url>/2023/02/23/2-2-1-DFS%E4%B8%AD%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7%E5%92%8C%E6%90%9C%E7%B4%A2%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="2-2-1-DFS中的连通性和搜索顺序">2.2.1 DFS中的连通性和搜索顺序</h1><h2 id="DFS">DFS</h2><p>优先往深度扩展，到叶节点再回溯。由于需要回溯，所以通过栈来实现。一般可以使用系统栈，直接递归搜索。</p><p>DFS代码简单，但存在爆栈风险。递归的层数越深，需要的栈空间越大。因而有深度限制，过深会有爆栈问题。栈空间默认为1M，要自己估计是否爆栈。如果爆栈的话需要用迭代的方式来写，将递归改成非递归。</p><p>两大类</p><ol><li class="lvl-3"><p>内部搜索-空间路径搜索：图的内部从一个点到另一个点的搜索过程，每个点是图的一个具体元素。即棋盘内部从一个棋子到另一个棋子。题目本身就提供具有多个节点的图，搜索的节点间的路径。</p></li><li class="lvl-3"><p>外部搜索-状态图搜索：把整体的当前状态看成一个点，搜索的过程是整体状态变化的过程，由一个状态变换成另一个状态。即棋盘整体布局的变化，从一种棋盘到另一种棋盘。将状态视为节点，初始时只有一个节点，图是在搜索时逐渐构成的，为状态图。</p></li></ol><p>判断回溯时是否需要恢复现场：先DFS再改变当前状态不需要恢复现场，先改变当前状态再DFS则需要恢复现场。</p><p>通常内部搜索时，当一个状态向另外一个状态拓展，这个状态是不会变化的。每个状态只搜索一次，所以不需要回溯。</p><p>每个节点只搜索一次，所以不能恢复现场，否则会重复搜索。</p><p>而外部搜索时通常需要回溯并恢复现场，因为当前状态在递归后会发生改变——因为我们搜索的就是状态转换图。状态本身是节点，要回溯到原节点就要恢复原状态。</p><p>不改变节点状态就不需要恢复现场，回溯时需要用到原节点的状态就要恢复现场。</p><p>不恢复现场意味着系统帮我们来维护结点状态, 恢复现场意味着自己来维护结点的状态自己维护结点状态指的是搜索一个结点 u 的所有邻接点 v 的时候, 点 u 是固定的, 不能变化的, 这是显而易见的</p><h2 id="一-DFS之连通性模型">一. DFS之连通性模型</h2><ol><li class="lvl-3"><p>Flood Fill 模型</p></li><li class="lvl-3"><p>图和树的遍历</p></li></ol><p>连通性模型判断能否连通可以用DFS，也可以用BFS。DFS代码更简单（使用系统栈），但不好处理最短路问题，BFS代码复杂些，但可以求出最短路问题。因此当只用判断连通性时，可以用DFS。</p><h3 id="1-AcWing-1112-迷宫">1. <a href="https://www.acwing.com/problem/content/1114/">AcWing 1112. 迷宫</a></h3><p>注意起点和终点是障碍物的话也无法到达</p><h3 id="C">C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之连通性模型——AcWing 1112. 迷宫 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k, n;</span><br><span class="line"><span class="type">int</span> xa, ya, xb, yb;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 递归中，首先写出边界条件的判断</span></span><br><span class="line">    <span class="keyword">if</span> (g[x][y] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 即使是终点和起点，如果为&#x27;#&#x27;，也是不连通</span></span><br><span class="line">    <span class="comment">// 注意判断可以放在递归后最开始时，也可以放在递归前。要结合题目初始和最终条件进行选择</span></span><br><span class="line">    <span class="comment">// 但不要两处都进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (x == xb &amp;&amp; y == yb) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    st[x][y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 不同于bfs，不要在递归后再写一遍，会重复</span></span><br><span class="line">    <span class="comment">// g[x][y] = &#x27;#&#x27;; // 直接通过改变状态进行标记</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举所有可移动方向</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++ i)&#123;</span><br><span class="line">        <span class="type">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">        <span class="comment">// 判断不能递归的条件，注意不要和递归后最开始的判断重复</span></span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (st[a][b]) <span class="keyword">continue</span>; </span><br><span class="line">        <span class="comment">// 进行递归</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(a, b)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 递归时如何合理编写返回值、传递要求解的值是一个小难点</span></span><br><span class="line">        <span class="comment">// 这里不能直接return dfs(a, b)</span></span><br><span class="line">        <span class="comment">// 因为当dfs(a, b)为false时，还要继续枚举其他方向</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归后一定要判断是否需要回溯和恢复现场</span></span><br><span class="line">        <span class="comment">// 这里不需要恢复现场，属于内部搜索，拓展时不会改变当前状态</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (k --)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;xa, &amp;ya, &amp;xb, &amp;yb);</span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="comment">// 不同于bfs，dfs一定要定义形参，而不是使用全局变量，方便递归</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(xa, ya)) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="python">python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之连通性模型——AcWing 1112. 迷宫 </span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> setrecursionlimit</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    setrecursionlimit(<span class="number">5000</span>)</span><br><span class="line">    <span class="comment"># Python中系统栈默认的递归深度限制为1000，</span></span><br><span class="line">    <span class="comment"># 一般最大可修改到10^5，再大的话可能就需要手写栈等策略</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= n <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= n <span class="keyword">or</span> arr[x][y] == <span class="string">&#x27;#&#x27;</span> <span class="keyword">or</span> vis[x][y]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> (x, y) == (ex, ey):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        vis[x][y] = <span class="literal">True</span> <span class="comment"># 更新判重</span></span><br><span class="line">        <span class="keyword">return</span> dfs(x - <span class="number">1</span>, y) <span class="keyword">or</span> dfs(x + <span class="number">1</span>, y) <span class="keyword">or</span> dfs(x, y - <span class="number">1</span>) <span class="keyword">or</span> dfs(x, y + <span class="number">1</span>) <span class="comment"># 遍历子节点，这里不需要回溯恢复现场所以可以直接这么xie</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">        n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        arr = [<span class="built_in">input</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        vis = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        sx, sy, ex, ey = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;YES&quot;</span> <span class="keyword">if</span> dfs(sx, sy) <span class="keyword">else</span> <span class="string">&quot;NO&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2-AcWing-1113-红与黑">2. <a href="https://www.acwing.com/problem/content/1115/">AcWing 1113. 红与黑</a></h3><h4 id="C-2">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之连通性模型——AcWing 1113. 红与黑</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>; </span><br><span class="line">    <span class="comment">// 只算当前点的话个数为1，不是0</span></span><br><span class="line">    </span><br><span class="line">    st[x][y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 这里递归进入后再进行标记</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++ i)&#123;</span><br><span class="line">        <span class="type">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">        <span class="comment">// 判断能否进入递归</span></span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (st[a][b]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (g[a][b] != <span class="string">&#x27;.&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注意dfs中一个注意点是如何在递归中统计要求的量</span></span><br><span class="line">        <span class="comment">// 这里的思路是只统计以当前点为起点的数量，并进行前传，而不用把前面的个数传到后面</span></span><br><span class="line">        <span class="comment">// 这是由于这里求的是所有方案数，前面的点有多种选择，不方便后传（递归时还没统计完），需要递归后才能确定方案数</span></span><br><span class="line">        <span class="comment">// 所以采用递归后前传的方式，分解成子问题，每次递归后统计当前点为起点的方案数</span></span><br><span class="line">        cnt += <span class="built_in">dfs</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// n || m：读入两个零时结束</span></span><br><span class="line">    <span class="comment">// 注意这里先输入列数，再输入行数</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n), n || m)&#123;</span><br><span class="line">        <span class="type">int</span> sx, sy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j)</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">                    sx = i, sy = j;</span><br><span class="line">                    <span class="comment">// 找到起始点</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span> ,<span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dfs</span>(sx, sy));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-2">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之连通性模型——AcWing 1113. 红与黑</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> setrecursionlimit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    setrecursionlimit(<span class="number">5000</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= n <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= m <span class="keyword">or</span> vis[x][y]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> g[x][y] == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        vis[x][y] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> dfs(x - <span class="number">1</span>, y) + dfs(x + <span class="number">1</span>, y) + dfs(x, y - <span class="number">1</span>) + dfs(x, y + <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 注意不要忘了加1</span></span><br><span class="line">        <span class="comment"># 注意不需要回溯时才能用这种尾递归</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 注意读取输入的方法</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        <span class="comment"># 注意审题，行在先还是列在先</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (n + m):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        g = [<span class="built_in">list</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        vis = [[<span class="literal">False</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="comment"># 使用next获得起点位置</span></span><br><span class="line">        <span class="comment"># next()方法从迭代器中检索下一个项目</span></span><br><span class="line">        sx, sy = <span class="built_in">next</span>((x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(m) <span class="keyword">if</span> g[x][y] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(dfs(sx, sy))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="二-DFS之搜索顺序">二. DFS之搜索顺序</h2><p>外部搜索即通常所说的暴搜问题，需要想一个搜索顺序，使所有方案全部枚举到。</p><p>问题可以询问方案数、最优解等。</p><p>要想到用怎样的顺序才能不重复、不遗漏地枚举到所有方案/状态。搜索的核心即搜索顺序。</p><p>思考时可以结合深度搜索树辅助分析</p><h3 id="1-AcWing-1116-马走日">1. <a href="https://www.acwing.com/problem/content/1118/">AcWing 1116. 马走日</a></h3><p>这里枚举表示马移动的八个方向即可</p><p>日字形移动：</p><p>dx = {-2, -1, 1, 2, -2, -1, 1, 2}<br>dy = {-1, -2, -2 ,-1, 1, 2, 2, 1}</p><p>注意使用相对变化量，枚举八个位置</p><p>因为马的位置状态发生了改变，所以回溯时需要恢复现场。</p><p>每一种走法都对应于从根节点到叶子节点的遍历过程，不同的分支代表不同的方案。搜索树上的遍历过程和方案一一对应。</p><p>外部搜索是状态图的搜索，每个状态都对应于一个节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之搜索顺序——AcWing 1116. 马走日</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t, n, m;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="comment">// 注意由于这里我们需要恢复现场，所以递归完后st也会恢复最初状态，不用每次memset重新初始化</span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="comment">// 统计方案数的方法多种</span></span><br><span class="line"><span class="comment">// 一种是使用全局变量</span></span><br><span class="line"><span class="comment">// 一种是作为返回值，dfs内使用cnt，并在return时返回</span></span><br><span class="line"><span class="comment">// 一种是作为形参记录当前节点信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举表示左右所有方向</span></span><br><span class="line"><span class="type">int</span> dx[] = &#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[] = &#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span> ,<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否满足边界条件</span></span><br><span class="line">    <span class="comment">// 注意这里为了便于判断，引入的辅助变量cnt，用于记录已遍历的节点个数</span></span><br><span class="line">    <span class="comment">// 之所以要记录是因为每个搜索方案都对应于一个从根节点到叶子节点的走法，必须判断何时到达叶子节点</span></span><br><span class="line">    <span class="comment">// 参数是进行前传(作为返回值)，还是后传(作为形参)，还是使用全局变量：</span></span><br><span class="line">    <span class="comment">// 这里cnt在前面就已经确定，与前面的递归有关，且用于当前状态，所以后传</span></span><br><span class="line">    <span class="comment">// 前传一般用于可分解为无后效的子问题时，且必须要递归返回后，当前状态的量才能确定</span></span><br><span class="line">    <span class="comment">// 全局变量用于记录路径总数等</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>  (cnt == n * m)&#123;</span><br><span class="line">        ans ++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    st[x][y] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 枚举所有可移动方向</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i)&#123;</span><br><span class="line">        <span class="type">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (st[a][b]) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">dfs</span>(a, b, cnt + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 注意形参是要变化的</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     st[x][y] = <span class="literal">false</span>;</span><br><span class="line">     <span class="comment">// 注意回溯后恢复现场</span></span><br><span class="line">     <span class="comment">// 注意题目没有确定的终点，而是求遍历所有点的路径</span></span><br><span class="line">     <span class="comment">// 因此每个方格中的点并不对应于搜索状态图中的节点，每个状态节点对应于一个从根节点到叶节点的走法/方案</span></span><br><span class="line">     <span class="comment">// 因此不同方案时方格是可以被重复走的，且需要恢复状态。而标记数组的作用在于每个方案内部时方格只能走一次</span></span><br><span class="line">     <span class="comment">// 也因为没有设定终点，所以需要自己判断是否到了叶子节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t --)&#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;x, &amp;y);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="comment">// 可以不写，因为回溯时会恢复现场</span></span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x, y, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 遍历的方格数初始时是1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-3">python</h4><p>注意python过不了本题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> setrecursionlimit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    setrecursionlimit(<span class="number">5000</span>)</span><br><span class="line">    dir_x = [-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    dir_y = [-<span class="number">1</span>, -<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用形参后向传播遍历节点数信息，方便判断是否达到叶子节点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, cnt</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cnt:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># 这里使用前向传参（传返回值）来记录路径总数结果</span></span><br><span class="line">        way = <span class="number">0</span></span><br><span class="line">        vis[x][y] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> dx, dy <span class="keyword">in</span> <span class="built_in">zip</span>(dir_x, dir_y):</span><br><span class="line">            nx, ny = x + dx, y + dy</span><br><span class="line">            <span class="comment"># 注意这里python关系不等式写法</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= nx &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= ny &lt; m <span class="keyword">and</span> <span class="keyword">not</span> vis[nx][ny]:</span><br><span class="line">                way += dfs(nx, ny, cnt - <span class="number">1</span>)</span><br><span class="line">        vis[x][y] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> way</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">        n, m, sx, sy = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        vis = [[<span class="literal">False</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="built_in">print</span>(dfs(sx, sy, n * m - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2-AcWing-1117-单词接龙">2. <a href="https://www.acwing.com/problem/content/1119/">AcWing 1117. 单词接龙</a></h3><p>搜索顺序：把开头字母作为根节点，首先枚举以其开头的单词，然后针对每个单词枚举可以接在其后面的单词，直到找不到为止。</p><p>由此，第一层和后续层的搜索操作是不同的，为了方便，我们先直接枚举第一层，并当作森林分别进行DFS</p><p>这里难点在于：</p><ul class="lvl-0"><li class="lvl-2"><p>如何判断两个单词能否接在一起，并记录其重合长度</p></li></ul><p>显然也需要进行枚举。这里为了方便截取子串，可以使用string的substr函数。</p><p>注意这里的贪心思想！为了使长度最长，重合的要最小即可。</p><p>为了记录每两个单词的最小重合长度，可以建立一个二维数组事先记录。而判断能否相接的过程要在DFS前预处理好</p><h4 id="C-3">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之搜索顺序——AcWing 1117. 单词接龙 </span></span><br><span class="line"><span class="comment">// 多入口DFS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string word[N]; <span class="comment">// 存储所有单词</span></span><br><span class="line"><span class="type">int</span> g[N][N]; <span class="comment">// 图不是直接存在的，而需要构建和存储</span></span><br><span class="line"><span class="comment">//为了使长度最长，重合的要最小即可。因此邻接矩阵g[N][N]除了存储两个单词是否有边，还要具体表示前一单词前缀和后一单词后缀的最小重合长度</span></span><br><span class="line"><span class="type">int</span> used[N]; <span class="comment">// 记录每个单词使用次数</span></span><br><span class="line"><span class="type">int</span> ans; <span class="comment">// 全局变量记录结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入接龙字符串和拼接的最后一个单词的索引</span></span><br><span class="line"><span class="comment">// 传入拼接的最后一个单词的索引是为了方便进行下一个单词的遍历搜寻</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string dragon, <span class="type">int</span> last)</span></span>&#123;</span><br><span class="line">    ans = <span class="built_in">max</span>((<span class="type">int</span>)dragon.<span class="built_in">size</span>(), ans);</span><br><span class="line">    <span class="comment">// 注意size()要强制转换为int，否则类型不对</span></span><br><span class="line">    <span class="comment">// 更新字符串长度</span></span><br><span class="line"></span><br><span class="line">    used[last] ++; <span class="comment">// 标记：使用次数加1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举所有单词</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (g[last][i] &amp;&amp; used[i] &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">dfs</span>(dragon + word[i].<span class="built_in">substr</span>(g[last][i]), i);</span><br><span class="line">            <span class="comment">// 对于重复的问题，不用进行预先分割当复杂的操作</span></span><br><span class="line">            <span class="comment">// 记录长度后直接用substr对应截取即可</span></span><br><span class="line">    used[last] --;</span><br><span class="line">    <span class="comment">// 回溯时恢复现场</span></span><br><span class="line">    <span class="comment">// 同样不要放在for循环内，循环内仍是在对下一层进行枚举，不需要恢复当前状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; word[i];</span><br><span class="line">    <span class="type">char</span> start;</span><br><span class="line">    cin &gt;&gt; start;</span><br><span class="line">    <span class="comment">// scanf(&quot;\n%c&quot;, &amp;start);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举所有单词，判断两两之间是否相接，并记录最小重合长度</span></span><br><span class="line">    <span class="comment">// 这里注意由于每个单词可以使用两次，所以可以自己和自己相接</span></span><br><span class="line">    <span class="comment">// 如果限制了不能自己和自己相接，遍历时要把自己挖出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++ j)&#123;</span><br><span class="line">            string a = word[i], b = word[j];</span><br><span class="line">            <span class="comment">// 分别从前一个单词的结尾和后一个单词的开头进行枚举</span></span><br><span class="line">            <span class="comment">// 注意使用string的substr函数直接截取字串，简化操作</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="built_in">min</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>()); ++ k) </span><br><span class="line">            <span class="comment">// 注意题意限制：重合长度必须大于等于1，且严格小于两个串的长度</span></span><br><span class="line">                <span class="comment">// k &lt; min(a.size(), b.size())即可限制严格小于两个串的长度</span></span><br><span class="line">                <span class="keyword">if</span> (a.<span class="built_in">substr</span>(a.<span class="built_in">size</span>() - k, k) == b.<span class="built_in">substr</span>(<span class="number">0</span>, k))&#123;</span><br><span class="line">                    g[i][j] = k;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (word[i][<span class="number">0</span>] == start)</span><br><span class="line">            <span class="built_in">dfs</span>(word[i], i); <span class="comment">// 传入单词和其索引</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索顺序：把开头字母作为根节点，首先枚举以其开头的单词，然后针对每个单词枚举可以接在其后面的单词，直到找不到为止。</span></span><br><span class="line">    <span class="comment">// 由于第一层和后续层的搜索操作是不同的，为了方便，我们先直接枚举第一层，并当作森林分别进行dfs</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-4">python</h4><h5 id="多入口DFS">多入口DFS</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之搜索顺序——AcWing 1117. 单词接龙 </span></span><br><span class="line"><span class="comment"># 多入口DFS</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> setrecursionlimit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    setrecursionlimit(<span class="number">5000</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    g = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    word = [<span class="built_in">input</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    start = <span class="built_in">input</span>()</span><br><span class="line">    used = [<span class="number">0</span>] * n</span><br><span class="line">    ans = <span class="number">0</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">l, last</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> ans </span><br><span class="line">        <span class="comment"># nonlocal声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量</span></span><br><span class="line">        ans = <span class="built_in">max</span>(ans, l)</span><br><span class="line">        </span><br><span class="line">        used[last] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> g[last][i] <span class="keyword">and</span> (used[i] &lt; <span class="number">2</span>):</span><br><span class="line">                dfs(l + <span class="built_in">len</span>(word[i]) - g[last][i], i)</span><br><span class="line">        used[last] -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            w1, w2 = word[i], word[j]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">min</span>(<span class="built_in">len</span>(w1), <span class="built_in">len</span>(w2))):</span><br><span class="line">                <span class="comment"># if word[i][len(w1) - k:] == word[j][0:k]:</span></span><br><span class="line">                <span class="keyword">if</span> word[i].endswith(word[j][:k]):</span><br><span class="line">                    g[i][j] = k</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 多入口，根节点确定，但需要遍历其所有子节点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> word[i][<span class="number">0</span>] == start:</span><br><span class="line">            dfs(<span class="built_in">len</span>(word[i]), i)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="单入口DFS">单入口DFS</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> setrecursionlimit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    setrecursionlimit(<span class="number">10000</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    used = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    word = [<span class="built_in">input</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="comment"># 加个哨兵为让 head 直接搜</span></span><br><span class="line">    <span class="comment"># 构造出了符合子节点条件的根节点，使其能当作普通节点处理</span></span><br><span class="line">    head = <span class="string">&#x27;#&#x27;</span> + <span class="built_in">input</span>()</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># dragon 为当前接龙得到的字符串，idx 是上一层 DFS 用到了哪个编号的字符串</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">dragon, last</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> ans</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">len</span>(dragon))</span><br><span class="line">        </span><br><span class="line">        used[last] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, p <span class="keyword">in</span> <span class="built_in">enumerate</span>(word):</span><br><span class="line">            <span class="comment"># 取 dragon 和 p 中的长度最小值做上界</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">min</span>(<span class="built_in">len</span>(dragon), <span class="built_in">len</span>(p))):</span><br><span class="line">                <span class="comment"># p 的前缀必须是 dragon 的后缀，且之前的使用次数少于两次</span></span><br><span class="line">                <span class="comment"># 直接使用endswith判断字符串是否以指定字符或子字符串结尾。</span></span><br><span class="line">                <span class="keyword">if</span> used[i] &lt; <span class="number">2</span> <span class="keyword">and</span> dragon.endswith(p[:j]):</span><br><span class="line">                    dfs(dragon + p[j:], i)</span><br><span class="line">        used[last] -= <span class="number">1</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># head 的 idx 取 n，不影响其他元素</span></span><br><span class="line">    dfs(head, n)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 减去 &#x27;#&#x27; 贡献的长度</span></span><br><span class="line">    <span class="built_in">print</span>(ans - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3-AcWing-1118-分成互质组">3. <a href="https://www.acwing.com/problem/content/1120/">AcWing 1118. 分成互质组</a></h3><p>DFS的一大难点是建图的过程，把问题转化为图论搜索问题。本题的问题是给定n个正整数，将它们分组，使得每组中任意两个数互质。</p><p>最初做题时你可能想不到要建图进行搜索，这说明你建图的思想还不足。我们可以如下建图：如果两个数不互质，两者间就有边。要将相互间没有边的分到一组。</p><p>互质的判断——最大公约数为1。</p><p>这有些类似于求最大团的问题。<em>最大团问题</em>（Maximum Clique Problem, MCP）是图论中一个经典的组合优化问题，也是一类NP完全问题。最大团问题又称为最大<a href="https://baike.baidu.com/item/%E7%8B%AC%E7%AB%8B%E9%9B%86?fromModule=lemma_inlink">独立集</a>问题（Maximum Independent Set Problem）。</p><p>暴搜题很多是NP完全问题，否则会考贪心或dp</p><p>核心问题是搜索顺序问题，如何把所有情况全部枚举到，求到最优方案。本质是最优化问题。</p><p>采用暴搜——决策树模型的策略，进行DFS。由于数和组都是变的，需要以其中一个为主顺序进行枚举决策。</p><p>一个组一个组的枚举，看每个组应该选谁。而对于每个组，分别枚举其每个可能放入的数。注意由于所有数都是事先知道的，所以每个组处理完后后面就不会再进行增加和改变。</p><p>每种方案都对应一个分支，每次决策后向下递归一层，直到将所有数分完后结束，并更新最小值</p><p>注意搜寻顺序：这里可以由两种搜寻顺序：</p><ol><li class="lvl-3"><p>对每个数搜寻能在哪个组中</p></li><li class="lvl-3"><p>对每个现有组搜寻所有能放入的数，一个组一个组的枚举</p></li></ol><p>这里如果对每个数进行搜索会比较麻烦，数是变的，组数也是变的，最好能确定一个相对变化不大的（一个数只对应一个组，一个组则对应多个数，枚举组的话总层数少）。这里枚举组，每次把所有能放入的数都放入当前组，然后就不再往当前组的状态进行改变了，而是新开其他组，直至所有数都入组。即每次只对最后一个组进行放入操作。这恰是一种贪心策略，最后能保证组数最少。</p><p>所有决策方式：</p><ol><li class="lvl-3"><p>把某个数加到最后一组中（规定顺序是一个组一个组枚举，加入组时不是任意的，而是要加到最后一组，使决策更少）</p></li><li class="lvl-3"><p>新开一个组</p></li></ol><p>考虑搜索顺序/决策方式的一个原则是保证让搜索空间尽量小一些，即分支数量少一些。</p><p>第一个剪枝优化：</p><p>当可以进行第一个操作时就不用进行第二个操作，新开一个组，可以用扰动证明。这可视为了贪心的策略或剪枝优化的策略。</p><p>第二个剪枝优化：</p><p>进行第一个操作时也可以进行优化。将数放入组中是一个组合问题，不用考虑顺序。这样能够避免组内冗余（排列变组合）</p><p>如何实现组合类型递归搜索呢——为了保证不重复搜索，人为规定一个特定搜索顺序即可，如按下标从小到大——需要传入一个形参，记录当前的搜索位置。</p><p>第三个剪枝优化</p><p>同时由于本题求的是最小值，可以使用最优性剪枝优化，但结果已经大于当前最优解则剪枝。</p><p>dfs分组问题有两种做法，第一种就是：枚举每个数要分到哪一组，这种的话没有等效冗余，第二种：枚举哪一组应该放进那些数，这种需要优化等效冗余，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS之搜索顺序——AcWing 1118. 分成互质组</span></span><br><span class="line"><span class="comment">// 静态数组的思路，为每个组找数字</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> group[N][N]; <span class="comment">// 每组分别记录下来，最坏情况下每个节点一组</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> ans = N; <span class="comment">// 最坏情况下每个节点一组</span></span><br><span class="line"><span class="comment">// 注意由于ans要取最小值，所以初始时要赋无穷大或大于理论上的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧几里得算法求最大公约数</span></span><br><span class="line"><span class="comment">// 最大公约数等于1说明互质</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个数是否能放入当前的组中</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> group[], <span class="type">int</span> gc, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 枚举所有已放入组中的数，判断是否互质</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; gc; ++ j)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">gcd</span>(p[group[j]], p[i]) &gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意形参的设置</span></span><br><span class="line"><span class="comment">// g记录当前的总组数，也恰好是当前最后一个组的编号</span></span><br><span class="line"><span class="comment">// gc记录当前最后一个组已放入的数的个数</span></span><br><span class="line"><span class="comment">// tc表示当前已分配好的数的个数，用于判断是否结束</span></span><br><span class="line"><span class="comment">// start表示还未分配的数中第一个数的下标</span></span><br><span class="line"><span class="comment">// 这里需要注意要按照组合类型的搜索方式，即认为规定一个特定搜索顺序，这里按照下标顺序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> g, <span class="type">int</span> gc, <span class="type">int</span> tc, <span class="type">int</span> start)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 最优性剪枝，当结果大于等于目前的最优解时，一定不是最优解，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (tc == n)&#123;</span><br><span class="line">        ans = g;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 由于前面的判断，所以现在一定小于目前的解，进行更新</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置一个标记，用于判断是否需要新开一个组</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 新开一个组的条件：枚举剩余所有数后都不存在新的点可以放入当前组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从未分配的数中第一个数开始枚举，分别尝试放入剩余的数，进行递归搜索</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (!st[i] &amp;&amp; <span class="built_in">check</span>(group[g], gc, i))&#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>; <span class="comment">// 标记已分配好</span></span><br><span class="line">            group[g][gc] = i; <span class="comment">// 存入数的索引编号</span></span><br><span class="line">            <span class="comment">// 进行递归</span></span><br><span class="line">            <span class="built_in">dfs</span>(g, gc + <span class="number">1</span>, tc + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 注意形参的对应变化</span></span><br><span class="line"></span><br><span class="line">            st[i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 回溯时恢复现场，注意这里改变的是被枚举的数的状态，所以在循环内部恢复</span></span><br><span class="line">            <span class="comment">// group[g][gc]由于会直接被覆盖，不用恢复</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 剪枝——组合问题规定特定顺序</span></span><br><span class="line">            <span class="keyword">if</span> (gc == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 因为开一个新组的前提条件是每个数都不能放到旧组中了，</span></span><br><span class="line">            <span class="comment">// 所以剩下的第一个数一定会放到某个新组中，而组与组之间是没有顺序的区别的</span></span><br><span class="line">            <span class="comment">// 比如对于数据3，7，6，14来说，第一次搜索结束后&#123;3, 14&#125;, &#123;7，6&#125;被找到，</span></span><br><span class="line">            <span class="comment">// 后续是不需要找&#123;7, 6&#125;, &#123;14, 3&#125;的，所以可以直接规定一种顺序——未分配的数直接放入新的组中</span></span><br><span class="line">            <span class="comment">// 那我们可以将它固定到第一个新组中，这样可以减掉很多等效冗余的方案。</span></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果枚举了所有剩余的数都不能放入当前组，就新开一个组</span></span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="built_in">dfs</span>(g + <span class="number">1</span>, <span class="number">0</span>, tc, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 新开一个组，注意此时需要将gc和start设为0, g加1，而tc不变</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 注意初始形参的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-5">python</h4><p>静态数组的思路，为每个组找数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之搜索顺序——AcWing 1118. 分成互质组</span></span><br><span class="line"><span class="comment"># 静态数组的思路，为每个组找数字</span></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> setrecursionlimit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    p = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    group = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    vis = [<span class="literal">False</span>] * n</span><br><span class="line">    ans = n</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b) <span class="keyword">if</span> b <span class="keyword">else</span> a</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">group, gc, i</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(gc):</span><br><span class="line">            <span class="keyword">if</span> gcd(p[group[j]], p[i]) &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">g, gc, tc, start</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> ans </span><br><span class="line">        <span class="keyword">if</span> g &gt;= ans:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> tc == n:</span><br><span class="line">            ans = g</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> vis[i] <span class="keyword">and</span> check(group[g], gc, i):</span><br><span class="line">                vis[i] = <span class="literal">True</span></span><br><span class="line">                group[g][gc] = i</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                dfs(g, gc + <span class="number">1</span>, tc + <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">                vis[i] = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> gc:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            dfs(g + <span class="number">1</span>, <span class="number">0</span>, tc, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>动态数组思路，为每个数字找组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之搜索顺序——AcWing 1118. 分成互质组</span></span><br><span class="line"><span class="comment"># 动态数组思路，为每个数字找组</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="comment"># 返回最大公约数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    p = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="comment"># 求出所有互质的一对数</span></span><br><span class="line">    coprime = &#123;(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> p <span class="keyword">for</span> y <span class="keyword">in</span> p <span class="keyword">if</span> gcd(x, y) == <span class="number">1</span>&#125;</span><br><span class="line">    group = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    res = n</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回溯法，为每个 p[idx] 找到合适的组</span></span><br><span class="line">    <span class="comment"># idx为当前要分配的数的索引</span></span><br><span class="line">    <span class="comment"># group 为预设的空组，size 为存在元素的组个数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">idx, size</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> res</span><br><span class="line">        <span class="comment"># 剪枝 and 刷新答案</span></span><br><span class="line">        <span class="keyword">if</span> size &gt;= res <span class="keyword">or</span> idx == n:</span><br><span class="line">            res = <span class="built_in">min</span>(res, size)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cur = p[idx]</span><br><span class="line">        <span class="comment"># 尝试将 p[idx] 插入当前存在元素的组（group 中前 size 个组）</span></span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> group[:size]:</span><br><span class="line">             <span class="comment"># 查询当前 p[idx] 与组 g 中元素组成的二元组是否都在 coprime 中</span></span><br><span class="line">             <span class="keyword">if</span> <span class="built_in">all</span>((cur, val) <span class="keyword">in</span> coprime <span class="keyword">for</span> val <span class="keyword">in</span> g):</span><br><span class="line">                 g.append(cur)</span><br><span class="line">                 backtrace(idx + <span class="number">1</span>, size)</span><br><span class="line">                 g.pop() <span class="comment"># 回溯恢复现场</span></span><br><span class="line">        <span class="comment"># 新开一组，插入 p[idx]</span></span><br><span class="line">        group[size] = [cur]</span><br><span class="line">        backtrace(idx + <span class="number">1</span>, size + <span class="number">1</span>)</span><br><span class="line">        group[size] = [] <span class="comment"># 回溯恢复现场</span></span><br><span class="line">    </span><br><span class="line">    backtrace(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="状压-DP">状压 DP</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DFS之搜索顺序——AcWing 1118. 分成互质组</span></span><br><span class="line"><span class="comment"># 状压 DP</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    p = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">    <span class="comment"># 求出所有互质的一对数</span></span><br><span class="line">    coprime = &#123;(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> p <span class="keyword">for</span> y <span class="keyword">in</span> p <span class="keyword">if</span> gcd(x, y) == <span class="number">1</span>&#125;</span><br><span class="line">    dp = [n] * (<span class="number">1</span> &lt;&lt; n) <span class="comment"># 2^n</span></span><br><span class="line">    <span class="comment"># 使用二进制状态表示出所有可能的分组的情况</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查当前状态的所有元素是否满足组内互质</span></span><br><span class="line">    <span class="comment"># all 中 iterator 为空时也返回 True，满足单个元素的答案情况</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">mask</span>):</span><br><span class="line">        <span class="comment"># 使用二进制保存当前组中包含的数，1为包含，0为不包含</span></span><br><span class="line">        <span class="comment"># x &gt;&gt; i &amp; 1用来判断第i位是0还是1</span></span><br><span class="line">        g = [p[idx] <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(n) <span class="keyword">if</span> mask &gt;&gt; idx &amp; <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">all</span>((g[i], g[j]) <span class="keyword">in</span> coprime <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(g)) </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(g)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从小到大转移，枚举子集的状压 DP</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1</span> &lt;&lt; n):</span><br><span class="line">        <span class="comment"># 满足组内互质的二进制对应分组</span></span><br><span class="line">        <span class="keyword">if</span> helper(i):</span><br><span class="line">            dp[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 枚举一半子集即可，剪枝</span></span><br><span class="line">        j, split = (i - <span class="number">1</span>) &amp; i, i &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 状压 DP</span></span><br><span class="line">        <span class="keyword">while</span> j &gt; split:</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i], dp[j] + dp[i^j])</span><br><span class="line">            j = (j - <span class="number">1</span>) &amp; i</span><br><span class="line">    <span class="built_in">print</span>(dp[-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幻梦的结束，新的道路</title>
      <link href="/2023/02/16/%E5%B9%BB%E5%BF%B5%E7%9A%84%E7%BB%93%E6%9D%9F%EF%BC%8C%E6%96%B0%E7%9A%84%E9%81%93%E8%B7%AF/"/>
      <url>/2023/02/16/%E5%B9%BB%E5%BF%B5%E7%9A%84%E7%BB%93%E6%9D%9F%EF%BC%8C%E6%96%B0%E7%9A%84%E9%81%93%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="99b578174e836f0497376b7996094c4bf34ebf84a3168f589f7df07843d92739">2bf269d8e65cef7bb83dba10b47abf7e61e64b834995cac6807f56277c1b4294c40da79de9a888ab280799dbc0a3e9633ad3b9318cf53fdfb216e14ccf875e0fdeaeb60693ede54da875e8f805b7b32fe910e1411e1a5e3a8b2c0b27a289a943aa2ffcb0c9b94efb388a151d67be5d7ae3f862beb957d9a57da7e9ff60fcd860f9a06610448e3dc8589203a7a937463ce1b937408c5cfcacbf0e762fe28b32eab28039570fbf7313b3fbd90bab2e220d672840739018c3039e744612323db69ea9df8b25b462c1db5e3957319e035faf8ff7671fc2b405ce93685a8aa88740254d42e442a0844a292fbd98a254b5dcb0716b9dd905f465c2f2a893f9518880f52e19b29100c79040dd714d5bc2e37d9130c4f34f41c34f45273f3e2b10cb5e08544ca5585219819c7db1c537e128de935ded8c629117ceb02daebcb3291b11358f80eb5d55f526262373f4babc6f35bfdb7d06bbafa86a949a4f9a9d53367d5145212008dce5be42171600106e50832cfe6cffc5484af25d81345f22c8c08000847554cf10491c21648e631b8ff70ef5057b93e691d67ccdee0edbedcb4d9665d178136ebe57676fac0fdc26932448bc27ee498215ed5c9b65a665020468eb47e5a71b035ecf5d14e870eaf77d74a1ba1cf6727f891ed5834c2ef12ea5cd65493553d6b2ec67b68fcd5ed1ca8d5fa670b204cd6631dbb853d8f319d9b1af3dc709ee68d3165b1be9fe56150bbd6b8d931843e4db6aeb31c1e2e6b79ce8dfdb75b8d3f7991323c666a7c08dcff1eaba83011c1b9669d898b9895b577af09cdbf93bb1779f63fe8cee1a792e4ecc6c92be03584e86d5a1aa4dce789023528aa1235bf4c6ccb1ec9ac07abfafe03d9532f4baed832d5853de5838325352d98b54855150d9a27a0d38516f10cd8c1f049df0f2552b8d9cd63a2e851b0a80836f008557ec0d18322baf0e195e6d77ac28179dab41cad97fa5039b898b91dedefb9d42898cde90ca43f58c68ac8d031920b7c3a3b1d75f68a7a786069ef72413cbafc978066c99e317d19ceb0e23601a3ff784b35ae8ceb4266a4ef9329a7cb7b6f8674d5b0c122cb92bf83e0ebc8a5d33f792f0ed7e50a3fb759ceff98c971153b3277f855261f8856f21f10d9ea5cb00bd40804e2fac60b2b2d9cfeada3a6622d8df0f46098757e176fdef5ad47026dcfc1260652a4df84e93a3b94f4f3cd46f9ec7f70509cd1ff8ab84ef9ecaffe2c0a9b3b190419da704e1436fcb2ef63d1d90e9d0d537a7504737154c3d9bae70d505ef8cb5e5682314bdeb7f9cf7a283380fe4dec31177f9c5edbff2add017eec130494f7e6936d5f74fde3b84fa29875e1c0f746f231ea292e4408d871221240d68b8dc12c4d7721f8cb8af2ee960d916597951129c210955aab1a92bf7c8090059fd942914d2e69b22d6abf4ed5b8008cd292c6e7dfaa3201d9d931771faadfdf8b28fbf43ad65fa798032099e0ec73ac0a229d63acdafc42eb7c323b261e073251b21da6f093e1655f6dede400c59f6537a8c9cfd73614aff1048e27ee56f3df8f909f58d7f6de994619c868e4f76379209fc3c41aa4fb0c6fac489bf5dc980b9b80f68695c3935278ea5d1b1b49ea063bd0c89bd650503363dd55696165da94ba40877d98f0e3f48c4f70c56079ed8c317c7f3fb5ffe8c9332562b21e71ee13d1543b27b92ddcc397ba97c2db0e025008c5036475117c577174e6b6ca4ed4bff2e7a23427c3b69f5e0039c5345c47fa5554d7b3b47d2bb02248f580cb4fe403e3607d50da8ac3a609d1b6bd20af6a0c1bd51c1a87b4409bd33247483e8feb6f24d161d01ce33a1084bb7d6d827b5c09932f00544fcffce57080379369380f9e177557c573520d8b54e4b131d86037fb18c9c55c23187c8621fe6456db59e8f0affc413a60d11d12deb059e8f153cae4d6ea3f220d11e982f6041f6fb7aded5f6963e84c3fe50a9a37a3c0b4df4304680329c15ad135110ddc5f425aa533af45867e3d83054ffdc5acad0c2364aee27defded220b609d1aa4c27f9a38f7fa8f695f5f7d05dca0d209a90a58534e8951b135d3f781169e63e402e9d0eeb50e7c130cdc3bbb05367616ad6a6a39fc298d939b78c69809470971901d42fcf78f73559b9bcf9bf32a95ebb92a0d804190bfb2f244d359fc3ce5fab24a14d2817340cca06ea4e066cd7f3292dcce19450f28c98caf1a454a6ea1c464ba031047dc7664d8b36e43d1dd74cccf4b60ece7a8b42af028f337cec9bdf4b70fa44e33b168ca4e06becb7ac8e828d67544fc76025fc7a0ad894a4b444e2a17990c63c998a8f8c09f9b5fcb397433366f437148d90dc1d87f46d9ebbfa7eeb5c923688712a59e4eb239f3466092b07b06301de806aefccbbc113185205f6ac5102bf6d2e43b29dafcdf2c4511922a17a8586f531386efaffe7799c3fb9fc94592f4ca372318b4c673e307c329d35097b812f51afcefe41fb4caca3a05b54b57668b51d62b1cb7b191b96eb2eb7a065d772abc9bc689f1a5428241a0145bb87f1393be655bf49d995728d7696fd4157b04c7832bb5f0b7f8931dbdf523e3d7065395572ced53896aad22ca72e69a20b8e3d89fc1bb9477bde2f145f0fb45efb2494ec22a8855aaf203f32a26129fab68e9679967c14727da</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">🐶嘿嘿, 你没有权限进入呢！🐕.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1.2 BFS中的多源BFS-双端队列BFS-最小步数模型</title>
      <link href="/2023/01/31/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-20230131-2-1-2-BFS%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%BA%90BFS-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97BFS-%E6%9C%80%E5%B0%8F%E6%AD%A5%E6%95%B0%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/01/31/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-20230131-2-1-2-BFS%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%BA%90BFS-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97BFS-%E6%9C%80%E5%B0%8F%E6%AD%A5%E6%95%B0%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="2-1-2-BFS中的多源BFS-双端队列BFS-最小步数模型">2.1.2 BFS中的多源BFS-双端队列BFS-最小步数模型</h1><h2 id="一-多源BFS——求解到最近的一个起点的距离">一. 多源BFS——求解到最近的一个起点的距离</h2><p>起点不唯一，求到多个源点中距离最短的路径。</p><p>注意这和多源最短路是不同的，多源最短路是求到所有源点分别的最短距离，这里求解的是到最近的源点的距离，只取一个值。</p><p>这种问题可以转化为单源最短路问题。假想一个“虚拟“源点，从”虚拟“源点到各个起点的距离都是0，然后从”虚拟“源点开始BFS遍历。实际求解释不需要构造这个虚拟源点，只需要刚开始时将所有起点都入队列即可。</p><h3 id="1-AcWing-173-矩阵距离">1. <a href="https://www.acwing.com/problem/content/175/">AcWing 173. 矩阵距离</a></h3><h4 id="C">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多源BFS——AcWing 173. 矩阵距离</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = N * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line">PII q[M];</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span> , tt = <span class="number">-1</span>;<span class="comment">// 注意这里tt从-1开始</span></span><br><span class="line">    <span class="comment">// 分别标记队列要取出结点的位置，存取结点的前一个位置</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="comment">// 虚源点的思想，假设所有源点都和虚源点连通，并且距离为0</span></span><br><span class="line">    <span class="comment">// 将所有源点入队列即可</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                q[++ tt] = &#123;i, j&#125;;</span><br><span class="line">                dist[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123;</span><br><span class="line">        PII t = q[hh ++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++ i)&#123;</span><br><span class="line">            <span class="type">int</span> a = t.x + dx[i], b = t.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (dist[a][b]  != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            q[++ tt] = &#123;a, b&#125;;</span><br><span class="line">            dist[a][b] = dist[t.x][t.y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);<span class="comment">// 注意这里输入间没有空格，要采用字符串读取   </span></span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m - <span class="number">1</span>; ++ j)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dist[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dist[i][m<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多源BFS——AcWing 173. 矩阵距离</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    g = [<span class="built_in">list</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    dist = [[-<span class="number">1</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    dx = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    dy = [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>():</span><br><span class="line">        q = deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> g[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    q.append((i, j))</span><br><span class="line">                    dist[i][j] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            x, y = q.popleft()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): </span><br><span class="line">                a, b = x + dx[i], y + dy[i]</span><br><span class="line">                <span class="keyword">if</span> a &lt; <span class="number">0</span> <span class="keyword">or</span> a &gt;= n <span class="keyword">or</span> b &lt; <span class="number">0</span> <span class="keyword">or</span> b &gt;= m:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> dist[a][b] != -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                q.append((a, b))</span><br><span class="line">                dist[a][b] = dist[x][y] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    bfs()</span><br><span class="line">    <span class="comment"># for i in range(n):</span></span><br><span class="line">    <span class="comment">#     for j in range(m):</span></span><br><span class="line">    <span class="comment">#         print(dist[i][j], end=&quot; &quot;)</span></span><br><span class="line">    <span class="comment">#     print()</span></span><br><span class="line">    [<span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join([<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> r])) <span class="keyword">for</span> r <span class="keyword">in</span> dist] <span class="comment"># 速度快很多</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="二-双端队列BFS——01BFS">二. 双端队列BFS——01BFS</h2><p>边权不唯一，既有0又有1(0 and not 0)</p><p>注意建图思想，节点间有两种连通方式，一种不需要操作，一种需要操作且操作花费相同，此时就可以转为01边权。</p><p>这种问题可以使用双端队列处理。边权为0的插入队头，边权为1的插入队尾。这样维持了两段性和单调性。</p><p>注意这种题目中，一个节点可能会入队多次从而更新多次。当作特殊的dijkstra算法来写。</p><h3 id="1-AcWing-175-电路维修">1.<a href="https://www.acwing.com/problem/content/177/">AcWing 175. 电路维修</a></h3><p>注意本题的性质——有一半的点不可达。与起点行列和的奇偶性不同的节点，就不可达。原因在于斜着走奇偶坐标一定是同时加减变化。这种性质保证了不会同时走一个方格中的两个对角线方向，从而电路一定是连通的，从而才能使用BFS解决这道题。否则使用BFS可能不符题意。</p><p>需要将 「电线所在方格的四个点」 与 「方格坐标」 对应起来，因此在这里引入了 两对对应的下标偏移~</p><h4 id="C-2">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双端队列BFS——AcWing 175. 电路维修 </span></span><br><span class="line"><span class="comment">// 边权不唯一，既有0又有1(0 and not 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, M = N * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"><span class="comment">// 这里要注意g[N][N]存的是边的状态图，而dist[N][N]存的是节点间的距离</span></span><br><span class="line"><span class="comment">// 因此两者的坐标是不同的，前者是边的坐标，后者是节点的坐标，不能混淆，需要分别进行定义表示</span></span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="comment">// 类似dijkstra算法，一个节点会多次入队，需要判重数组，防止多次更新</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist); <span class="comment">// 初始距离为无穷大</span></span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    deque&lt;PII&gt; q;</span><br><span class="line">    q.<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> cs[] = <span class="string">&quot;\\/\\/&quot;</span>; <span class="comment">// 四个方向通路时的状态，以左上角方格为起点顺时针记录，呈 X 型</span></span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;; <span class="comment">// 节点的对应坐标</span></span><br><span class="line">    <span class="comment">// 指经过此方向的电线后可到达的点，以左上角方格顺时针编号</span></span><br><span class="line">    <span class="type">int</span> ix[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, iy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;; <span class="comment">// 边的对应坐标，注意这里的相对坐标也是相对节点而言的，因为入队的是节点</span></span><br><span class="line">    <span class="comment">// 指此方向的电线将经过的田子格（边状态），以左上角方格顺时针编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        PII t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop_front</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[t.x][t.y]) <span class="keyword">continue</span>; <span class="comment">// 不重复更新，类堆优化 Dijkstra 的判重方式</span></span><br><span class="line">        st[t.x][t.y] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对电线的走向、走过的方格进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ )&#123;</span><br><span class="line">            <span class="type">int</span> a = t.x + dx[i], b = t.y + dy[i]; <span class="comment">// 节点的坐标-&gt;记录节点距离</span></span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt; n || b &lt; <span class="number">0</span> || b &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 注意这里上界是n和m，而不是n-1和m-1</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> ca = t.x + ix[i], cb = t.y + iy[i]; <span class="comment">// 边的坐标-&gt;读边的当前状态</span></span><br><span class="line">            <span class="type">int</span> d = dist[t.x][t.y] + (g[ca][cb] != cs[i]);</span><br><span class="line">            <span class="comment">// 根据边的状态是否是连通状态来判断边权</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (d &lt; dist[a][b])&#123; <span class="comment">// 只有距离更短才进行更新</span></span><br><span class="line">                dist[a][b] = d;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (g[ca][cb] != cs[i]) q.<span class="built_in">push_back</span>(&#123;a, b&#125;);</span><br><span class="line">                <span class="keyword">else</span> q.<span class="built_in">push_front</span>(&#123;a, b&#125;);</span><br><span class="line">                <span class="comment">// 边权为0的插入队头，边权为1的插入队尾。这样维持了两段性和单调性。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n][m];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T -- )&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">bfs</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">0x3f3f3f3f</span>) <span class="built_in">puts</span>(<span class="string">&quot;NO SOLUTION&quot;</span>);</span><br><span class="line">        <span class="comment">// if (n + m &amp; 1) puts(&quot;NO SOLUTION&quot;); </span></span><br><span class="line">        <span class="comment">// 与起点行列和的奇偶性不同的节点，就不可达</span></span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-2">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双端队列BFS——AcWing 175. 电路维修 </span></span><br><span class="line"><span class="comment"># 边权不唯一，既有0又有1(0 and not 0)</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    es = <span class="string">&quot;\\/\\/&quot;</span></span><br><span class="line">    <span class="comment"># 四个方向通路时的状态，以左上角方格为起点顺时针记录，呈 X 型</span></span><br><span class="line">    d_x, d_y = [-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 节点的对应坐标，指经过此方向的电线后可到达的点，以左上角方格顺时针编号</span></span><br><span class="line">    d_ex, d_ey = [-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 边的对应坐标，注意这里的相对坐标也是相对节点而言的，因为入队的是节点</span></span><br><span class="line">    <span class="comment"># 指此方向的电线将经过的田子格（边状态），以左上角方格顺时针编号</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>():</span><br><span class="line">        dist = [[<span class="number">1e9</span>] * (m + <span class="number">1</span>)  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># 一定注意这里上界是n和m，而不是n-1和m-1</span></span><br><span class="line">        dist[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        dq = deque([(<span class="number">0</span>, <span class="number">0</span>)])</span><br><span class="line">        vis = <span class="built_in">set</span>()</span><br><span class="line">        <span class="comment"># 不重复更新，类堆优化 Dijkstra 的判重方式</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> dq:</span><br><span class="line">            x, y = dq.popleft()</span><br><span class="line">            <span class="keyword">if</span> (x, y) <span class="keyword">in</span> vis:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            vis.add((x, y))</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> ch, dx, dy, dex, dey <span class="keyword">in</span> <span class="built_in">zip</span>(es, d_x, d_y, d_ex, d_ey):</span><br><span class="line">                nx, ny = x + dx, y + dy</span><br><span class="line">                <span class="keyword">if</span> nx &lt; <span class="number">0</span> <span class="keyword">or</span> nx &gt; n <span class="keyword">or</span> ny &lt; <span class="number">0</span> <span class="keyword">or</span> ny &gt; m:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                ex, ey = x + dex, y + dey</span><br><span class="line">                d = dist[x][y] + <span class="built_in">int</span>(g[ex][ey] != ch)</span><br><span class="line">                <span class="comment"># 根据边的状态是否是连通状态来判断边权</span></span><br><span class="line">                <span class="keyword">if</span> d &lt; dist[nx][ny]:</span><br><span class="line">                    dist[nx][ny] = d</span><br><span class="line">                    <span class="keyword">if</span> g[ex][ey] == ch:</span><br><span class="line">                        dq.appendleft((nx, ny))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        dq.append((nx, ny))</span><br><span class="line">                    <span class="comment"># 边权为0的插入队头，边权为1的插入队尾</span></span><br><span class="line">                    <span class="comment"># 这样维持了两段性和单调性</span></span><br><span class="line">        <span class="keyword">return</span> dist[n][m]    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">        n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">        g = [<span class="built_in">input</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="comment"># 这里要注意g存的是边的状态图，而dist存的是节点间的距离</span></span><br><span class="line">        res = bfs()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NO SOLUTION&quot;</span> <span class="keyword">if</span> res == <span class="number">1e9</span> <span class="keyword">else</span> res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="三-最小步数模型——状态图中的搜索">三. 最小步数模型——状态图中的搜索</h2><p>最小步数-&gt;整体视为一个状态，状态的变换的最小步数(状态本身作为一个点，每次变换视为一步，问题是状态之间的逻辑关系)</p><p>以棋盘为例进行说明，最短路模型指求解棋盘中某一点到另一点的最短距离，而最小步数模型将棋盘整体的布局视为一个状态，通过对棋盘进行最少的操作变换得到新的棋局状态</p><p>搜索的不是一个具体的图，每个节点不是一个具体的点。每个节点都是一个状态的抽象，边是状态间的变换操作，图是状态转移的有向图。</p><p>其本质就是在所有状态构成的状态转换有向图中进行最短距离搜索，只不过状态的具体表示是可千变万化的，需要将具体问题转化为状态转移问题，因为需要重点思考状态的存储表示和变换操作的实现。</p><p>这种题目思路相对简单，但代码比较难写</p><p>状态图的存储一般使用哈希法（手写哈希函数，康托展开，map）。</p><p>由于数组不方便进行存储、逻辑判断等操作，将状态以字符串形式进行存储，但进行变换操作时为了具体形象，需要转换为数组进行操作</p><p>eg.八数码</p><h3 id="1-AcWing-1107-魔板">1.<a href="https://www.acwing.com/problem/content/1109/">AcWing 1107. 魔板</a></h3><p>本题是一个重点要掌握的外部搜索的的题。外部表示往往涉及状态表示和状态转移。</p><p>本题的两大难点：</p><ol><li class="lvl-3"><p>状态表示</p></li></ol><ul class="lvl-0"><li class="lvl-3"><p>如何把状态放到队列里</p></li><li class="lvl-3"><p>如何记录每个状态的距离</p></li></ul><ol start="2"><li class="lvl-3"><p>状态转移</p></li></ol><p>本题状态表示比较复杂，每个状态都是一个3 X 3的小矩阵。</p><p>一种比较简单的方式是使用字符串来表示状态，将二维矩阵转化为一维字符串（展成一行）。入队时使用queue<string> queue，记录距离时使用哈希表unordered_map&lt;string, int&gt; dist。</p><p>在进行状态转移时，首先将字符串变回矩阵（可以是想象的），然后进行转移——枚举上下左右，最后将矩阵再变回字符串。</p><p>这里要用到一个常用技巧：二维坐标与一维坐标的转换。设矩阵大小为n X m，元素二维坐标为(x, y)(x为行号，y为列号)，一维坐标是k，则：$$x = k / n, y = k % n$$<br>$$ k = x * n + y$$</p><p>注意这里要求一维序列和二维矩阵都要从0开始计数。</p><p>按序输出往往意味着在处理时就按照要求的顺序的进行处理，而不是在求解完后再进行排序。本题要求按字典序输出，则我们只需在处理时按&quot;A&quot;、“B”、&quot;C&quot;的顺序进行处理即可。</p><h4 id="C-3">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS之最小步数模型——外部搜索——AcWing 1107. 魔板  </span></span><br><span class="line"><span class="comment">// 写代码时先搭框架再扣细节</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[<span class="number">2</span>][<span class="number">4</span>]; </span><br><span class="line"><span class="comment">// 具体表示当前状态，方便进行转换</span></span><br><span class="line">unordered_map&lt;string, pair&lt;<span class="type">char</span>, string&gt;&gt; pre;</span><br><span class="line"><span class="comment">// 记录操作序列和前一个状态，注意要将操作的类型一并存储</span></span><br><span class="line"><span class="comment">// 需要注意状态图和相关属性的存储使用哈希表，其中每个状态用字符串表示-&gt;状态无法直接用坐标刻画，而是有其整体内容刻画</span></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt; dist;</span><br><span class="line"><span class="comment">// 存取每个状态的变换次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前状态对应的二维矩阵</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ ) g[<span class="number">0</span>][i] = state[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">7</span>, j = <span class="number">0</span>; j &lt; <span class="number">4</span>; i --, j ++) g[<span class="number">1</span>][j] = state[i];</span><br><span class="line">    <span class="comment">// 注意第二行是反序（正反指数字大小顺序4</span></span><br><span class="line">    <span class="comment">// 我们在字符串表示时，为方便，第二行也使用了正序，但转为矩阵时要变回反序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前状态对应的一维序列</span></span><br><span class="line"><span class="function">string <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ ) res += g[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span>; i -- ) res += g[<span class="number">1</span>][i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别实现所有操作函数</span></span><br><span class="line"><span class="comment">// 交换上下两行</span></span><br><span class="line"><span class="function">string <span class="title">move0</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>(state);</span><br><span class="line">    <span class="comment">// 转换成二维矩阵</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ ) <span class="built_in">swap</span>(g[<span class="number">0</span>][i], g[<span class="number">1</span>][i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">    <span class="comment">// 返回对应的一维序列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将最右边的一列插入到最左边</span></span><br><span class="line"><span class="function">string <span class="title">move1</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>(state);</span><br><span class="line">    <span class="comment">// 转换成二维矩阵</span></span><br><span class="line">    <span class="type">char</span> v0 = g[<span class="number">0</span>][<span class="number">3</span>], v1 = g[<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="comment">// 先把最右边一列抽出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        g[<span class="number">0</span>][i] = g[<span class="number">0</span>][i - <span class="number">1</span>];</span><br><span class="line">        g[<span class="number">1</span>][i] = g[<span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其余列右移</span></span><br><span class="line">    g[<span class="number">0</span>][<span class="number">0</span>] = v0, g[<span class="number">1</span>][<span class="number">0</span>] = v1;</span><br><span class="line">    <span class="comment">// 将最右边的一列插入到最左边</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">    <span class="comment">// 返回对应的一维序列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 魔板中央对的4个数作顺时针旋转</span></span><br><span class="line"><span class="function">string <span class="title">move2</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>(state);</span><br><span class="line">    <span class="comment">// 转换成二维矩阵</span></span><br><span class="line">    <span class="type">char</span> v = g[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 由于旋转的大小是固定的，直接枚举即可</span></span><br><span class="line">    g[<span class="number">0</span>][<span class="number">1</span>] = g[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    g[<span class="number">1</span>][<span class="number">1</span>] = g[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    g[<span class="number">1</span>][<span class="number">2</span>] = g[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">    g[<span class="number">0</span>][<span class="number">2</span>] = v;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">    <span class="comment">// 返回对应的一维序列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(string start, string end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start == end) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">queue&lt;string&gt; q;</span><br><span class="line">    <span class="comment">// string队列</span></span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 初始状态入队并标记</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) <span class="comment">// 队列不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 取出队头元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举所有可能的变换状态</span></span><br><span class="line">        string m[<span class="number">3</span>];</span><br><span class="line">        m[<span class="number">0</span>] = <span class="built_in">move0</span>(t);</span><br><span class="line">        m[<span class="number">1</span>] = <span class="built_in">move1</span>(t);</span><br><span class="line">        m[<span class="number">2</span>] = <span class="built_in">move2</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (!dist.<span class="built_in">count</span>(m[i])) <span class="comment">// 使用count函数查询是否已被搜寻过</span></span><br><span class="line">            &#123;</span><br><span class="line">                pre[m[i]] = &#123;<span class="string">&#x27;A&#x27;</span> + i, t&#125;;</span><br><span class="line">                <span class="comment">// 记录操作序列和前一个状态</span></span><br><span class="line">                dist[m[i]] = dist[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (m[i] == end) <span class="keyword">return</span> dist[m[i]];</span><br><span class="line">                <span class="comment">// 变换后的状态为目标状态时返回</span></span><br><span class="line">                q.<span class="built_in">push</span>(m[i]);</span><br><span class="line">                <span class="comment">// 入队  </span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string start = <span class="string">&quot;12345678&quot;</span>, end;</span><br><span class="line">    <span class="comment">// 我们在字符串表示时，为方便，第二行也使用了正序，但转为矩阵时要变回反序</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> s[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        end += *s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int x;</span></span><br><span class="line">    <span class="comment">// string start, end;</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; 8; i ++ )</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cin &gt;&gt; x;</span></span><br><span class="line">    <span class="comment">//     end += char(x + &#x27;0&#x27;);</span></span><br><span class="line">    <span class="comment">//     // 为了方便状态表示，转化为字符</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= 8; i ++ ) start += char(&#x27;0&#x27; + i);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> step = <span class="built_in">bfs</span>(start, end);</span><br><span class="line">    <span class="comment">// 传入初始状态和目标状态</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; step &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (step &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="comment">// 反向得到搜寻序列</span></span><br><span class="line">        <span class="keyword">while</span> (end != start)</span><br><span class="line">        &#123;</span><br><span class="line">            res += pre[end].first;</span><br><span class="line">            end = pre[end].second;</span><br><span class="line">            <span class="comment">// 这里注意要使用pair&lt;char, string&gt;才方便倒退</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 注意反转</span></span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不使用dist">不使用dist</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS之最小步数模型——外部搜索——AcWing 1107. 魔板  </span></span><br><span class="line"><span class="comment">// 写代码时先搭框架再扣细节</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> g[<span class="number">2</span>][<span class="number">4</span>]; </span><br><span class="line"><span class="comment">// 具体表示当前状态，方便进行转换</span></span><br><span class="line">unordered_map&lt;string, pair&lt;string, string&gt;&gt; pre;</span><br><span class="line"><span class="comment">// 记录操作序列和前一个状态，注意要将操作的类型一并存储</span></span><br><span class="line"><span class="comment">// 需要注意状态图和相关属性的存储使用哈希表，其中每个状态用字符串表示-&gt;状态无法直接用坐标刻画，而是有其整体内容刻画</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前状态对应的二维矩阵</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ ) g[<span class="number">0</span>][i] = state[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">7</span>, j = <span class="number">0</span>; j &lt; <span class="number">4</span>; i --, j ++) g[<span class="number">1</span>][j] = state[i];</span><br><span class="line">    <span class="comment">// 注意第二行是反序（正反指数字大小顺序4</span></span><br><span class="line">    <span class="comment">// 我们在字符串表示时，为方便，第二行也使用了正序，但转为矩阵时要变回反序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前状态对应的一维序列</span></span><br><span class="line"><span class="function">string <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ ) res += g[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt;= <span class="number">0</span>; i -- ) res += g[<span class="number">1</span>][i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别实现所有操作函数</span></span><br><span class="line"><span class="comment">// 交换上下两行</span></span><br><span class="line"><span class="function">string <span class="title">move0</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>(state);</span><br><span class="line">    <span class="comment">// 转换成二维矩阵</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ ) <span class="built_in">swap</span>(g[<span class="number">0</span>][i], g[<span class="number">1</span>][i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">    <span class="comment">// 返回对应的一维序列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将最右边的一列插入到最左边</span></span><br><span class="line"><span class="function">string <span class="title">move1</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>(state);</span><br><span class="line">    <span class="comment">// 转换成二维矩阵</span></span><br><span class="line">    <span class="type">char</span> v0 = g[<span class="number">0</span>][<span class="number">3</span>], v1 = g[<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="comment">// 先把最右边一列抽出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        g[<span class="number">0</span>][i] = g[<span class="number">0</span>][i - <span class="number">1</span>];</span><br><span class="line">        g[<span class="number">1</span>][i] = g[<span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其余列右移</span></span><br><span class="line">    g[<span class="number">0</span>][<span class="number">0</span>] = v0, g[<span class="number">1</span>][<span class="number">0</span>] = v1;</span><br><span class="line">    <span class="comment">// 将最右边的一列插入到最左边</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">    <span class="comment">// 返回对应的一维序列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 魔板中央对的4个数作顺时针旋转</span></span><br><span class="line"><span class="function">string <span class="title">move2</span><span class="params">(string state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>(state);</span><br><span class="line">    <span class="comment">// 转换成二维矩阵</span></span><br><span class="line">    <span class="type">char</span> v = g[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 由于旋转的大小是固定的，直接枚举即可</span></span><br><span class="line">    g[<span class="number">0</span>][<span class="number">1</span>] = g[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    g[<span class="number">1</span>][<span class="number">1</span>] = g[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">    g[<span class="number">1</span>][<span class="number">2</span>] = g[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">    g[<span class="number">0</span>][<span class="number">2</span>] = v;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">    <span class="comment">// 返回对应的一维序列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(string start, string end)</span></span>&#123;</span><br><span class="line">queue&lt;string&gt; q;</span><br><span class="line">    <span class="comment">// string队列</span></span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    pre[start] = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 初始状态入队</span></span><br><span class="line">    string op[<span class="number">3</span>] = &#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) <span class="comment">// 队列不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 取出队头元素</span></span><br><span class="line">        <span class="keyword">if</span> (t == end) <span class="comment">// 变换后的状态为目标状态时返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举所有可能的变换状态</span></span><br><span class="line">        string m[<span class="number">3</span>];</span><br><span class="line">        m[<span class="number">0</span>] = <span class="built_in">move0</span>(t);</span><br><span class="line">        m[<span class="number">1</span>] = <span class="built_in">move1</span>(t);</span><br><span class="line">        m[<span class="number">2</span>] = <span class="built_in">move2</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (!pre.<span class="built_in">count</span>(m[i])) <span class="comment">// 使用count函数查询是否已被搜寻过</span></span><br><span class="line">            &#123;</span><br><span class="line">                pre[m[i]] = &#123;pre[t].first + op[i], t&#125;;</span><br><span class="line">                <span class="comment">// 记录操作序列和前一个状态</span></span><br><span class="line">                q.<span class="built_in">push</span>(m[i]);</span><br><span class="line">                <span class="comment">// 入队  </span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string start = <span class="string">&quot;12345678&quot;</span>, end;</span><br><span class="line">    <span class="comment">// 我们在字符串表示时，为方便，第二行也使用了正序，但转为矩阵时要变回反序</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> s[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        end += *s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bfs</span>(start, end);</span><br><span class="line">    <span class="comment">// 传入初始状态和目标状态</span></span><br><span class="line">    <span class="type">int</span> step = pre[end].first.<span class="built_in">length</span>();</span><br><span class="line">    cout &lt;&lt; step &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (step)</span><br><span class="line">        cout &lt;&lt; pre[end].first &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 注意最后输出时需要先判断，避免第二个换行符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-3">python</h4><p>python对一维序列进行操作比较方便，因此不必转化为二维矩阵。</p><h5 id="复杂版">复杂版</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS之最小步数模型——外部搜索——AcWing 1107. 魔板  </span></span><br><span class="line"><span class="comment">#  复杂版</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start = <span class="string">&quot;12345678&quot;</span></span><br><span class="line">    end = <span class="string">&quot;&quot;</span>.join(<span class="built_in">input</span>().split())</span><br><span class="line">    g = [[<span class="string">&quot;&quot;</span>] * <span class="number">4</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    pre, dist = &#123;&#125;, &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): </span><br><span class="line">            g[<span class="number">0</span>][i] = state[i]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            g[<span class="number">1</span>][i]= state[<span class="number">7</span> - i]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>():</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            res = res + g[<span class="number">0</span>][i]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            res = res + g[<span class="number">1</span>][<span class="number">3</span> - i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">A</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="built_in">set</span>(state)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            g[<span class="number">0</span>][i], g[<span class="number">1</span>][i] = g[<span class="number">1</span>][i], g[<span class="number">0</span>][i]</span><br><span class="line">        <span class="keyword">return</span> get()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">B</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="built_in">set</span>(state)</span><br><span class="line">        v0, v1 = g[<span class="number">0</span>][<span class="number">3</span>], g[<span class="number">1</span>][<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            g[<span class="number">0</span>][i] = g[<span class="number">0</span>][i - <span class="number">1</span>]</span><br><span class="line">            g[<span class="number">1</span>][i] = g[<span class="number">1</span>][i - <span class="number">1</span>]</span><br><span class="line">        g[<span class="number">0</span>][<span class="number">0</span>], g[<span class="number">1</span>][<span class="number">0</span>] = v0, v1</span><br><span class="line">        <span class="keyword">return</span> get()</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">C</span>(<span class="params">state</span>):</span><br><span class="line">        <span class="built_in">set</span>(state)</span><br><span class="line">        g[<span class="number">0</span>][<span class="number">1</span>], g[<span class="number">0</span>][<span class="number">2</span>], g[<span class="number">1</span>][<span class="number">2</span>], g[<span class="number">1</span>][<span class="number">1</span>] = g[<span class="number">1</span>][<span class="number">1</span>], g[<span class="number">0</span>][<span class="number">1</span>], g[<span class="number">0</span>][<span class="number">2</span>], g[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">return</span> get()</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>():</span><br><span class="line">        q = deque([start])</span><br><span class="line">        pre[start] = (<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        dist[start] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            t = q.popleft()</span><br><span class="line">            <span class="keyword">if</span> t == end:</span><br><span class="line">                <span class="keyword">return</span> dist[t]</span><br><span class="line">            <span class="keyword">for</span> op, <span class="built_in">next</span> <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&quot;ABC&quot;</span>, (A(t), B(t), C(t))):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">next</span> <span class="keyword">not</span> <span class="keyword">in</span> dist:</span><br><span class="line">                    dist[<span class="built_in">next</span>] = dist[t] + <span class="number">1</span></span><br><span class="line">                    pre[<span class="built_in">next</span>] = (op, t)</span><br><span class="line">                    q.append(<span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    step = bfs()</span><br><span class="line">    <span class="built_in">print</span>(step)</span><br><span class="line">    <span class="keyword">if</span> step &gt; <span class="number">0</span>:</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> end == start:</span><br><span class="line">                 <span class="keyword">break</span></span><br><span class="line">            res += pre[end][<span class="number">0</span>]</span><br><span class="line">            end = pre[end][<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(res[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="简化版">简化版</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS之最小步数模型——外部搜索——AcWing 1107. 魔板  </span></span><br><span class="line"><span class="comment"># 简化包含dist版</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start, end = <span class="string">&quot;12345678&quot;</span>, <span class="string">&quot;&quot;</span>.join(<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># A 操作等价于是翻转原字符串，B、C 操作可以在草稿纸上同理推出</span></span><br><span class="line">    <span class="comment"># 无需转数组，可减少代码量</span></span><br><span class="line">    A = <span class="keyword">lambda</span> s: s[::-<span class="number">1</span>]</span><br><span class="line">    B = <span class="keyword">lambda</span> s: s[<span class="number">3</span>] + s[:<span class="number">3</span>] + s[<span class="number">5</span>:] + s[<span class="number">4</span>]</span><br><span class="line">    C = <span class="keyword">lambda</span> s: s[<span class="number">0</span>] + s[<span class="number">6</span>] + s[<span class="number">1</span>] + s[<span class="number">3</span>:<span class="number">5</span>] + s[<span class="number">2</span>] + s[<span class="number">5</span>] + s[<span class="number">7</span>]</span><br><span class="line">    pre, dist = &#123;&#125;, &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>():</span><br><span class="line">        q = deque([start])</span><br><span class="line">        pre[start] = (<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        dist[start] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            t = q.popleft()</span><br><span class="line">            <span class="keyword">if</span> t == end:</span><br><span class="line">                <span class="keyword">return</span> dist[t]</span><br><span class="line">            <span class="keyword">for</span> op, <span class="built_in">next</span> <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&quot;ABC&quot;</span>, (A(t), B(t), C(t))):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">next</span> <span class="keyword">not</span> <span class="keyword">in</span> dist:</span><br><span class="line">                    dist[<span class="built_in">next</span>] = dist[t] + <span class="number">1</span></span><br><span class="line">                    pre[<span class="built_in">next</span>] = (op, t)</span><br><span class="line">                    q.append(<span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    step = bfs()</span><br><span class="line">    <span class="built_in">print</span>(step)</span><br><span class="line">    <span class="keyword">if</span> step &gt; <span class="number">0</span>:</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> end == start:</span><br><span class="line">                 <span class="keyword">break</span></span><br><span class="line">            res += pre[end][<span class="number">0</span>]</span><br><span class="line">            end = pre[end][<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(res[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="不含dist的简化版">不含dist的简化版</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS之最小步数模型——外部搜索——AcWing 1107. 魔板  </span></span><br><span class="line"><span class="comment"># 不含dist的简化版</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    start, end = <span class="string">&quot;12345678&quot;</span>, <span class="string">&quot;&quot;</span>.join(<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="comment"># A 操作等价于是翻转原字符串，B、C 操作可以在草稿纸上同理推出</span></span><br><span class="line">    <span class="comment"># 无需转数组，可减少代码量</span></span><br><span class="line">    A = <span class="keyword">lambda</span> s: s[::-<span class="number">1</span>]</span><br><span class="line">    B = <span class="keyword">lambda</span> s: s[<span class="number">3</span>] + s[:<span class="number">3</span>] + s[<span class="number">5</span>:] + s[<span class="number">4</span>]</span><br><span class="line">    C = <span class="keyword">lambda</span> s: s[<span class="number">0</span>] + s[<span class="number">6</span>] + s[<span class="number">1</span>] + s[<span class="number">3</span>:<span class="number">5</span>] + s[<span class="number">2</span>] + s[<span class="number">5</span>] + s[<span class="number">7</span>]</span><br><span class="line">    pre = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>():</span><br><span class="line">        q = deque([start])</span><br><span class="line">        pre[start] = (<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            t = q.popleft()</span><br><span class="line">            <span class="keyword">if</span> t == end:</span><br><span class="line">                s = pre[t][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">len</span>(s)), s</span><br><span class="line">            <span class="keyword">for</span> op, <span class="built_in">next</span> <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">&quot;ABC&quot;</span>, (A(t), B(t), C(t))):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">next</span> <span class="keyword">not</span> <span class="keyword">in</span> pre:</span><br><span class="line">                    pre[<span class="built_in">next</span>] = (pre[t][<span class="number">0</span>] + op, t)</span><br><span class="line">                    q.append(<span class="built_in">next</span>)</span><br><span class="line">        <span class="keyword">return</span> - <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>.join(bfs()).strip())</span><br><span class="line">    <span class="comment"># 这里最后输出不需要判断操作序列为空的情况是因为strip()去掉了空，避免了第二个换行符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知机（Perceptron)与自适性线性单元（Adaline)学习笔记</title>
      <link href="/2023/01/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%84%9F%E7%9F%A5%E6%9C%BA-%E6%84%9F%E7%9F%A5%E6%9C%BA/"/>
      <url>/2023/01/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%84%9F%E7%9F%A5%E6%9C%BA-%E6%84%9F%E7%9F%A5%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="84f80de407cd991e425a37e1aa0470dd9832bcedf867da2f980a2baa08ddf08e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">🐶嘿嘿, 你没有权限进入呢！🐕.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1.1 BFS中的Flood Fill和最短路模型</title>
      <link href="/2023/01/24/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-20230131-2-1-1-BFS%E4%B8%AD%E7%9A%84Flood-Fill%E5%92%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%E6%A8%A1%E5%9E%8B/"/>
      <url>/2023/01/24/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-20230131-2-1-1-BFS%E4%B8%AD%E7%9A%84Flood-Fill%E5%92%8C%E6%9C%80%E7%9F%AD%E8%B7%AF%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="2-1-1-BFS中的Flood-Fill和最短路模型">2.1.1 BFS中的Flood Fill和最短路模型</h1><h2 id="BFS特点">BFS特点</h2><ol><li class="lvl-3"><p>求最小-&gt;第一次搜到恰为最小距离</p></li><li class="lvl-3"><p>基于迭代，不会爆栈（一般1M，十万层）</p></li></ol><p>类型最小距离-&gt;从内部一点到另一点的最小距离<br>eg.走迷宫</p><p>最小步数-&gt;整体视为一个状态，状态的变换的最小步数(状态本身作为一个点，每次变换视为一步，问题是状态之间的逻辑关系)<br>eg.八数码</p><h2 id="一-Flood-Fill算法">一. Flood Fill算法</h2><p>可以在线性时间复杂度内，找到某个点所在的连通块</p><p>使用BFS的过程模拟洪水覆盖的过程–从四周开始扩散–填充整个连通块</p><p>连通类型四连通八连通</p><h3 id="1-AcWing-1097-池塘计数">1. <a href="https://www.acwing.com/problem/content/1099/">AcWing 1097. 池塘计数</a></h3><p>注意双层逻辑：先遍历每个格子，每个格子再进行BFS搜索过程。需进行标记–判重。</p><p>BFS使用队列实现，队列中存储下标，二维时可以使用pair</p><p>注意是否开始搜索的判断条件要想清楚</p><p>搜索时注意遍历方法和边界条件</p><h4 id="C">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS中的Flood Fill——AcWing 1097. 池塘计数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII; </span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = N * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> g[N][N]; <span class="comment">// 存图，注意使用char</span></span><br><span class="line">PII q[M]; <span class="comment">// 数组模拟队列时，数组大小为所有元素大小</span></span><br><span class="line"><span class="type">bool</span> st[N][N]; <span class="comment">// 标记是否搜索过，避免重复</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入坐标位置参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx, <span class="type">int</span> sy)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 数组模拟队列。bfs基于迭代，每次调用使用一个队列</span></span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;<span class="comment">// 初始化</span></span><br><span class="line">    <span class="comment">// 分别标记队列要取出结点的位置，存取结点的前一个位置</span></span><br><span class="line">    </span><br><span class="line">    q[<span class="number">0</span>] = &#123;sx, sy&#125;;</span><br><span class="line">    <span class="comment">// 初始状态入队列</span></span><br><span class="line">    st[sx][sy] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 进行标记</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123; <span class="comment">// 队列不为空</span></span><br><span class="line">        PII t = q[hh ++]; <span class="comment">// 取出队头元素</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拓展队列元素</span></span><br><span class="line">        <span class="comment">// 枚举所有可能的移动方向</span></span><br><span class="line">        <span class="comment">// 注意区分四连通和八连通</span></span><br><span class="line">        <span class="comment">// 这里要注意八的遍历方式</span></span><br><span class="line">        <span class="comment">// 暴力枚举3 X 3 矩阵并挖掉中间格子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = t.x - <span class="number">1</span>; i &lt;= t.x + <span class="number">1</span>;++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = t.y - <span class="number">1</span>; j &lt;= t.y + <span class="number">1</span>; ++ j)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i == t.x &amp;&amp; j == t.y) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// 挖掉中间格子</span></span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || j &lt; <span class="number">0</span> || j &gt;= m)  </span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// 注意判断是否越界</span></span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;.&#x27;</span> || st[i][j])      </span><br><span class="line">                <span class="comment">// 是否满足条件 </span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                q[++ tt] = &#123;i, j&#125;;</span><br><span class="line">                <span class="comment">// 满足条件的入列</span></span><br><span class="line">                st[i][j] = <span class="literal">true</span>; </span><br><span class="line">                <span class="comment">// 标记已搜索过</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]); </span><br><span class="line">    <span class="comment">// 注意采用字符串读取方式</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">// 要记录的量：连通块的数量</span></span><br><span class="line">    <span class="comment">// 从头到尾依次遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;W&#x27;</span> &amp;&amp; !st[i][j]) </span><br><span class="line">            <span class="comment">// 是否满足条件</span></span><br><span class="line">            <span class="comment">// 这里的代码的书写的思路是要掌握的，一定不要乱，不要寻求直接找到符合条件的再遍历，而是全部遍历再判断是否符合条件</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">bfs</span>(i, j);</span><br><span class="line">                <span class="comment">// 符合条件的进行广度优先搜索</span></span><br><span class="line">                cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="python">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS中的Flood Fill——AcWing 1097. 池塘计数</span></span><br><span class="line"><span class="comment"># 使用库函数deque，速度更快</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="comment"># 双向队列deque是栈和队列的一种广义实现，是类似于list的容器，可以快速的在队列头部和尾部添加、删除元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这里没有另开查重数组，通过直接改变原数组实现标记</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    g = [<span class="built_in">list</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    d_x = (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    d_y = (-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 不能使用st = [[False]*m]*n这种写法</span></span><br><span class="line">    <span class="comment"># [[0]*n]*m这种方式是直接将[0]*n复制了m遍，是=号复制（注意不是浅拷贝，=与浅拷贝的list id是不同的），</span></span><br><span class="line">    <span class="comment"># 若[0]*n发生了更改，则m个都发生更改。[0]*n作为一个list被共享。</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">sx, sy</span>):</span><br><span class="line">        q = deque([(sx, sy)])</span><br><span class="line">        g[sx][sy] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            x, y = q.popleft()</span><br><span class="line">            <span class="keyword">for</span> dx, dy <span class="keyword">in</span> <span class="built_in">zip</span>(d_x, d_y):</span><br><span class="line">                nx, ny = x + dx, y + dy</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= nx &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= ny &lt; m <span class="keyword">and</span> g[nx][ny] == <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">                    q.append((nx, ny))</span><br><span class="line">                    g[nx][ny] = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(g):</span><br><span class="line">        <span class="keyword">for</span> j, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(line):</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">                bfs(i, j)</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(cnt)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># // BFS中的Flood Fill——AcWing 1097. 池塘计数</span></span><br><span class="line"><span class="comment"># 数组模拟队列    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    g = [<span class="built_in">list</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    d_x = (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    d_y = (-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    q = [<span class="number">0</span>] * (n * m)</span><br><span class="line">    st = [[<span class="literal">False</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="comment"># 不能使用st = [[False]*m]*n这种写法</span></span><br><span class="line">    <span class="comment"># [[0]*n]*m这种方式是直接将[0]*n复制了m遍，是=号复制（注意不是浅拷贝，=与浅拷贝的list id是不同的），</span></span><br><span class="line">    <span class="comment"># 若[0]*n发生了更改，则m个都发生更改。[0]*n作为一个list被共享。</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">sx, sy</span>):</span><br><span class="line">        hh, tt = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        q[<span class="number">0</span>] = (sx, sy)</span><br><span class="line">        st[sx][sy] = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> hh &lt;= tt:</span><br><span class="line">            x, y = q[hh]</span><br><span class="line">            hh += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> dx, dy <span class="keyword">in</span> <span class="built_in">zip</span>(d_x, d_y):</span><br><span class="line">                nx, ny = x + dx, y + dy</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= nx &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= ny &lt; m <span class="keyword">and</span> g[nx][ny] == <span class="string">&#x27;W&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> st[nx][ny]:</span><br><span class="line">                    tt += <span class="number">1</span></span><br><span class="line">                    q[tt] = (nx, ny)</span><br><span class="line">                    st[nx][ny] = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> g[i][j] == <span class="string">&#x27;W&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> st[i][j]:</span><br><span class="line">                bfs(i, j)</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(cnt)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2-AcWing-1098-城堡问题">2. <a href="https://www.acwing.com/problem/content/1100/">AcWing 1098. 城堡问题</a></h3><p>四连通遍历</p><p>取二进制中第k位<br>x &gt;&gt; k &amp; 1<br>本题注意二进制解码的方法</p><h4 id="C-2">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS中的Flood Fill——AcWing 1098. 城堡问题</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>, M = N * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line">PII q[M];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx, <span class="type">int</span> sy)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// 四连通时的写法</span></span><br><span class="line">    <span class="comment">// 常用技巧：使用偏移量表示移动方向</span></span><br><span class="line">    <span class="comment">// 注意这里的方向顺序必须和西北东南的顺序相对应</span></span><br><span class="line">    <span class="comment">// 只是为了方便后面进行二进制解码</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 分别标记队列要取出结点的位置，存取结点的前一个位置</span></span><br><span class="line">    <span class="type">int</span> area = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">    q[<span class="number">0</span>] = &#123;sx, sy&#125;;</span><br><span class="line">    <span class="comment">// 初始状态入队</span></span><br><span class="line">    st[sx][sy] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123; <span class="comment">// 队列不为空</span></span><br><span class="line">        PII t = q[hh ++];</span><br><span class="line">        area ++; </span><br><span class="line">        <span class="comment">// 可以在出队时统计，可以在入队时统计</span></span><br><span class="line">        <span class="comment">// 这里为了避免第一个忘统计，在出队时统计</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拓展队列元素</span></span><br><span class="line">        <span class="comment">// 枚举所有可能的移动方向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++ i)&#123;</span><br><span class="line">            <span class="type">int</span> a = t.x + dx[i], b = t.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 越界判断</span></span><br><span class="line">            <span class="keyword">if</span> (st[a][b]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (g[t.x][t.y] &gt;&gt; i &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 使用位运算，解码二进制</span></span><br><span class="line">            <span class="comment">// x &gt;&gt; i &amp; 1 取出x二进制的第i位</span></span><br><span class="line">            <span class="comment">// 根据第i位是否为1判断是否有墙</span></span><br><span class="line">            <span class="comment">// 这里的顺序能成立是因为按照了西北东南的顺序，</span></span><br><span class="line">            <span class="comment">//且题目规定用1表示西墙，2表示北墙，4表示东墙，8表示南墙</span></span><br><span class="line">            q[++ tt] = &#123;a, b&#125;;</span><br><span class="line">            <span class="comment">// 符合条件的元素入队</span></span><br><span class="line">            st[a][b] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j)</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, area = <span class="number">0</span>; <span class="comment">// 要记录的量：连通块数量和大小（面积）</span></span><br><span class="line">    <span class="comment">// 全部遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (!st[i][j])&#123;</span><br><span class="line">                area = <span class="built_in">max</span>(area, <span class="built_in">bfs</span>(i, j));</span><br><span class="line">                cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; area &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-2">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS中的Flood Fill——AcWing 1098. 城堡问题</span></span><br><span class="line"><span class="comment"># 使用库函数deque</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    g = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    d_x = [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    d_y = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    st = [[<span class="literal">False</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">sx, sy</span>):</span><br><span class="line">        q = deque([[sx, sy]])</span><br><span class="line">        st[sx][sy] = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 不能使用st = [[False]*m]*n这种写法</span></span><br><span class="line">        <span class="comment"># [[0]*n]*m这种方式是直接将[0]*n复制了m遍，是=号复制（注意不是浅拷贝，=与浅拷贝的list id是不同的），</span></span><br><span class="line">        <span class="comment"># 若[0]*n发生了更改，则m个都发生更改。[0]*n作为一个list被共享。</span></span><br><span class="line">        area = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            x, y = q.popleft()</span><br><span class="line">            area += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                nx, ny = x + d_x[i], y + d_y[i]</span><br><span class="line">                <span class="keyword">if</span> nx &lt; <span class="number">0</span> <span class="keyword">or</span> nx &gt;= n <span class="keyword">or</span> ny &lt; <span class="number">0</span> <span class="keyword">or</span> ny &gt;= m:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> st[nx][ny]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> g[x][y] &gt;&gt; i &amp; <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                q.append([nx, ny])</span><br><span class="line">                st[nx][ny] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line">    </span><br><span class="line">    cnt, area = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> st[i][j]:</span><br><span class="line">                area = <span class="built_in">max</span>(area, bfs(i, j))</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(cnt)</span><br><span class="line">    <span class="built_in">print</span>(area)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS中的Flood Fill——AcWing 1098. 城堡问题</span></span><br><span class="line"><span class="comment"># 数组模拟队列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    g = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    d_x = [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">    d_y = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    st = [[<span class="literal">False</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    q = [<span class="number">0</span>] *(m*n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">sx, sy</span>):</span><br><span class="line">        q[<span class="number">0</span>] = [sx, sy]</span><br><span class="line">        st[sx][sy] = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 不能使用st = [[False]*m]*n这种写法</span></span><br><span class="line">        <span class="comment"># [[0]*n]*m这种方式是直接将[0]*n复制了m遍，是=号复制（注意不是浅拷贝，=与浅拷贝的list id是不同的），</span></span><br><span class="line">        <span class="comment"># 若[0]*n发生了更改，则m个都发生更改。[0]*n作为一个list被共享。</span></span><br><span class="line">        area = <span class="number">0</span></span><br><span class="line">        hh, tt = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> hh &lt;= tt:</span><br><span class="line">            x, y = q[hh]</span><br><span class="line">            hh += <span class="number">1</span></span><br><span class="line">            area += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                nx, ny = x + d_x[i], y + d_y[i]</span><br><span class="line">                <span class="keyword">if</span> nx &lt; <span class="number">0</span> <span class="keyword">or</span> nx &gt;= n <span class="keyword">or</span> ny &lt; <span class="number">0</span> <span class="keyword">or</span> ny &gt;= m:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> st[nx][ny]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> g[x][y] &gt;&gt; i &amp; <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                tt += <span class="number">1</span></span><br><span class="line">                q[tt] = [nx, ny]</span><br><span class="line">                st[nx][ny] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line">    </span><br><span class="line">    cnt, area = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> st[i][j]:</span><br><span class="line">                area = <span class="built_in">max</span>(area, bfs(i, j))</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(cnt)</span><br><span class="line">    <span class="built_in">print</span>(area)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3-AcWing-1106-山峰和山谷">3. <a href="https://www.acwing.com/problem/content/1108/">AcWing 1106. 山峰和山谷</a></h3><p>本题要判断每个方格和周围方格的关系</p><h4 id="C-3">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS中的Flood Fill——AcWing 1106. 山峰和山谷</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = N * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N][N];</span><br><span class="line">PII q[M];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx, <span class="type">int</span> sy, <span class="type">bool</span> &amp; has_higher, <span class="type">bool</span> &amp; has_lower)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span> ,tt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 分别标记队列要取出结点的位置，存取结点的前一个位置</span></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    q[<span class="number">0</span>] = &#123;sx, sy&#125;;</span><br><span class="line">    <span class="comment">// 初始状态入队</span></span><br><span class="line">    st[sx][sy] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123; <span class="comment">// 队列不为空</span></span><br><span class="line">        PII t = q[hh ++];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = t.x - <span class="number">1</span>; i &lt;= t.x + <span class="number">1</span>; ++ i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = t.y - <span class="number">1</span>; j &lt;= t.y + <span class="number">1</span>; ++ j)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || j &lt; <span class="number">0</span> || j &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// 判断是否越界</span></span><br><span class="line">                <span class="keyword">if</span> (h[i][j] != h[t.x][t.y])&#123;</span><br><span class="line">                    <span class="comment">// 判断与周围方格的高度关系</span></span><br><span class="line">                        <span class="keyword">if</span> (h[i][j] &gt; h[t.x][t.y]) has_higher = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">else</span> has_lower = <span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">// 不能提前结束遍历</span></span><br><span class="line">                        <span class="comment">// 要把整个连通块都遍历一遍，防止重复</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!st[i][j])&#123;</span><br><span class="line">                        q[++ tt] = &#123;i, j&#125;;</span><br><span class="line">                        <span class="comment">// 入队列</span></span><br><span class="line">                        st[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;   </span><br><span class="line">                <span class="comment">// 注意这里不能先写if(st[i][j]) continue;</span></span><br><span class="line">                <span class="comment">// 只有未遍历过的才能入队列，但在判断四周是否有高低点时与四周点是否遍历过无关</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++ j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> peak = <span class="number">0</span>, valley = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 用来记录山峰和山谷数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有方格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;++ j)</span><br><span class="line">            <span class="keyword">if</span> (!st[i][j])&#123;</span><br><span class="line">                <span class="type">bool</span> has_higher = <span class="literal">false</span>, has_lower = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">bfs</span>(i, j, has_higher, has_lower);</span><br><span class="line">                <span class="keyword">if</span> (!has_higher) peak ++;</span><br><span class="line">                <span class="keyword">if</span> (!has_lower) valley ++;</span><br><span class="line">                <span class="comment">// 这里注意不能使用else，一片区域可能同时成为山峰和山谷</span></span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, peak, valley);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="python-3">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS中的Flood Fill——AcWing 1106. 山峰和山谷</span></span><br><span class="line"><span class="comment"># 使用库函数deque</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    h = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    st = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">sx, sy</span>):</span><br><span class="line">        q = deque([[sx, sy]])</span><br><span class="line">        st[sx][sy] = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        has_higher, has_lower = <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 已经在遍历时判断有不相等</span></span><br><span class="line">        <span class="comment"># 注意这里的逆思维</span></span><br><span class="line">        <span class="comment"># 大于周围所有-&gt;山峰，小于周围所有-&gt;山谷</span></span><br><span class="line">        <span class="comment"># 不存在大于周围-&gt;是山谷, 不存在小于周围-&gt;是山峰</span></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            x, y = q.popleft()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x - <span class="number">1</span>, x + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y - <span class="number">1</span>, y + <span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span> i == x <span class="keyword">and</span> j == y: </span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="comment"># 注意这里的逻辑顺序</span></span><br><span class="line">                    <span class="keyword">if</span> h[i][j] &gt; h[x][y]:</span><br><span class="line">                        has_higher = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">elif</span> h[i][j] &lt; h[x][y]:</span><br><span class="line">                        has_lower = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">elif</span> <span class="keyword">not</span> st[i][j]:</span><br><span class="line">                        <span class="comment"># 只有相等的才会入队列</span></span><br><span class="line">                        q.append([i, j])</span><br><span class="line">                        st[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> has_higher, has_lower</span><br><span class="line">                  </span><br><span class="line">    peak, valley = <span class="number">0</span>, <span class="number">0</span>   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> st[i][j]:</span><br><span class="line">                has_higher, has_lower = bfs(i, j)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> has_higher: peak += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> has_lower: valley += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(peak, valley)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS中的Flood Fill——AcWing 1106. 山峰和山谷</span></span><br><span class="line"><span class="comment"># 数组模拟队列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    h = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    st = [[<span class="literal">False</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    q = [<span class="number">0</span>] * (n*n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">sx, sy</span>):</span><br><span class="line">        q[<span class="number">0</span>] = (sx, sy)</span><br><span class="line">        st[sx][sy] = <span class="literal">True</span>;</span><br><span class="line">        hh, tt = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        has_higher , has_lower = <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> hh &lt;= tt:</span><br><span class="line">            x, y = q[hh]</span><br><span class="line">            hh += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x - <span class="number">1</span>, x + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y - <span class="number">1</span>, y + <span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span> i == x <span class="keyword">and</span> j == y:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= n <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= n:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> h[i][j] &gt; h[x][y]:</span><br><span class="line">                        has_higher = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">elif</span> h[i][j] &lt; h[x][y]:</span><br><span class="line">                        has_lower = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">elif</span> <span class="keyword">not</span> st[i][j]:</span><br><span class="line">                        tt += <span class="number">1</span></span><br><span class="line">                        q[tt] = (i, j)</span><br><span class="line">                        st[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> has_higher, has_lower</span><br><span class="line">    </span><br><span class="line">    peak, vallery = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> st[i][j]:</span><br><span class="line">                has_higher, has_lower = bfs(i, j)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> has_higher: peak += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> has_lower: vallery += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(peak, vallery)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="二-最短路模型">二. 最短路模型</h2><p>宽搜具有最短路性质：</p><p>当所有边的权重相等时，使用宽搜可以在线性复杂度内得到起点到所有点的最短路（单源最短路）。</p><p>第一次搜到一定是最短的，不需要记录额外的距离信息。</p><p>特殊的dijkstra算法-&gt;权重相同时，按层搜索使队列为优先队列</p><h3 id="1-AcWing-1076-迷宫问题">1.  <a href="https://www.acwing.com/problem/content/1078/">AcWing 1076. 迷宫问题</a></h3><h4 id="C-4">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS中的最短路模型——AcWing 1076. 迷宫问题</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = N * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line">PII q[M];</span><br><span class="line">PII pre[N][N];</span><br><span class="line"><span class="comment">// pre记录最短路中当前位置的前一个位置（从哪个点过来的），也起到了st数组的作用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx, <span class="type">int</span> sy)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = &#123;sx, sy&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line">    pre[sx][sy] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123;</span><br><span class="line">        PII t = q[hh ++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span> ; ++ i)&#123;</span><br><span class="line">            <span class="type">int</span> a = t.x + dx[i], b = t.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (g[a][b] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (pre[a][b].x != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            q[++ tt] = &#123;a, b&#125;;</span><br><span class="line">            pre[a][b] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++ j)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;g[i][j]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从终点往起点搜，避免反推路径时的缓存数组</span></span><br><span class="line">    <span class="built_in">bfs</span>(n - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function">PII <span class="title">end</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 推出路径</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, end.x, end.y);</span><br><span class="line">        <span class="comment">// 不能直接判断end == &#123;n-1, n-1&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (end.x == n - <span class="number">1</span>&amp;&amp; end.y == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        end = pre[end.x][end.y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-4">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS中的最短路模型——AcWing 1076. 迷宫问题 </span></span><br><span class="line"><span class="comment"># 使用库函数deque</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    g = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    pre = [[[-<span class="number">1</span>, -<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    dx = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">    dy = [<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">sx, sy</span>):</span><br><span class="line">        q = deque([[sx, sy]]);</span><br><span class="line">        pre[sx][sy] = [sx, sy]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            x, y = q.popleft()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">                a = x + dx[i]</span><br><span class="line">                b = y + dy[i]</span><br><span class="line">                <span class="keyword">if</span> a &lt; <span class="number">0</span> <span class="keyword">or</span> a &gt;= n <span class="keyword">or</span> b &lt; <span class="number">0</span> <span class="keyword">or</span> b &gt;= n:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> g[a][b] == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># if pre[a][b] != [-1, -1]:</span></span><br><span class="line">                <span class="comment">#     continue</span></span><br><span class="line">                g[a][b] = <span class="number">1</span></span><br><span class="line">                q.append([a, b])</span><br><span class="line">                pre[a][b] = [x, y]</span><br><span class="line">                    </span><br><span class="line">    bfs(n - <span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span> </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(i, j)</span><br><span class="line">        <span class="keyword">if</span> i == n - <span class="number">1</span> <span class="keyword">and</span> j == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i, j = pre[i][j]</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="2-AcWing-188-武士风度的牛">2.<a href="https://www.acwing.com/problem/content/190/">AcWing 188. 武士风度的牛</a></h3><h4 id="C-5">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS中的最短路模型——AcWing 188. 武士风度的牛</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">155</span>, M = N * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line">PII q[M];</span><br><span class="line"><span class="type">int</span> dist[N][N]; <span class="comment">// 距离数组，保存距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 移动方式， 注意这里以“日”的方式移动</span></span><br><span class="line">    <span class="type">int</span> dx[] = &#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">int</span> dy[] = &#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 起点</span></span><br><span class="line">    <span class="type">int</span> sx, sy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j)</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">                sx = i, sy = j;</span><br><span class="line">    </span><br><span class="line">    q[<span class="number">0</span>] = &#123;sx, sy&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span> dist); <span class="comment">// 初始化标记</span></span><br><span class="line">    dist[sx][sy] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123;</span><br><span class="line">        PII t = q[hh ++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i)&#123;</span><br><span class="line">            <span class="type">int</span> a = t.x + dx[i], b = t.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (g[a][b] == <span class="string">&#x27;*&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (dist[a][b] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 判断终点，直接返回--bfs具有最短路特性，得到的距离一定是最短距离，无需额外判断</span></span><br><span class="line">            <span class="keyword">if</span> (g[a][b] == <span class="string">&#x27;H&#x27;</span>) <span class="keyword">return</span> dist[t.x][t.y] + <span class="number">1</span>;</span><br><span class="line">            q[++ tt] = &#123;a, b&#125;;</span><br><span class="line">            dist[a][b] = dist[t.x][t.y] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, g[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">bfs</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-5">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS中的最短路模型——AcWing 1076. 迷宫问题 </span></span><br><span class="line"><span class="comment"># 使用库函数deque</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    m, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    g = [<span class="built_in">input</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    dist = [[-<span class="number">1</span>] * m <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    dx = [-<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    dy = [-<span class="number">1</span>, -<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>():</span><br><span class="line">        sx, sy = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                <span class="keyword">if</span> g[i][j] == <span class="string">&#x27;K&#x27;</span>:</span><br><span class="line">                    sx, sy = i, j</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">        q = deque([[sx, sy]])</span><br><span class="line">        dist[sx][sy] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            x, y = q.popleft()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                a, b = x + dx[i], y + dy[i]</span><br><span class="line">                <span class="keyword">if</span> a &lt; <span class="number">0</span> <span class="keyword">or</span> a &gt;= n <span class="keyword">or</span> b &lt; <span class="number">0</span> <span class="keyword">or</span> b &gt;= m:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> g[a][b] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> dist[a][b] != -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> g[a][b] == <span class="string">&#x27;H&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> dist[x][y] + <span class="number">1</span></span><br><span class="line">                q.append([a, b])</span><br><span class="line">                dist[a][b] = dist[x][y] + <span class="number">1</span>   </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(bfs())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="3-AcWing-1100-抓住那头牛">3.<a href="https://www.acwing.com/problem/content/1102/">AcWing 1100. 抓住那头牛</a></h3><p>这里注意问题的转化，要有建图思想，转化为图的搜索问题</p><p>注意确定路径范围的上限</p><h4 id="C-6">C++</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BFS中的最短路模型——AcWing 1100. 抓住那头牛</span></span><br><span class="line"><span class="comment">// 注意问题的转化，要有建图思想，转化为图的搜索问题</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 注意确定路径范围的上限</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[n] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)&#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (t == k) <span class="keyword">return</span> dist[k];</span><br><span class="line">        <span class="comment">// 转化为图</span></span><br><span class="line">        <span class="comment">// 每种移动方式表明存在边相连</span></span><br><span class="line">        <span class="keyword">if</span> (t + <span class="number">1</span> &lt; N &amp;&amp; dist[t + <span class="number">1</span>] == <span class="number">-1</span>)&#123;</span><br><span class="line">            q[++ tt] = t + <span class="number">1</span>;</span><br><span class="line">            dist[t + <span class="number">1</span>] = dist[t] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; dist[t - <span class="number">1</span>] == <span class="number">-1</span>)&#123;</span><br><span class="line">            q[++ tt] = t - <span class="number">1</span>;</span><br><span class="line">            dist[t - <span class="number">1</span>] = dist[t] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * t &lt; N &amp;&amp; dist[<span class="number">2</span> * t] == <span class="number">-1</span>)&#123;</span><br><span class="line">            q[++ tt] = <span class="number">2</span> * t;</span><br><span class="line">            dist[<span class="number">2</span> * t] = dist[t] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">bfs</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="python-6">python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS中的最短路模型——AcWing 1100. 抓住那头牛</span></span><br><span class="line"><span class="comment"># 注意问题的转化，要有建图思想，转化为图的搜索问题</span></span><br><span class="line"><span class="comment"># 使用库函数deque</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    b = <span class="number">200010</span></span><br><span class="line">    n, k = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    dist = [-<span class="number">1</span>] * b</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bfs</span>():</span><br><span class="line">        q = deque([n])</span><br><span class="line">        dist[n] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            t = q.popleft()</span><br><span class="line">            <span class="keyword">if</span> (t == k):</span><br><span class="line">                <span class="keyword">return</span> dist[k]</span><br><span class="line">            <span class="keyword">if</span> (t - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> dist[t - <span class="number">1</span>] == -<span class="number">1</span>):</span><br><span class="line">                q.append(t - <span class="number">1</span>)</span><br><span class="line">                dist[t - <span class="number">1</span>] = dist[t] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (t + <span class="number">1</span> &lt; b <span class="keyword">and</span> dist[t + <span class="number">1</span>] == -<span class="number">1</span>):</span><br><span class="line">                q.append(t + <span class="number">1</span>)</span><br><span class="line">                dist[t + <span class="number">1</span>] = dist[t] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * t &lt; b <span class="keyword">and</span> dist[<span class="number">2</span> * t] == -<span class="number">1</span>):</span><br><span class="line">                q.append(<span class="number">2</span> * t)</span><br><span class="line">                dist[<span class="number">2</span> * t] = dist[t] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(bfs())</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/23/hello-world/"/>
      <url>/2023/01/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to my blog!</p><p>身为一名CS的学生， 一直期望搭建自己的小站。这个blog完全是照着<a href="https://www.fomal.cc/posts/eec9786.html">Fomalhaut🥝</a>大佬的教程实现的，虽然主要的工作就是拷贝，但完成后还是很开心滴🐹。</p><p>希望通过这个小站， 我能够记录自己学习与生活的点点滴滴。在接下来不多的大学时光和更长远的科研道路上，不负初心，在自己的道路上勇敢前行🤓！</p>]]></content>
      
      
      <categories>
          
          <category> record </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
